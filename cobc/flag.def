/*
   Copyright (C) 2003-2012, 2014-2017 Free Software Foundation, Inc.
   Written by Keisuke Nishida, Roger While, Simon Sobisch

   This file is part of GnuCOBOL.

   The GnuCOBOL compiler is free software: you can redistribute it
   and/or modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   GnuCOBOL is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GnuCOBOL.  If not, see <http://www.gnu.org/licenses/>.
*/


/* Compiler flag defines */

/* Normal binary flags (standard: off) */
/* CB_FLAG    (var, help switch, name, help) */

/* Normal binary flags (standard: on) */
/* CB_FLAG_ON (var, help switch, name, help) */


/* Flags with required parameter (standard: default)*/
/* CB_FLAG_RQ (var, help switch, name, default, getopt return, help) */

/* Flags with required parameter and no associated variable */
/* CB_FLAG_NQ (help switch, name, getopt return, help) */


/* Flags with required parameter */

CB_FLAG_RQ (cb_stack_size, 0, "stack-size", 255, 1,
	 _("define PERFORM stack size\n\t\t\t- default: 255"))

CB_FLAG_RQ (cb_if_cutoff, 0, "if-cutoff", 3, 2,
	 _("define cutoff depth for IF statements\n\t\t\t- default: 3"))

CB_FLAG_RQ (cb_ebcdic_sign, 1, "sign", 0, 3,
	 _("define display sign representation\n\t\t\t- ASCII or EBCDIC (default: machine native)"))

CB_FLAG_RQ (cb_fold_copy, 1, "fold-copy", 0, 4,
	 _("fold COPY subject to value\n\t\t\t- UPPER or LOWER (default: no transformation)"))

CB_FLAG_RQ (cb_fold_call, 1, "fold-call", 0, 5,
	 _("fold PROGRAM-ID, CALL, CANCEL subject to value\n\t\t\t- UPPER or LOWER (default: no transformation)"))

CB_FLAG_RQ (cb_default_byte, 1, "defaultbyte", -1, 6,
	 _("initialize fields without VALUE to decimal value\n\t\t\t- 0 to 255 (default: initialize to picture)"))

CB_FLAG_RQ (cb_def_callfh, 1, "callfh", -1, 7,
	 _("Call user written EXTFH interface module for I/O"))

CB_FLAG_RQ (cb_def_dump, 1, "dump", -1, 8,
	 _("Dump data fields on abort, ALL, WS, LS, RD, FD, SC"))

/* Flags with required parameter and no associated variable */

CB_FLAG_NQ (1, "intrinsics", 10,
	 _("intrinsics to be used without FUNCTION keyword\n\t\t\t- ALL or intrinsic function name(,name,...)"))

/* Binary flags */

/* Flags with suppressed help */
CB_FLAG (cb_flag_static_call, 0, "static-call",
	 _("output static function calls for the CALL statement"))

CB_FLAG (cb_flag_computed_goto, 0, "computed-goto",
	 _("generate computed goto C statements"))

CB_FLAG (cb_flag_alt_ebcdic, 0, "alternate-ebcdic",
	 _("use restricted ASCII to EBCDIC translate"))

CB_FLAG (cb_flag_extra_brace, 0, "extra-brace",
	 _("generate extra braces in generated C code"))

CB_FLAG (cb_flag_correct_numeric, 0, "correct-numeric",
	 _("attempt correction of invalid numeric display items"))

CB_FLAG (cb_flag_stack_on_heap, 0, "stack-on-heap",
	 _("PERFORM stack allocated on heap"))

/* Normal flags */
CB_FLAG (cb_flag_trace, 1, "trace",
	 _("generate trace code\n\t\t\t- executed SECTION/PARAGRAPH"))

CB_FLAG (cb_flag_traceall, 1, "traceall",
	 _("generate trace code\n\t\t\t- executed SECTION/PARAGRAPH/STATEMENTS\n\t\t\t- turned on by -debug"))

CB_FLAG (cb_flag_syntax_only, 1, "syntax-only",
	 _("syntax error checking only; don't emit any output"))

CB_FLAG (cb_flag_debugging_line, 1, "debugging-line",
	 _("enable debugging lines\n\t\t\t- 'D' in indicator column or floating >>D"))

CB_FLAG (cb_flag_source_location, 1, "source-location",
	 _("generate source location code\n\t\t\t- turned on by -debug/-g/-ftraceall"))

CB_FLAG (cb_flag_implicit_init, 1, "implicit-init",
	 _("automatic initialization of the COBOL runtime system"))

CB_FLAG (cb_flag_stack_check, 1, "stack-check",
	 _("PERFORM stack checking\n\t\t\t- turned on by -debug or -g"))

CB_FLAG (cb_flag_syntax_extension, 1, "syntax-extension",
	 _("allow syntax extensions\n\t\t\t- eg. switch name SW1, etc."))

CB_FLAG (cb_flag_write_after, 1, "write-after",
	 _("use AFTER 1 for WRITE of LINE SEQUENTIAL\n\t\t\t- default: BEFORE 1"))

CB_FLAG (cb_flag_mfcomment, 1, "mfcomment",
	 _("'*' or '/' in column 1 treated as comment\n\t\t\t- FIXED format only"))

CB_FLAG (cb_flag_acucomment, 1, "acucomment",
	 _("'$' in indicator area treated as '*',\n\t\t\t'|' treated as floating comment"))

CB_FLAG (cb_flag_notrunc, 1, "notrunc",
	 _("allow numeric field overflow\n\t\t\t- non-ANSI behaviour"))

CB_FLAG (cb_flag_odoslide, 1, "odoslide",
	 _("adjust items following OCCURS DEPENDING"))

CB_FLAG (cb_flag_apostrophe, 1, "single-quote",
	 _("use a single quote (apostrophe) for QUOTE\n\t\t\t- default: double quote"))

CB_FLAG (cb_flag_recursive_check, 1, "recursive-check",
	 _("check recursive program call; Obsolete"))

CB_FLAG (cb_flag_recursive, 1, "recursive",
	 _("compile as a recursive program"))

CB_FLAG (cb_flag_relaxed_syntax, 1, "relax-syntax",
	 _("relax syntax checking\n\t\t\t- eg. REDEFINES position"))

CB_FLAG (cb_flag_optional_file, 1, "optional-file",
	 _("treat all files as OPTIONAL\n\t\t\t- unless NOT OPTIONAL specified"))

CB_FLAG (cb_mf_ibm_comp, 1, "ibmcomp",
	 _("Handle COMP fields like Micro Focus IBMCOMP\n\t\t\t- binary-size: 2-4-8 & synchronized-clause: ok"))

CB_FLAG (cb_mf_files, 1, "mf-files",
	 _("Sequential & Relative files will match Micro Focus format"))

CB_FLAG (cb_flag_arithmetic_osvs, 1, "arithmetic-osvs",
	 _("Round down number of decimals in intermediate results\n\t\t\t = number of decimals in final result field\n\t\t\t- default: no rounding, More accurate "))

CB_FLAG (cb_flag_move_ibm, 1, "move-ibm",
	 _("MOVE operates as on IBM (left to right, byte by byte)\n\t\t\t default: no propagating move"))

