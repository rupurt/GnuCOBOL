## Copyright (C) 2003-2012, 2014-2015 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch
## Copyright (C) 2015-2016 Ron Norman
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <http://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

AT_SETUP([READ INTO AT-END sequence])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "./TEST-FILE".
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC     PIC X(10).
       WORKING-STORAGE  SECTION.
       01  X            PIC X(10).
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  INPUT  TEST-FILE.
           READ  TEST-FILE INTO X
               AT END MOVE ALL ZERO TO X
           END-READ.
           CLOSE TEST-FILE.
           IF X NOT = "0000000000"
              DISPLAY "Expected zeros - Got " X
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([First READ on empty SEQUENTIAL INDEXED file])
AT_KEYWORDS([runfile])

AT_CHECK([test "$COB_HAS_ISAM" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS  INDEXED
                        ACCESS MODE  IS  SEQUENTIAL
                        RECORD KEY   IS  TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-KEY      PIC X(10).
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  INPUT  TEST-FILE.
           READ  TEST-FILE
                 AT END
                   CONTINUE
                 NOT AT END
                   DISPLAY "NOT OK"
                   END-DISPLAY
           END-READ.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([REWRITE a RELATIVE file with RANDOM access])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS RELATIVE
                        ACCESS MODE  IS RANDOM
                        RELATIVE KEY IS TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X.
       WORKING-STORAGE  SECTION.
       01 TEST-KEY      PIC 9.
       PROCEDURE        DIVISION.
      *
           OPEN OUTPUT TEST-FILE.
           MOVE 1 TO TEST-KEY.
           MOVE "A" TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           MOVE 2 TO TEST-KEY.
           MOVE "B" TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           CLOSE TEST-FILE.
      *
           OPEN I-O TEST-FILE.
           MOVE 1 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           MOVE 2 TO TEST-KEY.
           MOVE "C" TO TEST-REC.
           REWRITE TEST-REC
           END-REWRITE.
           CLOSE TEST-FILE.
      *
           OPEN INPUT TEST-FILE.
           MOVE 1 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           IF TEST-REC NOT = "A"
              DISPLAY "Expected 'A' - Got " TEST-REC
              END-DISPLAY
           END-IF.
           MOVE 2 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           IF TEST-REC NOT = "C"
              DISPLAY "Expected 'C' - Got " TEST-REC
              END-DISPLAY
           END-IF.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INDEXED File KEYCHECK])
AT_KEYWORDS([FileIo])

# skip if not configured with ISAM
AT_SKIP_IF([test "$COB_HAS_ISAM" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM, CM-COMPANY

           ALTERNATE RECORD KEY IS SPLIT-KEY2
           SOURCE IS CM-TELEPHONE,CM-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

           SELECT TSTFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TST-KEY
           SOURCE IS TS-CUST-NUM, TS-COMPANY

           ALTERNATE RECORD KEY IS TST-KEY2
           SOURCE IS TS-TELEPHONE,TS-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS TST-KEY3
           SOURCE IS TS-DISK,TS-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"

           FILE STATUS IS CUST-STAT
           .

           SELECT BADFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS BAD-KEY
           SOURCE IS BD-CUST-NUM, BD-COMPANY

           ALTERNATE RECORD KEY IS BAD-KEY3
           SOURCE IS BD-DISK,BD-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3). 
             15  CM-CUST-NNN                   PICTURE X(5). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-TAPE                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(5). 
       
       FD  BADFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  BAD-RECORD.
           05  BAD-REC. 
           10  BD-CUST-NUM                     PICTURE X(8). 
           10  BD-STATUS                       PICTURE X. 
           10  BD-COMPANY                      PICTURE X(25). 
           10  BD-ADDRESS-1                    PICTURE X(25). 
           10  BD-ADDRESS-2                    PICTURE X(25). 
           10  BD-ADDRESS-3                    PICTURE X(25). 
           10  BD-TELEPHONE                    PICTURE 9(10). 
           10  BD-DP-MGR                       PICTURE X(25). 
           10  BD-MACHINE                      PICTURE X(8). 
           10  BD-MEMORY                       PICTURE X(4). 
           10  BD-DISK                         PICTURE X(8). 
           10  BD-TAPE                         PICTURE X(8). 
           10  BD-NO-TERMINALS                 PICTURE 9(5). 
       
       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSTFL-RECORD.
           05  TSTFL-REC. 
           10  TS-CUST-NUM                     PICTURE X(8). 
           10  TS-STATUS                       PICTURE X. 
           10  TS-COMPANY                      PICTURE X(25). 
           10  TS-ADDRESS-1                    PICTURE X(25). 
           10  TS-ADDRESS-2                    PICTURE X(25). 
           10  TS-ADDRESS-3                    PICTURE X(25). 
           10  TS-TELEPHONE                    PICTURE 9(10). 
           10  TS-DP-MGR                       PICTURE X(25). 
           10  TS-MACHINE                      PICTURE X(8). 
           10  TS-MEMORY                       PICTURE X(4). 
           10  TS-DISK                         PICTURE X(8). 
           10  TS-TAPE                         PICTURE X(8). 
       
      
       WORKING-STORAGE SECTION.
      
       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
      
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
      
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
      
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
      
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
      
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
               88  NULL-KEY                    VALUE 4 5 8 12 14.
      
           05  TSPFL-KEY                       PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT 
                       " opening TSTFILE, Record size different" 
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different" 
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           OPEN INPUT BADFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT 
                       " opening BADFILE, Index mismatch" 
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open BADFILE, Index mismatch" 
                       UPON CONSOLE
               CLOSE BADFILE
           END-IF.

           DISPLAY "IO_BADFILE" UPON ENVIRONMENT-NAME.
           DISPLAY "keycheck=off" UPON ENVIRONMENT-VALUE.
           OPEN INPUT BADFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Un-Expected ERROR " CUST-STAT 
                       " opening BADFILE, Index mismatch" 
                       UPON CONSOLE
           ELSE
               DISPLAY "Expected open BADFILE, with Index mismatch" 
                       UPON CONSOLE
               CLOSE BADFILE
           END-IF.
           STOP RUN.
      
       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
           IF  NULL-KEY
               MOVE ALL "*"                  TO CM-DISK
               MOVE ALL "*"                  TO CM-TAPE.
      
           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Key: " TSPFL-KEY ", Status: " CUST-STAT 
                                 UPON CONSOLE.
      
       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           END-IF.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS SPLIT-KEY2
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                         CUST-STAT " as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                         CUST-STAT " as expected"
                         UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

AT_CHECK([cobc -x -std=mf -w prog.cob ], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********.
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
LIST SAMPLE FILE DESCENDING
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********.
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    .
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    .
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 02 as expected
ReWrite: FOR00000 got 02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
Expected ERROR 39 opening BADFILE, Index mismatch
Expected open BADFILE, with Index mismatch
], [])

AT_CLEANUP


AT_SETUP([INDEXED File Sparse/Split keys])
AT_KEYWORDS([runfile])

# skip if not configured with ISAM
AT_SKIP_IF([test "$COB_HAS_ISAM" != "yes"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM, CM-COMPANY

           ALTERNATE RECORD KEY IS SPLIT-KEY2
           SOURCE IS CM-TELEPHONE,CM-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-TAPE                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(5). 
       
       WORKING-STORAGE SECTION.
      
       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
      
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
      
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
      
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
      
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
      
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
               88  NULL-KEY                    VALUE 4 5 8 12 14.
      
           05  TSPFL-KEY                       PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           PERFORM LOADFILE.
           PERFORM LISTFILE.
           STOP RUN.
      
       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
           IF  NULL-KEY
               MOVE ALL "*"                  TO CM-DISK
               MOVE ALL "*"                  TO CM-TAPE.
      
           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Key: " TSPFL-KEY ", Status: " CUST-STAT 
                                 UPON CONSOLE.
      
       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE "
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
      *---- Some results may be different with VB-ISAM  ------*
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           END-IF.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read "
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read "
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS SPLIT-KEY2
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE ":"
                         UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********:
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********:
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
LIST SAMPLE FILE DESCENDING
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********:
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********:
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    :
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    :
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    :
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6:
], [])

AT_CLEANUP


AT_SETUP([SORT with SD, I/O SEQUENTIAL])
AT_KEYWORDS([runfile using giving])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt".
       SELECT SORT-OUT  ASSIGN "result.txt".
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(6).
       FD SORT-OUT.
       01 OUT-REC       PIC X(6).
       SD SORT-WRK.
       01 WRK-REC       PIC X(6).
       PROCEDURE        DIVISION.

      * We shouldn't use AT_DATA to create sequential record
      * data, because AT_DATA needs a \n at the end
           OPEN OUTPUT SORT-IN.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "world " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "hello " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           CLOSE SORT-IN.

           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([cat result.txt], [0], [                              hello world ], [])

AT_CLEANUP


AT_SETUP([SORT with SD, I/O LINE SEQUENTIAL])
AT_KEYWORDS([runfile using giving])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-OUT  ASSIGN "result.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(20).
       FD SORT-OUT.
       01 OUT-REC       PIC X(20).
       SD SORT-WRK.
       01 WRK-REC       PIC X(6).
       PROCEDURE        DIVISION.

      * We shouldn't use AT_DATA to create sequential record
      * data, because AT_DATA needs a \n at the end
           OPEN OUTPUT SORT-IN.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "world " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "hello " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           CLOSE SORT-IN.

           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([cat result.txt], [0], [




hello
world
], [])

AT_CLEANUP


AT_SETUP([SORT with SD, I/O LINE SEQUENTIAL same file])
AT_KEYWORDS([runfile using giving])

AT_DATA([test.txt], [
bla
world
hello

blubb
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-WRK  ASSIGN "dummy".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(6).
       SD SORT-WRK.
       01 sort-entry    PIC X(6).
       PROCEDURE        DIVISION.

      * We shouldn't use : > to create sequential record
      * data, because : > needs a \n at the end
      *     OPEN OUTPUT SORT-IN.
      *     WRITE IN-REC FROM SPACES   END-WRITE.
      *     WRITE IN-REC FROM "world " END-WRITE.
      *     WRITE IN-REC FROM "hello " END-WRITE.
      *     WRITE IN-REC FROM SPACES   END-WRITE.
      *     CLOSE SORT-IN.

           SORT SORT-WRK
                ASCENDING sort-entry
                USING  SORT-IN
                GIVING SORT-IN.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([cat test.txt], [0], [

bla
blubb
hello
world
], [])

AT_CLEANUP


AT_SETUP([SORT nonexistent file])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "SORT-IN".
       SELECT SORT-OUT  ASSIGN "SORT-OUT".
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(100).
       FD SORT-OUT.
       01 OUT-REC       PIC X(100).
       SD SORT-WRK.
       01 WRK-REC       PIC X(100).
       PROCEDURE        DIVISION.
           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([cat SORT-OUT], [0], [], [])

AT_CLEANUP


AT_SETUP([ASSIGN with LOCAL-STORAGE item])
AT_KEYWORDS([runfile])

AT_DATA([test.txt],
[hello
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE	        SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       LOCAL-STORAGE	SECTION.
       01  path         PIC X(10) VALUE "test.txt".
       PROCEDURE        DIVISION.
           OPEN INPUT test-file
           READ test-file
	   DISPLAY test-rec
           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([./prog], [0],
[hello
])

AT_CLEANUP

AT_SETUP([ASSIGN with LOCAL-STORAGE item and INITIAL prog])
AT_KEYWORDS([runfile])

# Files are initialised in a different location in INITIAL program, hence the
# need for a separate test.

AT_DATA([test.txt],
[hello
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog INITIAL.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE	        SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       LOCAL-STORAGE	SECTION.
       01  path         PIC X(10) VALUE "test.txt".
       PROCEDURE        DIVISION.
           OPEN INPUT test-file
           READ test-file
	   DISPLAY test-rec
           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([./prog], [0],
[hello
])

AT_CLEANUP


AT_SETUP([RELATIVE Multi-Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELVAR
           ORGANIZATION RELATIVE 
           ACCESS IS SEQUENTIAL
           RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-TYPE                         PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(251). 
       
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-TYPE                         PICTURE X. 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-ADDRESS                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
       
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  ZRO               VALUE  1          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Initial Re-Read Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           IF CUST-STAT = "30"
               CLOSE FLATFILE
	       STOP RUN
           END-IF
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           DISPLAY "For Rewrite Open I-O Sts:" CUST-STAT 
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           DISPLAY "For Rewrite/Delete Open I-O Sts:" CUST-STAT 
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           PERFORM READ-RECORD
           DELETE FLATFILE 
           DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > 2.
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list afer Extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
           IF CM-TYPE = SPACES
             DISPLAY "Read  " CM-CUST-NUM " #:" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM " #:" REC-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.
      
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF ODD-RECORD
               MOVE "8417"                   TO C2-DISK 
               MOVE CM-CUST-NUM              TO C2-CUST-NUM
               MOVE '2'                      TO C2-TYPE
               MOVE CM-COMPANY               TO C2-COMPANY
               MOVE CM-PK-DATE               TO C2-PK-DATE
               MOVE CM-NO-TERMINALS          TO C2-NO-TERMINALS
               MOVE DATA-ADDRESS (SUB)       TO C2-ADDRESS
               WRITE TSP2-RECORD
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE ' '                      TO CM-TYPE
               WRITE TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample program data file.
Sample program data file load complete.
Initial Re-Read Open Sts:00
Read2 ALP00000 #:00001 Trms:00010
Read  BET00000 #:00002 Trms:00013
Read2 GAM00000 #:00003 Trms:00075
Read  DEL00000 #:00004 Trms:00010
Read2 EPS00000 #:00005 Trms:00090
Read  FOR00000 #:00006 Trms:00254
Read Status: 10
For Rewrite Open I-O Sts:00
Read2 ALP00000 #:00001 Trms:00010
REWRITE ALP00000 Sts 00 Trms:00011
For Rewrite/Delete Open I-O Sts:00
Read2 ALP00000 #:00001 Trms:00011
REWRITE ALP00000 Sts 00 Trms:00012
Read  BET00000 #:00002 Trms:00013
DELETE BET00000 Sts 00
Re-list Open Sts:00
Read2 ALP00000 #:00001 Trms:00012
Read2 GAM00000 #:00003 Trms:00075
Read  DEL00000 #:00004 Trms:00010
Read2 EPS00000 #:00005 Trms:00090
Read  FOR00000 #:00006 Trms:00254
Read Status: 10
Re-list afer Extend Open Sts:00
Read2 ALP00000 #:00001 Trms:00012
Read2 GAM00000 #:00003 Trms:00075
Read  DEL00000 #:00004 Trms:00010
Read2 EPS00000 #:00005 Trms:00090
Read  FOR00000 #:00006 Trms:00254
Read2 ALP00000 #:00007 Trms:00010
Read  BET00000 #:00008 Trms:00013
Read Status: 10
], [])

AT_CLEANUP


AT_SETUP([RELATIVE one Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(252). 
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
           10  C2-TRAILER                      PICTURE X(252). 

       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           PERFORM 4 TIMES
             PERFORM READ-NEXT
           END-PERFORM.
           CLOSE FLATFILE.

           DISPLAY "*** Test Update of file ***".
           OPEN I-O FLATFILE.
           PERFORM READ-NEXT
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           READ FLATFILE WITH LOCK
           DISPLAY "Read " CM-CUST-NUM
           DELETE FLATFILE 
           DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           DISPLAY "*** List file afer Update/Delete ***".
           OPEN INPUT FLATFILE.
           PERFORM 4 TIMES
             READ FLATFILE
             DISPLAY "Read " CM-CUST-NUM " Sts " CUST-STAT 
                     " Trms:" CM-NO-TERMINALS
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN I-O FLATFILE2.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE 5  TO REC-NUM.
           PERFORM READ2.
           MOVE 3  TO REC-NUM.
           PERFORM READ2.
           WRITE TSP2-RECORD.
           DISPLAY "Write of " REC-NUM " Sts " CUST-STAT 
           PERFORM READ2.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE 2  TO REC-NUM.
           READ FLATFILE2.
           DISPLAY " Read of deleted " REC-NUM " Sts " CUST-STAT 
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (2)       TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           MOVE "8440"                       TO C2-DISK 
           MOVE 2  TO REC-NUM.
           REWRITE TSP2-RECORD.
           DISPLAY "ReWrite deleted " C2-CUST-NUM " Sts " CUST-STAT 
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (2)       TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           MOVE "8440"                       TO C2-DISK 
           MOVE 2  TO REC-NUM.
           WRITE TSP2-RECORD.
           DISPLAY "Write of deleted " C2-CUST-NUM " Sts " CUST-STAT 
           CLOSE FLATFILE2.

           DISPLAY "*** List file afer Re-Add ***".
           OPEN INPUT FLATFILE.
           PERFORM 4 TIMES
             PERFORM READ-RECORD
           END-PERFORM.
           PERFORM READ-PREV
           PERFORM READ-PREV
           PERFORM READ-PREV
           PERFORM READ-PREV
           START FLATFILE LAST
           DISPLAY "Start Last Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-PREV
           PERFORM READ-PREV
           START FLATFILE FIRST
           DISPLAY "Start First Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 4 TO REC-NUM.
           START FLATFILE KEY GREATER OR EQUAL REC-NUM.
           DISPLAY "Start GE 4:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 4 TO REC-NUM.
           START FLATFILE KEY GREATER REC-NUM.
           DISPLAY "Start GT 4:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 5 TO REC-NUM.
           START FLATFILE KEY LESS REC-NUM.
           DISPLAY "Start LT 5: " REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-RECORD.
           PERFORM READ-PREV
           MOVE 5 TO REC-NUM.
           START FLATFILE KEY LESS OR EQUAL REC-NUM.
           DISPLAY "Start LE 5:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-RECORD.
           PERFORM READ-PREV
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           MOVE 2 TO SUB
           PERFORM LOAD-RECORD .
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list after Extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE2.
             PERFORM READ2
                        VARYING REC-NUM FROM 1 BY 1 
                          UNTIL REC-NUM > MAX-SUB + 5
                             OR CUST-STAT NOT = "00".
           CLOSE FLATFILE2.
           STOP RUN RETURNING 0.
      
       READ2.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE2
                INVALID KEY
                   DISPLAY "Invalid Read2 " REC-NUM 
                           " Status: " CUST-STAT
           END-READ
           IF CUST-STAT NOT = "00"
             DISPLAY "Read2 Status: " CUST-STAT
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.

       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
             DISPLAY "Read  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       READ-PREV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE PREVIOUS
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Prev Status: " CUST-STAT
           ELSE
             DISPLAY "Prev  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Next Status: " CUST-STAT
           ELSE
             DISPLAY "Next  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample program data file.
Sample program data file load complete.
Open Sts:00
Next  ALP00000 #00001 Trms:00010
Next  BET00000 #00002 Trms:00013
Next  DEL00000 #00003 Trms:00075
Next  EPS00000 #00004 Trms:00010
*** Test Update of file ***
Next  ALP00000 #00001 Trms:00010
REWRITE ALP00000 Sts 00 Trms:00011
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:00012
Read BET00000
DELETE BET00000 Sts 00
*** List file afer Update/Delete ***
Read ALP00000 Sts 00 Trms:00012
Read DEL00000 Sts 00 Trms:00075
Read EPS00000 Sts 00 Trms:00010
Read FOR00000 Sts 00 Trms:00090
Read2 FOR00000 #00005 Trms:00090
Read2 DEL00000 #00003 Trms:00075
Write of 00003 Sts 22
Read2 DEL00000 #00003 Trms:00075
 Read of deleted 00002 Sts 23
ReWrite deleted BET00000 Sts 23
Write of deleted BET00000 Sts 00
*** List file afer Re-Add ***
Read  ALP00000 #00001 Trms:00012
Read  BET00000 #00002 Trms:00013
Read  DEL00000 #00003 Trms:00075
Read  EPS00000 #00004 Trms:00010
Prev  DEL00000 #00003 Trms:00075
Prev  BET00000 #00002 Trms:00013
Prev  ALP00000 #00001 Trms:00012
Read Prev Status: 10
Start Last Sts 00 Rec#00006
Prev  GAM00000 #00006 Trms:00254
Prev  FOR00000 #00005 Trms:00090
Start First Sts 00 Rec#00001
Next  ALP00000 #00001 Trms:00012
Next  BET00000 #00002 Trms:00013
Start GE 4:00004 Sts 00 Rec#00004
Next  EPS00000 #00004 Trms:00010
Next  FOR00000 #00005 Trms:00090
Start GT 4:00005 Sts 00 Rec#00005
Next  FOR00000 #00005 Trms:00090
Next  GAM00000 #00006 Trms:00254
Start LT 5: 00004 Sts 00 Rec#00004
Read  EPS00000 #00004 Trms:00010
Prev  DEL00000 #00003 Trms:00075
Start LE 5:00005 Sts 00 Rec#00005
Read  FOR00000 #00005 Trms:00090
Prev  EPS00000 #00004 Trms:00010
Re-list Open Sts:00
Read  ALP00000 #00001 Trms:00012
Read  BET00000 #00002 Trms:00013
Read  DEL00000 #00003 Trms:00075
Read  EPS00000 #00004 Trms:00010
Read  FOR00000 #00005 Trms:00090
Read  GAM00000 #00006 Trms:00254
Read Status: 10
Re-list after Extend Open Sts:00
Read  ALP00000 #00001 Trms:00012
Read  BET00000 #00002 Trms:00013
Read  DEL00000 #00003 Trms:00075
Read  EPS00000 #00004 Trms:00010
Read  FOR00000 #00005 Trms:00090
Read  GAM00000 #00006 Trms:00254
Read  BET00000 #00007 Trms:00013
Read Status: 10
Read2 ALP00000 #00001 Trms:00012
Read2 BET00000 #00002 Trms:00013
Read2 DEL00000 #00003 Trms:00075
Read2 EPS00000 #00004 Trms:00010
Read2 FOR00000 #00005 Trms:00090
Read2 GAM00000 #00006 Trms:00254
Read2 BET00000 #00007 Trms:00013
Invalid Read2 00008 Status: 23
Read2 Status: 23
], [])

AT_CLEANUP


AT_SETUP([SEQUENTIAL Multi-Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL SEQVAR
           ORGANIZATION SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-TYPE                         PICTURE X.
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(251). 
       
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-TYPE                         PICTURE X.
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-ADDRESS                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP.
       77  ZRO               VALUE  1          PICTURE 9(4) COMP.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(8) COMP.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(4) COMP-4 VALUE 10.
           05  FILLER PIC 9(4) COMP-4 VALUE 13.
           05  FILLER PIC 9(4) COMP-4 VALUE 75.
           05  FILLER PIC 9(4) COMP-4 VALUE 10.
           05  FILLER PIC 9(4) COMP-4 VALUE 90.
           05  FILLER PIC 9(4) COMP-4 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(4) COMP-4 OCCURS 6.
       01  WORK-AREA.
           05  SUB                     PICTURE 9(4) COMP.
               88  ODD-RECORD          VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           PERFORM READ-RECORD
           PERFORM READ-RECORD
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " C2-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           PERFORM READ-RECORD
      *    DELETE should cause compiler error
      *    DELETE FLATFILE 
      *    DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD.
           PERFORM READ-RECORD.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE2 " C2-CUST-NUM " Sts " CUST-STAT
                     " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT
                     " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.


           OPEN INPUT FLATFILE.
           DISPLAY "Reread file after updates Open Sts:" CUST-STAT.
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           MOVE 1 TO SUB
           PERFORM LOAD-RECORD
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list after extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read status: " CUST-STAT
           ELSE
           IF CM-TYPE = SPACES
             DISPLAY "Read  " CM-CUST-NUM
                     " Trms:" CM-NO-TERMINALS
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.

       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           IF ODD-RECORD
               MOVE CM-CUST-NUM              TO C2-CUST-NUM
               MOVE CM-COMPANY               TO C2-COMPANY
               MOVE CM-DISK                  TO C2-DISK   
               MOVE CM-PK-DATE               TO C2-PK-DATE
               MOVE CM-NO-TERMINALS          TO C2-NO-TERMINALS
               MOVE DATA-ADDRESS (SUB)       TO C2-ADDRESS
               MOVE '2'                      TO C2-TYPE
               WRITE TSP2-RECORD
           ELSE
               WRITE TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample program data file.
Sample program data file load complete.
Open Sts:00
Read2 ALP00000 Trms:00010
Read  BET00000 Trms:00013
Read2 ALP00000 Trms:00010
REWRITE ALP00000 Sts 00 Trms:00011
Read2 ALP00000 Trms:00011
REWRITE ALP00000 Sts 00 Trms:00012
Read  BET00000 Trms:00013
Read2 ALP00000 Trms:00012
Read  BET00000 Trms:00013
REWRITE2 BET00000 Sts 44 Trms:08225
Read2 ALP00000 Trms:00012
REWRITE ALP00000 Sts 44 Trms:08225
Reread file after updates Open Sts:00
Read2 ALP00000 Trms:00012
Read  BET00000 Trms:00013
Read2 GAM00000 Trms:00075
Read  DEL00000 Trms:00010
Read2 EPS00000 Trms:00090
Read  FOR00000 Trms:00254
Read status: 10
Re-list after extend Open Sts:00
Read2 ALP00000 Trms:00012
Read  BET00000 Trms:00013
Read2 GAM00000 Trms:00075
Read  DEL00000 Trms:00010
Read2 EPS00000 Trms:00090
Read  FOR00000 Trms:00254
Read2 ALP00000 Trms:00010
Read status: 10
], [])

AT_CLEANUP


AT_SETUP([SEQUENTIAL one Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL SEQFIX
           ORGANIZATION SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(8). 
       
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           READ FLATFILE WITH LOCK
           DISPLAY "Read " CM-CUST-NUM
      *    DELETE FLATFILE 
      *    DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Re-list File Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN EXTEND FLATFILE.
           MOVE 2 TO SUB
           PERFORM LOAD-RECORD
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "List File afer EXTEND Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
             DISPLAY "Read  " CM-CUST-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       LOADFILE.
           DISPLAY "Loading sample data file.".
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete.".
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample data file.
Sample data file load complete.
Open Sts:00
Read ALP00000 Sts:00
Read BET00000 Sts:00
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:00011
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:00012
Read BET00000
Re-list File Open Sts:00
Read  ALP00000 Trms:00012
Read  BET00000 Trms:00013
Read  GAM00000 Trms:00075
Read  DEL00000 Trms:00010
Read  EPS00000 Trms:00090
Read  FOR00000 Trms:00254
Read Status: 10
List File afer EXTEND Open Sts:00
Read  ALP00000 Trms:00012
Read  BET00000 Trms:00013
Read  GAM00000 Trms:00075
Read  DEL00000 Trms:00010
Read  EPS00000 Trms:00090
Read  FOR00000 Trms:00254
Read  BET00000 Trms:00013
Read Status: 10
], [])

AT_CLEANUP

AT_SETUP([WRITE+REWRITE FILE name ])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4).
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4).
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN I-O FLATFILE2.
	   MOVE 2 TO REC-NUM
           READ FLATFILE2
           DISPLAY "Read    " C2-CUST-NUM " Sts:" CUST-STAT
                   " Trms:" C2-NO-TERMINALS.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD
           READ FLATFILE2
           DISPLAY "REWROTE " C2-CUST-NUM " Sts:" CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE2.
	   STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE FILE FLATFILE FROM TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Loading sample program data file.
Sample program data file load complete.
Read    BET00000 Sts:00 Trms:0013
REWROTE BET00000 Sts:00 Trms:0014
], [])

AT_CLEANUP


AT_SETUP([INDEXED File Locking])
AT_KEYWORDS([FileIo])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE  ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           LOCK MANUAL 
      *    LOCK AUTOMATIC 
           WITH LOCK ON MULTIPLE RECORDS
      *    WITH LOCK ON RECORD 
           SHARING WITH ALL OTHER
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM

           FILE STATUS IS CUST-STAT .

           SELECT LOCKFILE ASSIGN EXTERNAL RELLCK
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS LCK-REC
           FILE STATUS IS CUST-STAT.

           SELECT OPTIONAL REPORTIT ASSIGN TO REPORT-FILE 
           ORGANIZATION LINE SEQUENTIAL.

       DATA  DIVISION.
       FILE SECTION.
       FD  LOCKFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  LCK-RECORD.
           10  LCK-NUM                         PICTURE 9(3). 
           10  LCK-TBL                         PICTURE X OCCURS 4 TIMES. 
           10  LCK-MESSAGE                     PICTURE X(25). 

       FD  REPORTIT
           BLOCK CONTAINS 5 RECORDS.
      
       01  REPORT-RECORD                       PICTURE X(80).

       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
         05  TSPFL-REC. 
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4). 
       
       WORKING-STORAGE SECTION.
      
       01  WS-TIME-NOW.
           05  WS-NOW-HH               PIC 9(02) VALUE 0.
           05  WS-NOW-MM               PIC 9(02) VALUE 0.
           05  WS-NOW-SS               PIC 9(02) VALUE 0.
           05  WS-NOW-HS               PIC 9(02) VALUE 0.

       01  CUST-STAT              PIC XX.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           PICTURE 9(2)  VALUE 8.
       77  REPORT-FILE       PICTURE X(32) VALUE "control.txt".
       77  MSG               PICTURE X(70) VALUE SPACES.
       77  CMD-LINE          PICTURE X(80) VALUE SPACES.
       77  SEQ               PICTURE 99  VALUE 0.
       77  LCK-REC           PICTURE 9(4) VALUE 1.
      
       01  SAVE-REC          PIC X(250).

       01  TEST-DATA.
         02  DATA-CUST-NUM-TBL.
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "CAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "HIJ00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 8.
         02  DATA-COMPANY-TBL.
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "CAMERA X-RAY TECHNOLOGY  ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "HECKLE PLUMBING SUPPLIES ".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 8.

       01  WORK-AREA.
           05  SLP-TIME        PICTURE 9(9) BINARY VALUE 1.
           05  SLP-SHORT       PICTURE 9(18) BINARY VALUE  20000000.
           05  SLP-LONG        PICTURE 9(18) BINARY VALUE 320000000.
           05  LCK-IDX         PICTURE 9(4) BINARY VALUE 1.
           05  REC-NUM         PICTURE 9(4) VALUE 0.
           05  REC-MAX         PICTURE 9(5) COMP VALUE 10.
           05  SUB             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD  VALUE 1 3 5 7 9 10 11.
      
           05  TSPFL-KEY       PICTURE X(8).
           05  WMI             PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           ACCEPT CMD-LINE FROM COMMAND-LINE.
           CALL "C$TOUPPER" USING CMD-LINE BY VALUE LENGTH OF CMD-LINE.
           MOVE SPACES TO REPORT-RECORD.
           EVALUATE CMD-LINE
           WHEN  SPACES
               MOVE "control.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Control" TO WMI
               PERFORM LOADFILE
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog PARENT &"
               CALL "SYSTEM" USING "./prog CHILD &"
               PERFORM LOCK-WAIT-READY
               MOVE "continue test " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE 2 TIMES
               MOVE "waiting step 1 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE 2 TIMES
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog LOCK &"
               CALL "SYSTEM" USING "./prog READADV &"
               PERFORM LOCK-WAIT-READY
               MOVE "waiting step 2 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog UPDT &"
               CALL "SYSTEM" USING "./prog CHILDUP &"
               PERFORM LOCK-WAIT-READY
               MOVE "waiting step 3 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE
           WHEN "PARENT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE " PARENT" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-NO-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHORT
               PERFORM LOCK-MARK-COMPLETE
           WHEN "CHILD"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "  CHILD" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE
               PERFORM LOCK-COMPLETE-AND-GO
               CALL "C$SLEEP" USING 1
               PERFORM READ-FILE-NO-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "UPDT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Upd" TO WMI
               PERFORM LOCK-READY-AND-GO
               CALL "C$SLEEP" USING 1
               PERFORM UPDT-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "CHILDUP"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Upd" TO WMI
               PERFORM LOCK-READY-AND-GO
               MOVE 2 TO SLP-TIME
               PERFORM UPDT-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "LOCK"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Lck" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE-ADV
               OPEN I-O SHARING ALL OTHER TSPFILE
               MOVE DATA-CUST-NUM (1) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               DELETE TSPFILE
               STRING "Deleted " CM-CUST-NUM "           Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE DATA-CUST-NUM (3) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               STRING "Read    " CM-CUST-NUM " Locked    Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE DATA-CUST-NUM (6) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               MOVE DATA-CUST-NUM (6) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               STRING "Read    " CM-CUST-NUM " Locked    Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 9
               READ TSPFILE 
               CLOSE TSPFILE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "READADV"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               PERFORM LOCK-READY-AND-GO
               MOVE "Cld Adv" TO WMI
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE-ADV
               MOVE "Cld Ign" TO WMI
               PERFORM READ-FILE-IGN
               PERFORM LOCK-MARK-COMPLETE
           WHEN OTHER
               DISPLAY "Bad cmd:" CMD-LINE
           END-EVALUATE.
           MOVE "ending " TO MSG
           PERFORM DISPLAY-IT
           CLOSE REPORTIT.
           STOP RUN.
      
       LOADFILE.

           MOVE "Loading test data file." TO MSG
           PERFORM DISPLAY-IT.
      
           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               STRING "Error " CUST-STAT " opening 'testisam' file"
                                INTO MSG
               PERFORM DISPLAY-IT
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE 10                           TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
      
           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               STRING "Key: " TSPFL-KEY ", Status: " CUST-STAT 
                                 INTO MSG
               PERFORM DISPLAY-IT.

       READ-FILE.
           OPEN INPUT TSPFILE.
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 2 TIMES
             PERFORM READ-NEXT
             CALL "C$SLEEP" USING 1
           END-PERFORM.
           CLOSE TSPFILE.

       READ-FILE-NO-SHARE.
           OPEN INPUT SHARING NO OTHER TSPFILE.
           STRING "OPEN NO SHARE              Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CALL "C$SLEEP" USING 2
           CLOSE TSPFILE.

       READ-FILE-RETRY-SHARE.
           OPEN INPUT SHARING NO OTHER RETRY 15 SECONDS TSPFILE.
           STRING "OPEN NO SHARE RETRY 15     Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CALL "C$SLEEP" USING 4
           CLOSE TSPFILE.

       READ-FILE-RETRY-SHORT.
           CALL "C$SLEEP" USING 1.
           OPEN INPUT SHARING NO OTHER RETRY 2 SECONDS TSPFILE.
           STRING "OPEN NO SHARE RETRY 2      Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CLOSE TSPFILE.

       UPDT-SHARE.
           OPEN I-O SHARING ALL OTHER TSPFILE.
           MOVE 3 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO CM-CUST-NUM
           READ TSPFILE WITH NO LOCK
           STRING "Read    " CM-CUST-NUM " no lock   Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD RETRY 25 SECONDS WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING SLP-TIME

           READ TSPFILE RETRY 2 SECONDS WITH LOCK 
           STRING "Read    " CM-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           IF CUST-STAT = "51"
               READ TSPFILE RETRY 15 SECONDS WITH LOCK
               STRING "Read    " CM-CUST-NUM " retry LCK Sts:"
                       CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
           ELSE
               CALL "C$SLEEP" USING 5
           END-IF
           READ TSPFILE WITH LOCK
           STRING "Re-Read " CM-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING SLP-TIME
           REWRITE TSPFL-RECORD WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ TSPFILE WITH LOCK
           STRING "Read    " CM-CUST-NUM "  and LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.

           MOVE 2 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO CM-CUST-NUM
           REWRITE TSPFL-RECORD RETRY 10 SECONDS WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " No read! "
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CLOSE TSPFILE.

       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT
           IF CUST-STAT NOT = "00"
             STRING "Read Next                  Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Next    " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-ADV.
           OPEN INPUT SHARING ALL OTHER TSPFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-ADV
           END-PERFORM.
           START TSPFILE LAST
           PERFORM 4 TIMES
             PERFORM READ-PREV-ADV
           END-PERFORM.
           CLOSE TSPFILE.

       READ-NEXT-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-PREV-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE PREVIOUS ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Prev adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Prevadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-IGN.
           OPEN INPUT SHARING ALL OTHER TSPFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 7 TIMES
             PERFORM READ-NEXT-IGN
           END-PERFORM.
           CLOSE TSPFILE.

       READ-NEXT-IGN.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT IGNORE LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next ign              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextign " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                     INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       LOCK-INIT.
           OPEN OUTPUT LOCKFILE.
           MOVE SPACES TO LCK-RECORD.
           MOVE ZERO TO LCK-NUM.
           MOVE "Lock control" TO LCK-MESSAGE.
           WRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-READY.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (1) = 'R'
                     AND LCK-TBL (2) = 'R'
               READ LOCKFILE
               IF LCK-TBL (1) NOT = 'R'
               OR LCK-TBL (2) NOT = 'R'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-SHORT
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'G'  TO LCK-TBL (1), LCK-TBL (2)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-COMPLETE.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (1) = 'C'
                     AND LCK-TBL (2) = 'C'
               READ LOCKFILE
               IF LCK-TBL (1) NOT = 'C'
               OR LCK-TBL (2) NOT = 'C'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-LONG
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'G'  TO LCK-TBL (1), LCK-TBL (2)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-FOR-GO.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (LCK-IDX) = 'G'
               READ LOCKFILE
               IF LCK-TBL (LCK-IDX) NOT = 'G'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-SHORT
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'X'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-MARK-READY.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'R'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-MARK-COMPLETE.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'C'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-COMPLETE-AND-GO.
           PERFORM LOCK-MARK-COMPLETE
           PERFORM LOCK-WAIT-FOR-GO.

       LOCK-READY-AND-GO.
           PERFORM LOCK-MARK-READY
           PERFORM LOCK-WAIT-FOR-GO.

       DISPLAY-IT.
           ADD 1 TO SEQ.
           IF MSG (1:1) = '*'
               ACCEPT WS-TIME-NOW FROM TIME
               STRING WMI " :" SEQ ": " 
                      WS-NOW-MM ":" WS-NOW-SS "." WS-NOW-HS " : "
                      MSG (2:) INTO REPORT-RECORD
           ELSE
               STRING WMI " :" SEQ ": " MSG INTO REPORT-RECORD
           END-IF.
           WRITE REPORT-RECORD.
           MOVE SPACES TO MSG.
           MOVE SPACES TO REPORT-RECORD.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([DB_HOME=. ./prog], [0], [], [])


AT_CAPTURE_FILE(./control.txt)

AT_DATA([reference], [Control  :01: Loading test data file.
Control  :02: continue test
Control  :03: waiting step 1 completion
Control  :04: waiting step 2 completion
Control  :05: waiting step 3 completion
Control  :06: ending
])

AT_CHECK([diff reference control.txt], [0], [], [])


AT_CAPTURE_FILE(./parent.txt)

AT_DATA([reference], [ PARENT  :01: READ Open                  Sts:00
 PARENT  :02: Next    ALP00000 Trms:0010
 PARENT  :03: Next    BET00000 Trms:0010
 PARENT  :04: OPEN NO SHARE              Sts:00
 PARENT  :05: Next    ALP00000 Trms:0010
 PARENT  :06: Next    BET00000 Trms:0010
 PARENT  :07: OPEN NO SHARE RETRY 15     Sts:00
 PARENT  :08: Next    ALP00000 Trms:0010
 PARENT  :09: Next    BET00000 Trms:0010
 PARENT  :10: OPEN NO SHARE RETRY 2      Sts:61
 PARENT  :11: Read Next                  Sts:47
 PARENT  :12: ending
Par Lck  :01: READ Open                  Sts:00
Par Lck  :02: Nextadv ALP00000 Trms:0010
Par Lck  :03: Nextadv BET00000 Trms:0010
Par Lck  :04: Nextadv CAM00000 Trms:0010
Par Lck  :05: Nextadv DEL00000 Trms:0010
Par Lck  :06: Prevadv HIJ00000 Trms:0010
Par Lck  :07: Prevadv GIB00000 Trms:0010
Par Lck  :08: Prevadv FOR00000 Trms:0010
Par Lck  :09: Prevadv EPS00000 Trms:0010
Par Lck  :10: Deleted ALP00000           Sts:00
Par Lck  :11: Read    CAM00000 Locked    Sts:00
Par Lck  :12: Read    FOR00000 Locked    Sts:00
Par Lck  :13: ending
Par Upd  :01: Read    CAM00000 no lock   Sts:00
Par Upd  :02: REWRITE CAM00000 Trms:0012 Sts:00
Par Upd  :03: Read    CAM00000 with LOCK Sts:00
Par Upd  :04: Re-Read CAM00000 with LOCK Sts:00
Par Upd  :05: REWRITE CAM00000 Trms:0012 Sts:00
Par Upd  :06: Read    CAM00000  and LOCK Sts:00
Par Upd  :07: REWRITE BET00000 No read!  Sts:00
Par Upd  :08: ending
])

AT_CHECK([diff reference parent.txt], [0], [], [])


AT_CAPTURE_FILE(./child.txt)

AT_DATA([reference], [  CHILD  :01: READ Open                  Sts:00
  CHILD  :02: Next    ALP00000 Trms:0010
  CHILD  :03: Next    BET00000 Trms:0010
  CHILD  :04: OPEN NO SHARE              Sts:61
  CHILD  :05: Read Next                  Sts:47
  CHILD  :06: OPEN NO SHARE RETRY 15     Sts:00
  CHILD  :07: Next    ALP00000 Trms:0010
  CHILD  :08: Next    BET00000 Trms:0010
  CHILD  :09: OPEN NO SHARE RETRY 15     Sts:00
  CHILD  :10: Next    ALP00000 Trms:0010
  CHILD  :11: Next    BET00000 Trms:0010
  CHILD  :12: ending
Cld Adv  :01: READ Open                  Sts:00
Cld Adv  :02: Nextadv BET00000 Trms:0010
Cld Adv  :03: Nextadv DEL00000 Trms:0010
Cld Adv  :04: Nextadv EPS00000 Trms:0010
Cld Adv  :05: Nextadv GIB00000 Trms:0010
Cld Adv  :06: Prevadv HIJ00000 Trms:0010
Cld Adv  :07: Prevadv GIB00000 Trms:0010
Cld Adv  :08: Prevadv EPS00000 Trms:0010
Cld Adv  :09: Prevadv DEL00000 Trms:0010
Cld Ign  :10: READ Open                  Sts:00
Cld Ign  :11: Nextign BET00000 Trms:0010
Cld Ign  :12: Nextign CAM00000 Trms:0010
Cld Ign  :13: Nextign DEL00000 Trms:0010
Cld Ign  :14: Nextign EPS00000 Trms:0010
Cld Ign  :15: Nextign FOR00000 Trms:0010
Cld Ign  :16: Nextign GIB00000 Trms:0010
Cld Ign  :17: Nextign HIJ00000 Trms:0010
Cld Ign  :18: ending
Cld Upd  :01: Read    CAM00000 no lock   Sts:00
Cld Upd  :02: REWRITE CAM00000 Trms:0011 Sts:00
Cld Upd  :03: Read    CAM00000 with LOCK Sts:51
Cld Upd  :04: Read    CAM00000 retry LCK Sts:00
Cld Upd  :05: Re-Read CAM00000 with LOCK Sts:00
Cld Upd  :06: REWRITE CAM00000 Trms:0012 Sts:00
Cld Upd  :07: Read    CAM00000  and LOCK Sts:00
Cld Upd  :08: REWRITE BET00000 No read!  Sts:00
Cld Upd  :09: ending
])

AT_CHECK([diff reference child.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([RELATIVE File Locking])
AT_KEYWORDS([FileIo])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT LOCKFILE ASSIGN EXTERNAL RELLCK
           ORGANIZATION RELATIVE
           SHARING READ ONLY
           ACCESS IS RANDOM RELATIVE KEY IS LCK-REC
           FILE STATUS IS CUST-STAT.

           SELECT OPTIONAL REPORTIT ASSIGN TO REPORT-FILE 
           ORGANIZATION LINE SEQUENTIAL.

       DATA  DIVISION.
       FILE SECTION.
       FD  REPORTIT
           BLOCK CONTAINS 5 RECORDS.
      
       01  REPORT-RECORD   PIC X(80).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4). 
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE S9(4). 

       FD  LOCKFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  LCK-RECORD.
           10  LCK-NUM                         PICTURE 9(3). 
           10  LCK-TBL                         PICTURE X OCCURS 4 TIMES. 
           10  LCK-MESSAGE                     PICTURE X(25). 

       WORKING-STORAGE SECTION.
      
       77  MAX-SUB                     PICTURE 9(4) VALUE 6.
       77  CUST-STAT                   PICTURE X(2).
       77  REC-NUM                     PICTURE 9(4) VALUE 1.
       77  LCK-REC                     PICTURE 9(4) VALUE 1.
       77  SLP-TIME                    PICTURE 9(9) BINARY VALUE 1.
       77  REPORT-FILE                 PICTURE X(32) VALUE "parent.txt".
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
       01  CMD-LINE     PIC X(64).
       01  WMI          PIC X(7).
       01  SEQ          PIC 9(2) VALUE 0.
       01  MSG          PIC X(64) VALUE " ".
      
       PROCEDURE DIVISION.

           ACCEPT CMD-LINE FROM COMMAND-LINE.
           CALL "C$TOUPPER" USING CMD-LINE BY VALUE LENGTH OF CMD-LINE.
           MOVE SPACES TO REPORT-RECORD.
           EVALUATE CMD-LINE
           WHEN  SPACES
               MOVE "control.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Control" TO WMI
               PERFORM LOADFILE
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  PARENT &"
               CALL "SYSTEM" USING "./prog  CHILD &"
               CALL "C$SLEEP" USING 2
               MOVE "continue test " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 1 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 1
               CALL "SYSTEM" USING "./prog  LOCK &"
               CALL "SYSTEM" USING "./prog  READADV &"
               CALL "C$SLEEP" USING 6
               MOVE "waiting step 2 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  UPDT &"
               CALL "SYSTEM" USING "./prog  CHILDUP &"
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 3 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
           WHEN "PARENT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE " PARENT" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 1
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 4
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-RETRY-SHORT
               PERFORM LOCK-RELEASE
           WHEN "CHILD"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "  CHILD" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 4
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
           WHEN "UPDT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Upd" TO WMI
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "CHILDUP"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Upd" TO WMI
               MOVE 1 TO SLP-TIME
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "LOCK"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Lck" TO WMI
               PERFORM READ-FILE-ADV
               OPEN I-O SHARING ALL OTHER FLATFILE2
               MOVE 1 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               DELETE FLATFILE2
               STRING "Deleted " C2-CUST-NUM "        1  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE 3 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               STRING "Read    " C2-CUST-NUM " Locked 3  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 4
               CLOSE FLATFILE2
           WHEN "READADV"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Adv" TO WMI
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE-ADV
               MOVE "Cld Ign" TO WMI
               PERFORM READ-FILE-IGN
           END-EVALUATE.
           MOVE "ending " TO MSG
           PERFORM DISPLAY-IT
           CLOSE REPORTIT.
           STOP RUN.

       READ-FILE.
           OPEN INPUT FLATFILE.
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 2 TIMES
             PERFORM READ-NEXT
             CALL "C$SLEEP" USING 1
           END-PERFORM.
           CLOSE FLATFILE.

       READ-FILE-NO-SHARE.
           OPEN INPUT SHARING NO OTHER FLATFILE.
           STRING "NO SHARE Open              Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHARE.
           OPEN INPUT SHARING NO OTHER RETRY 10 SECONDS FLATFILE.
           STRING "RETRY SHARE Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CALL "C$SLEEP" USING 2
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CALL "C$SLEEP" USING 2
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 2
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHORT.
           OPEN INPUT SHARING NO OTHER RETRY 2 SECONDS FLATFILE.
           STRING "RETRY SHORT Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       UPDT-SHARE.
           OPEN I-O SHARING ALL OTHER FLATFILE2.
           MOVE 3 TO REC-NUM.
           CALL "C$SLEEP" USING SLP-TIME
           READ FLATFILE2
           STRING "Read    " C2-CUST-NUM " no lock   Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD WITH NO LOCK
      *    REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING 2
           READ FLATFILE2 WITH LOCK
           STRING "Re-Read " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM "  and LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.

           MOVE 2 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO C2-CUST-NUM
           MOVE WMI   TO C2-CUST-NUM (3:6)
           REWRITE TSP2-RECORD RETRY 10 SECONDS WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " No read! "
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CLOSE FLATFILE2.
      
       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT
           IF CUST-STAT NOT = "00"
             STRING "Read Next                  Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Next    " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-ADV.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-ADV
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-IGN.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-IGN
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-IGN.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT IGNORE LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next ign              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextign " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       DISPLAY-IT.
           ADD 1 TO SEQ.
           STRING WMI " :" SEQ ": " MSG INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO MSG.
           MOVE SPACES TO REPORT-RECORD.

       LOCK-EXCLUSIVE.
           OPEN I-O SHARING NO OTHER RETRY FOREVER LOCKFILE.

       LOCK-SHARED.
           OPEN INPUT SHARING READ ONLY RETRY FOREVER LOCKFILE.

       LOCK-RELEASE.
           CLOSE LOCKFILE.

       LOADFILE.
           STRING WMI " .  . Loading sample program data file"
                            INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO REPORT-RECORD.
      
           OPEN OUTPUT LOCKFILE.
           MOVE SPACES TO LCK-RECORD.
           MOVE ZERO TO LCK-NUM.
           MOVE "Lock control" TO LCK-MESSAGE.
           WRITE FILE LOCKFILE FROM LCK-RECORD
      *    WRITE LCK-RECORD.
           CLOSE LOCKFILE.

           OPEN OUTPUT FLATFILE.
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           CLOSE FLATFILE.
      
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE 10                           TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([cobc -x -std=mf -w -fmf-files prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [], [])


AT_CAPTURE_FILE(./control.txt)

AT_DATA([reference], [Control .  . Loading sample program data file
Control :01: continue test
Control :02: waiting step 1 completion
Control :03: waiting step 2 completion
Control :04: waiting step 3 completion
Control :05: ending
])

AT_CHECK([diff reference control.txt], [0], [], [])


AT_CAPTURE_FILE(./parent.txt)

AT_DATA([reference], [ PARENT :01: READ Open                  Sts:00
 PARENT :02: Next    ALP00000 Trms:0010 #0001
 PARENT :03: Next    BET00000 Trms:0010 #0002
 PARENT :04: NO SHARE Open              Sts:00
 PARENT :05: Next    ALP00000 Trms:0010 #0001
 PARENT :06: Next    BET00000 Trms:0010 #0002
 PARENT :07: RETRY SHARE Open           Sts:00
 PARENT :08: Next    ALP00000 Trms:0010 #0001
 PARENT :09: Next    BET00000 Trms:0010 #0002
 PARENT :10: RETRY SHORT Open           Sts:61
 PARENT :11: Read Next                  Sts:47
 PARENT :12: ending
Par Lck :01: READ Open                  Sts:00
Par Lck :02: Nextadv ALP00000 Trms:0010 #0001
Par Lck :03: Nextadv BET00000 Trms:0010 #0002
Par Lck :04: Nextadv DEL00000 Trms:0010 #0003
Par Lck :05: Nextadv EPS00000 Trms:0010 #0004
Par Lck :06: Deleted ALP00000        1  Sts:00
Par Lck :07: Read    DEL00000 Locked 3  Sts:00
Par Lck :08: ending
Par Upd :01: Read    DEL00000 no lock   Sts:00
Par Upd :02: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :03: Read    DEL00000 with LOCK Sts:00
Par Upd :04: Re-Read DEL00000 with LOCK Sts:00
Par Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :06: Read    DEL00000  and LOCK Sts:00
Par Upd :07: REWRITE BEPar Up No read!  Sts:00
Par Upd :08: ending
])

AT_CHECK([diff reference parent.txt], [0], [], [])


AT_CAPTURE_FILE(./child.txt)

AT_DATA([reference], [  CHILD :01: READ Open                  Sts:00
  CHILD :02: Next    ALP00000 Trms:0010 #0001
  CHILD :03: Next    BET00000 Trms:0010 #0002
  CHILD :04: NO SHARE Open              Sts:61
  CHILD :05: Read Next                  Sts:47
  CHILD :06: RETRY SHARE Open           Sts:00
  CHILD :07: Next    ALP00000 Trms:0010 #0001
  CHILD :08: Next    BET00000 Trms:0010 #0002
  CHILD :09: RETRY SHARE Open           Sts:00
  CHILD :10: Next    ALP00000 Trms:0010 #0001
  CHILD :11: Next    BET00000 Trms:0010 #0002
  CHILD :12: ending
Cld Adv :01: READ Open                  Sts:00
Cld Adv :02: Nextadv BET00000 Trms:0010 #0002
Cld Adv :03: Nextadv EPS00000 Trms:0010 #0004
Cld Adv :04: Nextadv FOR00000 Trms:0010 #0005
Cld Adv :05: Nextadv GAM00000 Trms:0010 #0006
Cld Ign :06: READ Open                  Sts:00
Cld Ign :07: Nextign BET00000 Trms:0010 #0002
Cld Ign :08: Nextign DEL00000 Trms:0010 #0003
Cld Ign :09: Nextign EPS00000 Trms:0010 #0004
Cld Ign :10: Nextign FOR00000 Trms:0010 #0005
Cld Ign :11: ending
Cld Upd :01: Read    DEL00000 no lock   Sts:00
Cld Upd :02: REWRITE DEL00000 Trms:0012 Sts:51
Cld Upd :03: Read    DEL00000 with LOCK Sts:51
Cld Upd :04: Re-Read DEL00000 with LOCK Sts:00
Cld Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Cld Upd :06: Read    DEL00000  and LOCK Sts:00
Cld Upd :07: REWRITE BECld Up No read!  Sts:00
Cld Upd :08: ending
])

AT_CHECK([diff reference child.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([Read on optional missing file])
AT_KEYWORDS([FILEIO])

AT_DATA([prog.cob], [       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL INFILE  ASSIGN TO
                "missing.txt"
                ORGANIZATION IS RELATIVE
                ACCESS IS SEQUENTIAL
                FILE STATUS IS WSFS.
       DATA DIVISION.
       FILE SECTION.
       FD  INFILE.
       01  INREC             PIC X(80).
       WORKING-STORAGE SECTION.
       01  WSFS           PIC X(2).
           88  RECORDFOUND VALUE "00".
       01  WSINREC         PIC X(80).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
      *    Open missing file
           OPEN INPUT INFILE
      *    First read, raise a FS 10 (AT END) which is expected
           READ INFILE INTO WSINREC
           END-READ
	   IF WSFS = '10'
             DISPLAY "1st Read on missing optional file = " WSFS " OK"
	   ELSE
             DISPLAY "1st Read on missing optional file = " WSFS " Bad"
	   END-IF.

      *    Second read, should raise a FS 46 (READ AFTER AT END)
      *    but a FS 23 is raised instead.
           READ INFILE INTO WSINREC
           END-READ

	   IF WSFS = '46'
             DISPLAY "2nd Read on missing optional file = " WSFS " OK"
	   ELSE
             DISPLAY "2nd Read on missing optional file = " WSFS " Bad"
	   END-IF.

           CLOSE INFILE
           STOP RUN.
])

AT_CHECK([cobc -x -std=mf -debug -Wall prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [1st Read on missing optional file = 10 OK
2nd Read on missing optional file = 46 OK
], [])

AT_CLEANUP

