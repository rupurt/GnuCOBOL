## Copyright (C) 2003-2012, 2014-2020 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Ron Norman,
## Brian Tiffin, Joe Robbins, Edward Hart
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <https://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


AT_SETUP([READ INTO data item AT-END sequence])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "./TEST-FILE".
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC     PIC X(10).
       WORKING-STORAGE  SECTION.
       01  X            PIC X(10).
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  INPUT  TEST-FILE.
           READ  TEST-FILE INTO X
               AT END MOVE ALL ZERO TO X
           END-READ.
           CLOSE TEST-FILE.
           IF X NOT = "0000000000"
              DISPLAY "Expected zeros - Got " X
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LINAGE and LINAGE-COUNTER sample])
AT_KEYWORDS([runfile optional file status READ WRITE END-OF-PAGE LINE SEQUENTIAL COB_CURRENT_DATE])

# modified version of GC-FAQ: Example of LINAGE File Descriptor
# Author: Brian Tiffin, Date:   10-July-2008

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           select optional data-file assign to 'prog.cob'
               organization is line sequential
               file status is data-file-status.
           select mini-report assign to "mini-report".

       DATA DIVISION.
       FILE SECTION.
       FD  data-file.
       01  data-record.
           88 endofdata        value high-values.
           02 data-line        pic x(80).
       FD  mini-report
           linage is 16 lines
               with footing at 15
               lines at top 2
               lines at bottom 2.
       01  report-line         pic x(80).

       WORKING-STORAGE SECTION.
       01  command-arguments   pic x(1024).
       01  file-name           pic x(160).
       01  data-file-status    pic xx.
       01  lc                  pic 99.
       01  report-line-blank.
           02 filler           pic x(18) value all "*".
           02 filler           pic x(05) value spaces.
           02 filler           pic x(34)
               VALUE "THIS PAGE INTENTIONALLY LEFT BLANK".
           02 filler           pic x(05) value spaces.
           02 filler           pic x(18) value all "*".
       01  report-line-data.
           02 body-tag         pic 9(6).
           02 line-3           pic x(74).
       01  report-line-header.
           02 filler           pic x(6) VALUE "PAGE: ".
           02 page-no          pic 9999.
           02 filler           pic x(24).
           02 filler           pic x(5) VALUE " LC: ".
           02 header-tag       pic 9(6).
           02 filler           pic x(23).
           02 filler           pic x(6) VALUE "DATE: ".
           02 page-date        pic x(6).

       01  page-count          pic 9999.

       PROCEDURE DIVISION.

       open input data-file.
       read data-file
           at end
               display "File open error: " data-file-status
               stop run
       end-read.

       open output mini-report.

       write report-line
           from report-line-blank
       end-write.

       move 1 to page-count.
       accept page-date from date end-accept.
       move page-count to page-no.
       write report-line
           from report-line-header
           after advancing page
       end-write.

       perform readwrite-loop until endofdata.

       display
           "Normal termination, ending status: "
           data-file-status
       close mini-report.

       close data-file.
       stop run.

      ****************************************************************
       readwrite-loop.
       move data-record to report-line-data
       move linage-counter to body-tag
       write report-line from report-line-data
           end-of-page
               add 1 to page-count end-add
               move page-count to page-no
               move linage-counter to header-tag
               write report-line from report-line-header
                   after advancing page
               end-write
       end-write
       read data-file
           at end set endofdata to true
       end-read
       .
])

AT_CAPTURE_FILE([mini-report])
AT_DATA([reference-report], [

******************     THIS PAGE INTENTIONALLY LEFT BLANK     ******************


















PAGE: 0001                         LC: 000000                       DATE: 150206
000001
000002 IDENTIFICATION DIVISION.
000003 PROGRAM-ID. prog.
000004 ENVIRONMENT DIVISION.
000005 INPUT-OUTPUT SECTION.
000006 FILE-CONTROL.
000007     select optional data-file assign to 'prog.cob'
000008         organization is line sequential
000009         file status is data-file-status.
000010     select mini-report assign to "mini-report".
000011
000012 DATA DIVISION.
000013 FILE SECTION.
000014 FD  data-file.





PAGE: 0002                         LC: 000015                       DATE: 150206
000001 01  data-record.
000002     88 endofdata        value high-values.
000003     02 data-line        pic x(80).
000004 FD  mini-report
000005     linage is 16 lines
000006         with footing at 15
000007         lines at top 2
000008         lines at bottom 2.
000009 01  report-line         pic x(80).
000010
000011 WORKING-STORAGE SECTION.
000012 01  command-arguments   pic x(1024).
000013 01  file-name           pic x(160).
000014 01  data-file-status    pic xx.





PAGE: 0003                         LC: 000015                       DATE: 150206
000001 01  lc                  pic 99.
000002 01  report-line-blank.
000003     02 filler           pic x(18) value all "*".
000004     02 filler           pic x(05) value spaces.
000005     02 filler           pic x(34)
000006         VALUE "THIS PAGE INTENTIONALLY LEFT BLANK".
000007     02 filler           pic x(05) value spaces.
000008     02 filler           pic x(18) value all "*".
000009 01  report-line-data.
000010     02 body-tag         pic 9(6).
000011     02 line-3           pic x(74).
000012 01  report-line-header.
000013     02 filler           pic x(6) VALUE "PAGE: ".
000014     02 page-no          pic 9999.





PAGE: 0004                         LC: 000015                       DATE: 150206
000001     02 filler           pic x(24).
000002     02 filler           pic x(5) VALUE " LC: ".
000003     02 header-tag       pic 9(6).
000004     02 filler           pic x(23).
000005     02 filler           pic x(6) VALUE "DATE: ".
000006     02 page-date        pic x(6).
000007
000008 01  page-count          pic 9999.
000009
000010 PROCEDURE DIVISION.
000011
000012 open input data-file.
000013 read data-file
000014     at end





PAGE: 0005                         LC: 000015                       DATE: 150206
000001         display "File open error: " data-file-status
000002         stop run
000003 end-read.
000004
000005 open output mini-report.
000006
000007 write report-line
000008     from report-line-blank
000009 end-write.
000010
000011 move 1 to page-count.
000012 accept page-date from date end-accept.
000013 move page-count to page-no.
000014 write report-line





PAGE: 0006                         LC: 000015                       DATE: 150206
000001     from report-line-header
000002     after advancing page
000003 end-write.
000004
000005 perform readwrite-loop until endofdata.
000006
000007 display
000008     "Normal termination, ending status: "
000009     data-file-status
000010 close mini-report.
000011
000012 close data-file.
000013 stop run.
000014





PAGE: 0007                         LC: 000015                       DATE: 150206
000001****************************************************************
000002 readwrite-loop.
000003 move data-record to report-line-data
000004 move linage-counter to body-tag
000005 write report-line from report-line-data
000006     end-of-page
000007         add 1 to page-count end-add
000008         move page-count to page-no
000009         move linage-counter to header-tag
000010         write report-line from report-line-header
000011             after advancing page
000012         end-write
000013 end-write
000014 read data-file





PAGE: 0008                         LC: 000015                       DATE: 150206
000001     at end set endofdata to true
000002 end-read
000003 .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_CURRENT_DATE="2015/02/06 16:40:52" $COBCRUN_DIRECT ./prog], [0],
[Normal termination, ending status: 10
], [])
AT_CHECK([diff mini-report reference-report], [0], [], [])

AT_CLEANUP


AT_SETUP([OUTPUT on INDEXED file to missing directory])
AT_KEYWORDS([runfile OPEN ASSIGN])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT  FILE0 ASSIGN  TO "./nosubhere/MYFILE0"
                   ORGANIZATION  IS INDEXED
                   RECORD KEY    IS F0REC
                   FILE STATUS   IS WSFS.
       DATA DIVISION.
       FILE SECTION.
       FD  FILE0.
       01  F0REC             PIC X(80).
       WORKING-STORAGE SECTION.
       01  WSFS              PIC X(2).
       PROCEDURE DIVISION.
      *
           OPEN OUTPUT FILE0
           DISPLAY "STATUS OPENO " WSFS
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[STATUS OPENO 35
], [])

AT_CHECK([echo Test > ./nosubhere], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[STATUS OPENO 30
], [])

AT_CLEANUP


AT_SETUP([First READ on empty SEQUENTIAL INDEXED file])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS  INDEXED
                        ACCESS MODE  IS  SEQUENTIAL
                        RECORD KEY   IS  TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-KEY      PIC X(10).
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  INPUT  TEST-FILE.
           READ  TEST-FILE
                 AT END
                   CONTINUE
                 NOT AT END
                   DISPLAY "NOT OK"
                   END-DISPLAY
           END-READ.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([READ NEXT without previous START])
AT_KEYWORDS([runfile WRITE indexed])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS  INDEXED
                        ACCESS MODE  IS  SEQUENTIAL
                        RECORD KEY   IS  TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC.
          05 TEST-KEY      PIC X(10).
          05 TEST-DATA     PIC X.
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE
           MOVE  '1'    TO TEST-KEY
           MOVE  'A'    TO TEST-DATA
           WRITE TEST-REC
           MOVE  '3'    TO TEST-KEY
           MOVE  'B'    TO TEST-DATA
           WRITE TEST-REC
           CLOSE TEST-FILE
           OPEN  INPUT  TEST-FILE
           READ  TEST-FILE NEXT
                 AT END
                   DISPLAY "AT END FOR REC1"
                   END-DISPLAY
                   CLOSE TEST-FILE
                   STOP RUN
                 NOT AT END
                   CONTINUE
           END-READ
           IF TEST-DATA NOT = 'A'
              DISPLAY "WRONG REC1: '" TEST-REC "'"
              END-DISPLAY
           END-IF
           READ  TEST-FILE NEXT
                 AT END
                   DISPLAY "AT END FOR REC2"
                   END-DISPLAY
                   CLOSE TEST-FILE
                   STOP RUN
                 NOT AT END
                   CONTINUE
           END-READ.
           IF TEST-DATA NOT = 'B'
              DISPLAY "WRONG REC2: '" TEST-REC "'"
              END-DISPLAY
           END-IF
           READ  TEST-FILE NEXT
                 AT END
                   CONTINUE
                 NOT AT END
                   DISPLAY "NOT AT END AFTER REC2"
                   END-DISPLAY
           END-READ
           IF TEST-DATA NOT = 'B'
              DISPLAY "DATE CHANGED ON EOF: '" TEST-REC "'"
              END-DISPLAY
           END-IF
           CLOSE TEST-FILE
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([REWRITE a RELATIVE file with RANDOM access])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS RELATIVE
                        ACCESS MODE  IS RANDOM
                        RELATIVE KEY IS TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X.
       WORKING-STORAGE  SECTION.
       01 TEST-KEY      PIC 9.
       PROCEDURE        DIVISION.
      *
           OPEN OUTPUT TEST-FILE.
           MOVE 1 TO TEST-KEY.
           MOVE "A" TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           MOVE 2 TO TEST-KEY.
           MOVE "B" TO TEST-REC.
           WRITE TEST-REC
           END-WRITE.
           CLOSE TEST-FILE.
      *
           OPEN I-O TEST-FILE.
           MOVE 1 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           MOVE 2 TO TEST-KEY.
           MOVE "C" TO TEST-REC.
           REWRITE TEST-REC
           END-REWRITE.
           CLOSE TEST-FILE.
      *
           OPEN INPUT TEST-FILE.
           MOVE 1 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           IF TEST-REC NOT = "A"
              DISPLAY "Expected 'A' - Got " TEST-REC
              END-DISPLAY
           END-IF.
           MOVE 2 TO TEST-KEY.
           READ TEST-FILE
           END-READ.
           IF TEST-REC NOT = "C"
              DISPLAY "Expected 'C' - Got " TEST-REC
              END-DISPLAY
           END-IF.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([File SORT, SEQUENTIAL])
AT_KEYWORDS([runfile using giving])

# Note: We shouldn't use AT_DATA to create sequential record
# data, because AT_DATA needs a \n at the end

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt".
       SELECT SORT-OUT  ASSIGN "result.txt".
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(6).
       FD SORT-OUT.
       01 OUT-REC       PIC X(6).
       SD SORT-WRK.
       01 WRK-REC       PIC X(6).
       PROCEDURE        DIVISION.

      * Special case: write test data in COBOL, see note above
           OPEN OUTPUT SORT-IN.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "world " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "hello " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           CLOSE SORT-IN.

           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([cat result.txt], [0], [                              hello world ], [])

AT_CLEANUP


AT_SETUP([File SORT, SEQUENTIAL variable records])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ORGANIZATION SEQUENTIAL
                    ASSIGN "./file1".
       SELECT file2 ORGANIZATION SEQUENTIAL
                    ASSIGN "./file2".
       SELECT file3 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file1-rec pic x(12).
       FD file2 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file2-rec pic x(12).
       SD file3 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file3-rec.
          2  file3-key1 pic x.
          2  file3-key2 pic 9.
          2  filler pic x(10).
       WORKING-STORAGE SECTION.
       77 rsz pic 99.
       1  1-data.
          2  filler pic x(14) VALUE "03A4X".
          2  filler pic x(14) VALUE "04A3XX".
          2  filler pic x(14) VALUE "05A2XXX".
          2  filler pic x(14) VALUE "06A1XXXX".
          2  filler pic x(14) VALUE "07A0XXXXX".
          2  filler pic x(14) VALUE "08B2XXXXXX".
          2  filler pic x(14) VALUE "09B1XXXXXXX".
          2  filler pic x(14) VALUE "10C2XXXXXXXX".
          2  filler pic x(14) VALUE "11C1XXXXXXXXX".
          2  filler pic x(14) VALUE "12Z9XXXXXXXXXX".
      *
       1  filler redefines 1-data.
          2  filler occurs 10 times indexed by ix-1.
           3 1-rsz pic 99.
           3 1-rec pic x(12).

       PROCEDURE DIVISION.
          OPEN OUTPUT file1.
          PERFORM VARYING ix-1 FROM 1 BY 2 UNTIL ix-1 > 10
             MOVE 1-rsz(ix-1) TO rsz
             MOVE 1-rec(ix-1) TO file1-rec
             WRITE file1-rec
          END-PERFORM.
          PERFORM VARYING ix-1 FROM 2 BY 2 UNTIL ix-1 > 10
             MOVE 1-rsz(ix-1) TO rsz
             MOVE 1-rec(ix-1) TO file1-rec
             WRITE file1-rec
          END-PERFORM.
          CLOSE file1.
          SORT file3 ON ASCENDING file3-key1
                        DESCENDING file3-key2
             USING file1
             GIVING file2.
          OPEN INPUT file2.
          PERFORM VARYING ix-1 FROM 1 BY 1 UNTIL ix-1 > 10
             READ file2
      *>> fileio-sort currently returns constant length records
             MOVE 1-rsz(ix-1) TO rsz
      *>> END-OF-DETOUR
             IF (1-rsz(ix-1) <> rsz) or
                (1-rec(ix-1) <> file2-rec)
                DISPLAY "FAILED"
             END-IF
          END-PERFORM.
          CLOSE file2.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([INDEXED File KEYCHECK])
AT_KEYWORDS([runfile SUPPRESS WHEN])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM, CM-COMPANY

           ALTERNATE RECORD KEY IS SPLIT-KEY2
           SOURCE IS CM-TELEPHONE,CM-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

           SELECT TSTFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TST-KEY
           SOURCE IS TS-CUST-NUM, TS-COMPANY

           ALTERNATE RECORD KEY IS TST-KEY2
           SOURCE IS TS-TELEPHONE,TS-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS TST-KEY3
           SOURCE IS TS-DISK,TS-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"

           FILE STATUS IS CUST-STAT
           .

           SELECT BADFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS BAD-KEY
           SOURCE IS BD-CUST-NUM, BD-COMPANY

           ALTERNATE RECORD KEY IS BAD-KEY2
           SOURCE IS BD-DISK,BD-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3). 
             15  CM-CUST-NNN                   PICTURE X(5). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-TAPE                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(5). 
       
       FD  BADFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  BAD-RECORD.
           05  BAD-REC. 
           10  BD-CUST-NUM                     PICTURE X(8). 
           10  BD-STATUS                       PICTURE X. 
           10  BD-COMPANY                      PICTURE X(25). 
           10  BD-ADDRESS-1                    PICTURE X(25). 
           10  BD-ADDRESS-2                    PICTURE X(25). 
           10  BD-ADDRESS-3                    PICTURE X(25). 
           10  BD-TELEPHONE                    PICTURE 9(10). 
           10  BD-DP-MGR                       PICTURE X(25). 
           10  BD-MACHINE                      PICTURE X(8). 
           10  BD-MEMORY                       PICTURE X(4). 
           10  BD-DISK                         PICTURE X(8). 
           10  BD-TAPE                         PICTURE X(8). 
           10  BD-NO-TERMINALS                 PICTURE 9(5). 
           10  BD-XTRA                         PICTURE 9(5). 
       
       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSTFL-RECORD.
           05  TSTFL-REC. 
           10  TS-CUST-NUM                     PICTURE X(8). 
           10  TS-STATUS                       PICTURE X. 
           10  TS-COMPANY                      PICTURE X(25). 
           10  TS-ADDRESS-1                    PICTURE X(25). 
           10  TS-ADDRESS-2                    PICTURE X(25). 
           10  TS-ADDRESS-3                    PICTURE X(25). 
           10  TS-TELEPHONE                    PICTURE 9(10). 
           10  TS-DP-MGR                       PICTURE X(25). 
           10  TS-MACHINE                      PICTURE X(8). 
           10  TS-MEMORY                       PICTURE X(4). 
           10  TS-DISK                         PICTURE X(8). 
           10  TS-TAPE                         PICTURE X(8). 
       
      
       WORKING-STORAGE SECTION.
      
       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
       77  DO-REWRITE   PICTURE X VALUE 'N'.
       77  ENVVAR-IN    PICTURE X(30).
       77  ENVVAR-OUT   PICTURE X(60).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
      
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
      
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
      
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
      
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
      
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
               88  NULL-KEY                    VALUE 4 5 8 12 14.
      
           05  TSPFL-KEY                       PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           PERFORM LOADFILE.
           PERFORM LOADFILE.
           PERFORM REWRFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "A: Expected ERROR " CUST-STAT 
                       " opening TSTFILE, Record size different" 
                       UPON CONSOLE
           ELSE
               DISPLAY "A: Un-Expected open "
                       "TSTFILE, Record size different" UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           OPEN INPUT BADFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "B: Expected ERROR " CUST-STAT 
                       " opening BADFILE, Index mismatch" UPON CONSOLE
           ELSE
               DISPLAY "B: Un-Expected open BADFILE, Index mismatch" 
                       UPON CONSOLE
               CLOSE BADFILE
           END-IF.

           DISPLAY "IX_OPTIONS"  UPON ENVIRONMENT-NAME.
           ACCEPT ENVVAR-IN       FROM ENVIRONMENT-VALUE.
           IF ENVVAR-IN NOT = SPACES
             STRING ENVVAR-IN DELIMITED BY SPACE 
                    ",keycheck=off" INTO ENVVAR-OUT
             DISPLAY "IX_OPTIONS"  UPON ENVIRONMENT-NAME
             DISPLAY ENVVAR-OUT     UPON ENVIRONMENT-VALUE
      *      DISPLAY "IX_OPTIONS = '" ENVVAR-OUT "'" UPON CONSOLE
           ELSE
             DISPLAY "IX_OPTIONS"  UPON ENVIRONMENT-NAME
             DISPLAY "keycheck=off" UPON ENVIRONMENT-VALUE
           END-IF
           DISPLAY "IO_TESTISAM"  UPON ENVIRONMENT-NAME.
           ACCEPT ENVVAR-IN       FROM ENVIRONMENT-VALUE.
           IF ENVVAR-IN NOT = SPACES
             STRING ENVVAR-IN DELIMITED BY SPACE 
                    ",keycheck=off" INTO ENVVAR-OUT
             DISPLAY "IO_TESTISAM"  UPON ENVIRONMENT-NAME
             DISPLAY ENVVAR-OUT     UPON ENVIRONMENT-VALUE
             DISPLAY "IO_TESTISAM = '" ENVVAR-OUT "'" UPON CONSOLE
           END-IF
           OPEN INPUT BADFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "C: Un-Expected ERROR " CUST-STAT 
                       " opening BADFILE, Index mismatch" 
                       UPON CONSOLE
           ELSE
               DISPLAY "C: Expected open BADFILE, with Index mismatch" 
                       UPON CONSOLE
               MOVE SPACES                       TO BAD-RECORD
               START BADFILE KEY GREATER THAN BAD-KEY2
               READ  BADFILE NEXT RECORD WITH NO LOCK
               DISPLAY "Key: " BD-CUST-NUM " is " BD-DISK " : " BD-TAPE
               READ  BADFILE NEXT RECORD WITH NO LOCK
               DISPLAY "Key: " BD-CUST-NUM " is " BD-DISK " : " BD-TAPE
               READ  BADFILE NEXT RECORD WITH NO LOCK
               DISPLAY "Key: " BD-CUST-NUM " is " BD-DISK " : " BD-TAPE
               CLOSE BADFILE
           END-IF.
           STOP RUN.
      
       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT TSPFILE
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "05"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
       REWRFILE.
           DELETE FILE TSPFILE.
           DISPLAY "Rewrite sample data file: " CUST-STAT
                            UPON CONSOLE.
      
           OPEN I-O TSPFILE
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "05"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           MOVE 'N' TO DO-REWRITE.
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
           MOVE 'Y' TO DO-REWRITE.
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 2 
                          UNTIL SUB > MAX-SUB.
           MOVE 'N' TO DO-REWRITE.
      
           DISPLAY "Sample data file rewrite complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           IF DO-REWRITE = 'Y'
               READ  TSPFILE WITH LOCK
               MOVE DATA-CUST-NUM  (SUB)     TO CM-CUST-NUM
               MOVE CM-CUST-NUM              TO TSPFL-KEY
           END-IF
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
           IF  NULL-KEY
               MOVE ALL "*"                  TO CM-DISK
               MOVE ALL "*"                  TO CM-TAPE.
           IF  SUB = 1 OR 6
               MOVE "2417"                   TO CM-DISK 
               MOVE "549  mmm"               TO CM-TAPE.
      
           IF DO-REWRITE = 'Y'
               IF  SUB NOT = 1 AND SUB NOT = 6
                 MOVE "REWRITE"            TO CM-DISK
               END-IF
               REWRITE TSPFL-RECORD
               IF  CUST-STAT NOT = "00"
               AND CUST-STAT NOT = "02"
                   DISPLAY "REWRITE: " TSPFL-KEY ", Status: " 
                           CUST-STAT UPON CONSOLE
               END-IF
           ELSE 
               WRITE TSPFL-RECORD
               IF  CUST-STAT NOT = "00"
               AND CUST-STAT NOT = "02"
                   DISPLAY "WRITE: " TSPFL-KEY ", Status: " 
                           CUST-STAT UPON CONSOLE
               END-IF
           END-IF. 
      
       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF  CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN PRIME-KEY
                             WITH SIZE 8
           START TSPFILE KEY GREATER THAN PRIME-KEY
                             WITH LENGTH 8
           START TSPFILE KEY GREATER THAN PRIME-KEY
                             WITH SIZE 8
           START TSPFILE KEY GREATER THAN PRIME-KEY
                             WITH LENGTH 8
           START TSPFILE KEY GREATER THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           END-IF.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS SPLIT-KEY2
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

# CHECKME do we need -std=mf -w?
AT_CHECK([$COMPILE -std=mf -w prog.cob], [0], [], [])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [Loading sample data file.
Sample data file load complete.
Loading sample data file.
Sample data file load complete.
Rewrite sample data file: 00
Sample data file rewrite complete.
LIST SAMPLE FILE
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=REWRITE .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=REWRITE .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=REWRITE .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=REWRITE .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=REWRITE .
LIST SAMPLE FILE DESCENDING
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=REWRITE .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=REWRITE .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=REWRITE .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=REWRITE .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=REWRITE .
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=REWRITE .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=REWRITE .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=REWRITE .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=REWRITE .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=REWRITE .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=REWRITE .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00/02 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
A: Expected ERROR 39 opening TSTFILE, Record size different
B: Expected ERROR 39 opening BADFILE, Index mismatch
C: Expected open BADFILE, with Index mismatch
Key: ALP00000 is 2417     : 549  mmm
Key: FOR00000 is 2417     : 549  mmm
Key: JOH00000 is 8417     : 1600 BPI
], [])

AT_CLEANUP


AT_SETUP([SUPPRESS WHEN string])
AT_KEYWORDS([FILE-IO])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM

           ALTERNATE RECORD KEY IS CM-TELEPHONE
                SUPPRESS WHEN "90055569"

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE WITH DUPLICATES
                SUPPRESS WHEN "8417"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3). 
             15  CM-CUST-NNN                   PICTURE X(5). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(4). 
           10  CM-TAPE                         PICTURE X(8). 
       
       WORKING-STORAGE SECTION.
      
       01  CUST-STAT                           PIC XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP.
      
       01  TEST-DATA.
         02  DATA-CUST-NUM-TBL.
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 7169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 9005556969.
           05  FILLER PIC 9(10) VALUE 9005556970.
           05  FILLER PIC 9(10) VALUE 6456445649.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 9005556969.
           05  FILLER PIC 9(10) VALUE 4169898507.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 9005556969.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(2) VALUE 0.
           05  SUB                             PICTURE 9(4) COMP.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
      
           05  TSPFL-KEY                       PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           PERFORM LOADFILE.
           PERFORM LISTFILE.
           STOP RUN.
      
       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT TSPFILE
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "05"
               DISPLAY "Error " CUST-STAT 
                       " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY
           END-IF. 
           IF  SUB = 1 OR 6 OR 12
               MOVE "2417"                   TO CM-DISK 
               MOVE "549  mmm"               TO CM-TAPE
           END-IF. 
           IF  SUB = 6
               MOVE "749  mmm"               TO CM-TAPE
           END-IF. 
      
           WRITE TSPFL-RECORD
           IF  CUST-STAT = "22"
               DISPLAY "WRITE: " TSPFL-KEY ", Duplicate Status: " 
                        CUST-STAT " Phone=" CM-TELEPHONE "." 
                        UPON CONSOLE
           ELSE
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "WRITE: " TSPFL-KEY ", Status: " 
                       CUST-STAT UPON CONSOLE
           END-IF. 
      
       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF  CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK 
                        " Phone=" CM-TELEPHONE "." 
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           DISPLAY "LIST SAMPLE FILE BY KEY2" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Phone=" CM-TELEPHONE "." 
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD 
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK 
                        " Tape=" CM-TAPE "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

# CHECKME do we need -std=mf?
AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [Loading sample data file.
WRITE: FOR00000, Duplicate Status: 22 Phone=8009329492.
Sample data file load complete.
LIST SAMPLE FILE
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417 Phone=3131234432.
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470 Phone=4082938498.
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470 Phone=7169898509.
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417 Phone=5292398745.
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417 Phone=8009329492.
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417 Phone=6456445643.
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470 Phone=9005556969.
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417 Phone=9005556970.
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417 Phone=6456445649.
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417 Phone=7456434355.
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=2417 Phone=9005556969.
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470 Phone=4169898507.
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470 Phone=7534587453.
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470 Phone=9005556969.
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470 Phone=4169898509.
Hit End of File after 15
LIST SAMPLE FILE BY KEY2
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Phone=3131234432.
Key: BET00000 is BETA SHOE MFG. INC.       Phone=4082938498.
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Phone=4169898507.
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Phone=4169898509.
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Phone=5292398745.
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Phone=6456445643.
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Phone=6456445649.
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Phone=7169898509.
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Phone=7456434355.
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Phone=7534587453.
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Phone=8009329492.
Hit End of File after 11
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417 Tape=549  mmm.
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=2417 Tape=549  mmm.
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470 Tape=6250 BPI.
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470 Tape=6250 BPI.
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470 Tape=6250 BPI.
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470 Tape=6250 BPI.
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470 Tape=6250 BPI.
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470 Tape=6250 BPI.
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470 Tape=6250 BPI.
Hit End of File after 09
], [])

AT_CLEANUP


AT_SETUP([INDEXED File Sparse/Split keys])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ORGANIZATION SEQUENTIAL
                    ASSIGN "./file1".
       SELECT file2 ORGANIZATION SEQUENTIAL
                    ASSIGN "./file2".
       SELECT file3 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file1-rec pic x(12).
       FD file2 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file2-rec pic x(12).
       SD file3 RECORD VARYING FROM 3 TO 12 DEPENDING rsz.
       1  file3-rec.
          2  file3-key1 pic x.
          2  file3-key2 pic 9.
          2  filler pic x(10).
       WORKING-STORAGE SECTION.
       77 rsz pic 99.
       1  1-data.
          2  filler pic x(14) VALUE "03A4X".
          2  filler pic x(14) VALUE "04A3XX".
          2  filler pic x(14) VALUE "05A2XXX".
          2  filler pic x(14) VALUE "06A1XXXX".
          2  filler pic x(14) VALUE "07A0XXXXX".
          2  filler pic x(14) VALUE "08B2XXXXXX".
          2  filler pic x(14) VALUE "09B1XXXXXXX".
          2  filler pic x(14) VALUE "10C2XXXXXXXX".
          2  filler pic x(14) VALUE "11C1XXXXXXXXX".
          2  filler pic x(14) VALUE "12Z9XXXXXXXXXX".
      *
       1  filler redefines 1-data.
          2  filler occurs 10 times indexed by ix-1.
           3 1-rsz pic 99.
           3 1-rec pic x(12).

       PROCEDURE DIVISION.
          OPEN OUTPUT file1.
          PERFORM VARYING ix-1 FROM 1 BY 2 UNTIL ix-1 > 10
             MOVE 1-rsz(ix-1) TO rsz
             MOVE 1-rec(ix-1) TO file1-rec
             WRITE file1-rec
          END-PERFORM.
          PERFORM VARYING ix-1 FROM 2 BY 2 UNTIL ix-1 > 10
             MOVE 1-rsz(ix-1) TO rsz
             MOVE 1-rec(ix-1) TO file1-rec
             WRITE file1-rec
          END-PERFORM.
          CLOSE file1.
          SORT file3 ON ASCENDING file3-key1
                        DESCENDING file3-key2
             USING file1
             GIVING file2.
          OPEN INPUT file2.
          PERFORM VARYING ix-1 FROM 1 BY 1 UNTIL ix-1 > 10
             READ file2
      *>> fileio-sort currently returns constant length records
             MOVE 1-rsz(ix-1) TO rsz
      *>> END-OF-DETOUR
             IF (1-rsz(ix-1) <> rsz) or
                (1-rec(ix-1) <> file2-rec)
                DISPLAY "FAILED"
             END-IF
          END-PERFORM.
          CLOSE file2.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([File SORT, LINE SEQUENTIAL])
AT_KEYWORDS([runfile using giving])

# Note: We shouldn't use AT_DATA to create sequential record
# data, because AT_DATA needs a \n at the end

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-OUT  ASSIGN "result.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(20).
       FD SORT-OUT.
       01 OUT-REC       PIC X(20).
       SD SORT-WRK.
       01 WRK-REC       PIC X(6).
       PROCEDURE        DIVISION.

      * Special case: write test data in COBOL, see note above
           OPEN OUTPUT SORT-IN.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "world " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM "hello " END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           WRITE IN-REC FROM SPACES   END-WRITE.
           CLOSE SORT-IN.

           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([cat result.txt], [0], [




hello
world
], [])

AT_CLEANUP


AT_SETUP([File SORT, LINE SEQUENTIAL same file])
AT_KEYWORDS([runfile using giving])

AT_DATA([test.txt], [
bla
world
hello

blubb
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "test.txt"
                        ORGANISATION LINE SEQUENTIAL.
       SELECT SORT-WRK  ASSIGN "dummy".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(6).
       SD SORT-WRK.
       01 sort-entry    PIC X(6).
       PROCEDURE        DIVISION.
           SORT SORT-WRK
                ASCENDING sort-entry
                USING  SORT-IN
                GIVING SORT-IN.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([cat test.txt], [0], [

bla
blubb
hello
world
], [])

AT_CLEANUP


AT_SETUP([File SORT, LINE SEQUENTIAL variable records])
AT_KEYWORDS([runfile])

AT_DATA([file1],
[A1XXXX
A2XXX
A3XX
Z9XXXXXXXXXX
A4X
B1XXXXXXX
B2XXXXXX
A0XXXXX
C1XXXXXXXXX
C2XXXXXXXX
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file1".
       SELECT file2 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file2".
       SELECT file3 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x(12).
       FD file2.
       1  file2-rec pic x(12).
       SD file3.
       1  file3-rec.
          2  file3-key1 pic x.
          2  file3-key2 pic 9.
          2  filler pic x(10).
       PROCEDURE DIVISION.
          SORT file3 ON ASCENDING file3-key1
                        DESCENDING file3-key2
             USING file1
             GIVING file2.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])
AT_CHECK([cat file2], [0],
[A4X
A3XX
A2XXX
A1XXXX
A0XXXXX
B2XXXXXX
B1XXXXXXX
C2XXXXXXXX
C1XXXXXXXXX
Z9XXXXXXXXXX
])

AT_CLEANUP


AT_SETUP([File MERGE, LINE SEQUENTIAL variable records])
AT_KEYWORDS([runfile])

AT_DATA([file1],
[A1XXXX
A2XXX
A3XX
Z9XXXXXXXXXX
A4X
B1XXXXXXX
B2XXXXXX
A0XXXXX
C1XXXXXXXXX
C2XXXXXXXX
])

AT_DATA([file2],
[A1****
A2***
A3**
Z9**********
A4*
B1*******
B2******
A0*****
C1*********
C2********
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file1".
       SELECT file2 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file2".
       SELECT file3 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file3".
       SELECT file4 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x(12).
       FD file2.
       1  file2-rec pic x(12).
       FD file3.
       1  file3-rec pic x(12).
       SD file4.
       1  file4-rec.
          2  file4-key1 pic x.
          2  file4-key2 pic 9.
          2  filler pic x(10).
       PROCEDURE DIVISION.
          MERGE file4 ON ASCENDING file4-key1
                        DESCENDING file4-key2
             USING file1 file2
             GIVING file3.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])
AT_CHECK([cat file3], [0],
[A4X
A4*
A3XX
A3**
A2XXX
A2***
A1XXXX
A1****
A0XXXXX
A0*****
B2XXXXXX
B2******
B1XXXXXXX
B1*******
C2XXXXXXXX
C2********
C1XXXXXXXXX
C1*********
Z9XXXXXXXXXX
Z9**********
])

AT_CLEANUP


AT_SETUP([SORT nonexistent file])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT SORT-IN   ASSIGN "SORT-IN".
       SELECT SORT-OUT  ASSIGN "SORT-OUT".
       SELECT SORT-WRK  ASSIGN "SORT-WRK".
       DATA             DIVISION.
       FILE             SECTION.
       FD SORT-IN.
       01 IN-REC        PIC X(100).
       FD SORT-OUT.
       01 OUT-REC       PIC X(100).
       SD SORT-WRK.
       01 WRK-REC       PIC X(100).
       PROCEDURE        DIVISION.
           SORT SORT-WRK
                ASCENDING KEY WRK-REC
                USING  SORT-IN
                GIVING SORT-OUT.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([cat SORT-OUT], [0], [], [])

AT_CLEANUP


AT_SETUP([SORT with INPUT/OUTPUT PROCEDUREs])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       SD file1.
       1  file1-rec.
          2  file1-key pic 9(4).
          2  file1-data pic x(10).
       WORKING-STORAGE SECTION.
       77 w-eof pic 9 value 0.
       1  1-values.
          2  filler pic x(14) value "0001A--------A".
          2  filler pic x(14) value "0002B--------B".
          2  filler pic x(14) value "0003C--------C".
          2  filler pic x(14) value "0004D--------D".
          2  filler pic x(14) value "0005E--------E".
          2  filler pic x(14) value "0006F--------F".
          2  filler pic x(14) value "0007G--------G".
          2  filler pic x(14) value "0008H--------H".
          2  filler pic x(14) value "0009I--------I".
          2  filler pic x(14) value "0010J--------J".
          2  filler pic x(14) value "0011K--------K".
          2  filler pic x(14) value "0012L--------L".
          2  filler pic x(14) value "0013M--------M".
          2  filler pic x(14) value "0014N--------N".
          2  filler pic x(14) value "0015O--------O".
          2  filler pic x(14) value "0016P--------P".
          2  filler pic x(14) value "0017Q--------Q".
          2  filler pic x(14) value "0018R--------R".
          2  filler pic x(14) value "0019S--------S".
          2  filler pic x(14) value "0020T--------T".
          2  filler pic x(14) value "0021U--------U".
          2  filler pic x(14) value "0022V--------V".
          2  filler pic x(14) value "0023W--------W".
          2  filler pic x(14) value "0024X--------X".
          2  filler pic x(14) value "0025Y--------Y".
          2  filler pic x(14) value "0026Z--------Z".
       1  filler redefines 1-values.
          2  1-record occurs 26 times indexed by ix-1.
           3 1-key pic 9(4).
           3 1-data pic x(10).
       PROCEDURE DIVISION.
       a01-main.
          SORT file1 ON ASCENDING file1-key
             INPUT PROCEDURE a02-release-to-sort
             OUTPUT PROCEDURE a03-return-from-sort.
          STOP RUN.
      *
       a02-release-to-sort.
          PERFORM VARYING ix-1 FROM 1 BY 2 UNTIL ix-1 > 26
             RELEASE file1-rec from 1-record(ix-1)
          END-PERFORM.
          PERFORM VARYING ix-1 FROM 2 BY 2 UNTIL ix-1 > 26
             RELEASE file1-rec from 1-record(ix-1)
          END-PERFORM.
      *
       a03-return-from-sort.
          PERFORM VARYING ix-1 FROM 1 BY 1
             UNTIL (ix-1 > 26) OR (w-eof = 1)
             RETURN file1 RECORD
               AT END MOVE 1 TO w-eof
             END-RETURN
             IF (file1-rec <> 1-record(ix-1))
                MOVE 1 TO w-eof
             END-IF
          END-PERFORM.
          IF (w-eof = 1)
             DISPLAY "FAILED: unexpected eof"
          ELSE
             RETURN file1 RECORD
               AT END CONTINUE
               NOT AT END DISPLAY "FAILED: expected eof"
             END-RETURN
          END-IF.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([SORT with key1 ASCENDING, key2 DESCENDING])
AT_KEYWORDS([runfile])

AT_DATA([file1],
[A1
A2
A3
Z9
A4
B1
B2
A0
C1
C2
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file1".
       SELECT file2 ORGANIZATION LINE SEQUENTIAL
                    ASSIGN "./file2".
       SELECT file3 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic xxx.
       FD file2.
       1  file2-rec pic xxx.
       SD file3.
       1  file3-rec.
          2  file3-key1 pic x.
          2  file3-key2 pic 9.
          2  file3-dot pic x.
       PROCEDURE DIVISION.
          SORT file3 ON ASCENDING file3-key1
                        DESCENDING file3-key2
             USING file1
             GIVING file2.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])
AT_CHECK([cat file2], [0],
[A4
A3
A2
A1
A0
B2
B1
C2
C1
Z9
])

AT_CLEANUP


AT_SETUP([ASSIGN with LOCAL-STORAGE item])
AT_KEYWORDS([runfile])

AT_DATA([test.txt],
[hello
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE                SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       LOCAL-STORAGE    SECTION.
       01  path         PIC X(10) VALUE "test.txt".
       PROCEDURE        DIVISION.
           OPEN INPUT test-file
           READ test-file   END-READ
           IF test-rec NOT = "hello"
              DISPLAY test-rec END-DISPLAY
           END-IF
           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ASSIGN with LOCAL-STORAGE item and INITIAL prog])
AT_KEYWORDS([runfile])

# Files are initialised in a different location in INITIAL program, hence the
# need for a separate test.

AT_DATA([test.txt],
[hello
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog INITIAL.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE                SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       LOCAL-STORAGE    SECTION.
       01  path         PIC X(10) VALUE "test.txt".
       PROCEDURE        DIVISION.
           OPEN INPUT test-file
           READ test-file   END-READ
           IF test-rec NOT = "hello"
              DISPLAY test-rec END-DISPLAY
           END-IF
           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ASSIGN with BASED data item and CHAINING])
AT_KEYWORDS([runfile status])

AT_DATA([TEST-FILE],
[hello
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE                SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       WORKING-STORAGE  SECTION.
       01  path         BASED PIC X(10).
       01  x            PIC X.
       PROCEDURE        DIVISION CHAINING x.
           IF x NOT = SPACES
              ALLOCATE path
              MOVE "TEST-FILE" TO path
              OPEN INPUT test-file
              FREE path
           ELSE
              OPEN INPUT test-file
           END-IF
           READ test-file   END-READ
           IF test-rec NOT = "hello"
              DISPLAY test-rec END-DISPLAY
           END-IF
           CLOSE test-file
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT test-file ASSIGN path
                        ORGANIZATION LINE SEQUENTIAL
                        FILE STATUS TEST-STAT.
       DATA             DIVISION.
       FILE                SECTION.
       FD  test-file.
       01  test-rec     PIC X(5).
       WORKING-STORAGE  SECTION.
       01  path         BASED PIC X(10).
       01  test-stat    PIC X(2) VALUE "XX".
       PROCEDURE        DIVISION.
           OPEN INPUT test-file
           IF TEST-STAT NOT = '31'
              DISPLAY 'BAD OPEN, STATUS "' test-stat '"' END-DISPLAY
           END-IF
           READ test-file   END-READ
           IF TEST-STAT NOT = '47'
              DISPLAY 'BAD READ, STATUS "' test-stat '"' END-DISPLAY
           END-IF
           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog X], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:23: error: inconsistant file name (status = 31) for file test-file ('field with NULL address') on OPEN
])

AT_CHECK([$COMPILE prog2.cob])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([ASSIGN with data item in LINKAGE])
AT_KEYWORDS([runfile-CONTROL file status])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  f-path     PIC X(80) VALUE "fooasg.txt".
       01  x-path     PIC X(80) VALUE "foxasg.txt".
       01  y-path     PIC X(80) VALUE "foyasg.txt".
       01  REC1       PIC 9(4) VALUE 1.
       01  REC2       PIC 9(4) VALUE 2.
       01  CUST-STAT  PIC X(2) VALUE "XX".

       PROCEDURE DIVISION.
           CALL "TSTOPN"  USING OMITTED.
           CALL "TSTOPN"  USING y-path.
           CALL "TSTOPEN" USING f-path  REC1 CUST-STAT.
           CALL "TSTOPEN" USING x-path  REC1 CUST-STAT.
           CALL "TSTOPEN" USING OMITTED REC1 CUST-STAT.
           CALL "TSTOPEN" USING f-path  REC2 CUST-STAT.
           CALL "TSTOPEN" USING x-path  REC2 CUST-STAT.
           STOP RUN.
           END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTOPEN.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN s-path
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM
           RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-line PIC X(79).

       WORKING-STORAGE SECTION.
       01  z-path   PIC X(80) VALUE "foozzz.txt".

       LINKAGE SECTION.
       01  s-path     PIC X(80).
       01  REC-NUM    PIC 9(4).
       01  CUST-STAT  PIC X(2).

       PROCEDURE DIVISION USING s-path, REC-NUM, CUST-STAT.
           IF ADDRESS OF s-path = NULL
              SET ADDRESS OF s-path TO ADDRESS OF z-path
           END-IF.
           IF REC-NUM > 1
              OPEN I-O f
              DISPLAY "Extend file: " s-path(1:10)
                   " - " CUST-STAT " #" REC-NUM "."
           ELSE
              OPEN OUTPUT f
              DISPLAY "Output file: " s-path(1:10)
                   " - " CUST-STAT " #" REC-NUM "."
           END-IF.
           IF CUST-STAT NOT = "00"
               DISPLAY "Opened error: " CUST-STAT "."
               GOBACK
           END-IF.
           MOVE "Hello World" TO f-line.
           MOVE REC-NUM       TO f-line (20:4).
           WRITE f-line.
           IF CUST-STAT NOT = "00"
               DISPLAY "WRITE error: " CUST-STAT "."
           END-IF.
           CLOSE f.
           GOBACK.
       END PROGRAM TSTOPEN.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTOPN.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN s-path
           ORGANIZATION LINE SEQUENTIAL
           FILE STATUS IS IO-STS.

       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-line PIC X(80).

       WORKING-STORAGE SECTION.
       01  IO-STS   PIC X(2) VALUE "00".

       LINKAGE SECTION.
       01  s-path   PIC X(80).

       PROCEDURE DIVISION USING s-path.
           OPEN OUTPUT f
           IF IO-STS NOT = "00"
               DISPLAY "Opened error: " IO-STS "."
               GOBACK
           END-IF.
           DISPLAY "Opened file: " s-path(1:10) ".".
           MOVE "Hello World" TO f-line.
           WRITE f-line.
           CLOSE f.
           GOBACK.
       END PROGRAM TSTOPN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.

       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       PROCEDURE DIVISION.
           CALL "TSTOPEN" USING OMITTED.
           STOP RUN.
           END PROGRAM prog2.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTOPEN.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN s-path
           ORGANIZATION SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-line PIC X(79).

       LINKAGE SECTION.
       01  s-path     PIC X(80).

       PROCEDURE DIVISION USING s-path.
           OPEN OUTPUT f
           GOBACK.
       END PROGRAM TSTOPEN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Opened error: 31.
Opened file: foyasg.txt.
Output file: fooasg.txt - 00 #0001.
Output file: foxasg.txt - 00 #0001.
Output file: foozzz.txt - 00 #0001.
Extend file: fooasg.txt - 00 #0002.
Extend file: foxasg.txt - 00 #0002.
], [])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:32: error: inconsistant file name (status = 31) for file f ('field with NULL address') on OPEN
])

AT_CLEANUP


AT_SETUP([INDEXED file sparse/split keys])
AT_KEYWORDS([runfile split key sparse SUPPRESS])

# FIXME: separate both test parts

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.

       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM, CM-COMPANY

           ALTERNATE RECORD KEY IS SPLIT-KEY2
           SOURCE IS CM-TELEPHONE,CM-MACHINE WITH DUPLICATES

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE WITH DUPLICATES
                SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
               88  NULL-KEY                    VALUE 4 5 8 12 14.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           PERFORM LOADFILE.
           PERFORM LISTFILE.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
           IF  NULL-KEY
               MOVE ALL "*"                  TO CM-DISK
               MOVE ALL "*"                  TO CM-TAPE.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE "
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00"
                      AND CUST-STAT NOT = "02")
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
      *---- Some results may be different with VB-ISAM  ------*
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           END-IF.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS PRIME-KEY
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read "
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read "
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK ":"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS SPLIT-KEY2
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE ":"
                         UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********:
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********:
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
LIST SAMPLE FILE DESCENDING
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********:
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********:
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=8417    :
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    :
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    :
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    :
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    :
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    :
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    :
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    :
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    :
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    :
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    :
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********:
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6:
], [])

AT_CLEANUP


AT_SETUP([INDEXED file split keys WITH DUPLICATES])
AT_KEYWORDS([runfile key])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
## Note: The order in which secondary records with duplicate keys
##       are returnded is not guaranteed.

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
           SELECT test-file
               ASSIGN        "TESTFILE"
               ACCESS        DYNAMIC
               ORGANIZATION  INDEXED
               RECORD KEY           test-key-1 SOURCE IS test-key-p1
               ALTERNATE RECORD KEY test-key-2 SOURCE IS test-key-p2,
                                                         test-key-p3
               WITH DUPLICATES
           .

       DATA             DIVISION.
       FILE             SECTION.
       FD  test-file.
       01  test-rec.
           03  test-key-p1 PIC X(4).
           03  test-key-p2 PIC 9(4).
           03  test-data   PIC X(4).
           03  test-key-p3 PIC X(4).

       WORKING-STORAGE SECTION.
       01  found        PIC X(03).

       PROCEDURE        DIVISION.
           OPEN OUTPUT test-file
           WRITE test-rec FROM "BBBB0001dat1aaaa"
           WRITE test-rec FROM "AAAA0001dat2aaaa"
           WRITE test-rec FROM "CCCC0002dat3aaaa"
           WRITE test-rec FROM "DDDD0002dat4bbbb"
           WRITE test-rec FROM "EEEE0002dat5bbbb"
           CLOSE test-file

           OPEN INPUT test-file

           MOVE "CCCC" TO test-key-p1
           READ test-file KEY IS test-key-1
               INVALID KEY
                   DISPLAY "READ with CCCC found no record"
               NOT INVALID KEY
                   IF test-data NOT = "dat3"
                       DISPLAY "READ with wrong result: "
                           test-rec
           END-READ

           MOVE SPACES   TO found

           MOVE 0001     TO test-key-p2
           MOVE "aaaa"   TO test-key-p3
           START test-file KEY >= test-key-2
               INVALID KEY
                   DISPLAY "START >= 0001/aaaa found no record"
               NOT INVALID KEY
                   READ  test-file NEXT
                       AT END
                           DISPLAY "READ NEXT (1) found no record"
                       NOT AT END
                           EVALUATE test-data
                              WHEN "dat1"
                                 MOVE 'X' TO found (1:1)
                              WHEN "dat2"
                                 MOVE 'X' TO found (2:1)
                              WHEN OTHER
                                 DISPLAY "READ NEXT (1) "
                                     "with wrong result: "
                                     test-data
                   END-READ
                   READ  test-file NEXT
                       AT END
                           DISPLAY "READ NEXT (2) found no record"
                       NOT AT END
                           EVALUATE test-data
                              WHEN "dat1"
                                 MOVE 'X' TO found (1:1)
                              WHEN "dat2"
                                 MOVE 'X' TO found (2:1)
                              WHEN OTHER
                                 DISPLAY "READ NEXT (2) "
                                     "with wrong result: "
                                     test-data
                   END-READ
                   IF found NOT = 'XX '
                      DISPLAY "START >= + READ NEXT * 2 "
                          "with wrong result: " found
           END-START
           MOVE 0001      TO test-key-p2
           MOVE "aaaa"    TO test-key-p3
           START test-file KEY > test-key-2
               INVALID KEY
                   DISPLAY "START > 0001/aaaa found no record"
               NOT INVALID KEY
                   READ  test-file NEXT
                       AT END
                           DISPLAY "READ NEXT (3) found no record"
                       NOT AT END
                           IF test-data NOT = "dat3"
                               DISPLAY "READ NEXT (3) "
                                   "with wrong result: "
                                   test-data
                   END-READ
           END-START

           MOVE 0002      TO test-key-p2
           MOVE ALL "z"   TO test-key-p3
           START test-file KEY IS < test-key-2
               INVALID KEY
                   DISPLAY "START < 0002/zzzz found no record"
               NOT INVALID KEY
                   READ  test-file PREVIOUS
                       AT END
                           DISPLAY "READ PREVIOUS (1) found no record"
                       NOT AT END
                           IF test-data NOT = "dat5"
                              DISPLAY "READ PREVIOUS (1) "
                                  "with wrong result: "
                                  test-data
                   END-READ
                   READ  test-file PREVIOUS
                       AT END
                           DISPLAY "READ PREVIOUS (2) found no record"
                       NOT AT END
                           IF test-data NOT = "dat4"
                              DISPLAY "READ PREVIOUS (2) "
                                  "with wrong result: "
                                  test-data
                   END-READ
                   READ  test-file PREVIOUS
                       AT END
                           DISPLAY "READ PREVIOUS (3) found no record"
                       NOT AT END
                           IF test-data NOT = "dat3"
                              DISPLAY "READ PREVIOUS (3) "
                                  "with wrong result: "
                                  test-data
                   END-READ
           END-START

           CLOSE test-file
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([INDEXED file variable length record])
AT_KEYWORDS([runfile WRITE START READ])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       Identification division.
       Program-id. prog.
      *
       Environment division.

       Input-output section.
       File-control.
      *
           Select optional tbw
               assign to path-tbw
               organization is indexed
               access mode is dynamic
               record key is tbw-key
               alternate record key is tbw-alt
                   suppress when space
               sharing with no other
               file status is fs-file-status.
      *
       I-o-control.
      *
       Data division.
       File section.
      *
       FD  tbw
           record is varying in size
               from 107 to 362 characters
               depending on end-tbw-record
           .
       01  tbw-record.
           02 tbw-key                        pic x(100).
           02 tbw-alt.
               03 tbw-alt-1                  pic 9(02).
               03 tbw-alt-2                  pic 9(04).
           02 tbw-f1                         pic x(01).
           02 tbw-f2                         pic x(255).
      *
       Working-storage section.

       01  fs-file-status                 pic x(02).

       01  end-tbw-record                 pic 9(09) binary.

       01  flag-tbw                       pic x(01) value low-value.
           88 flag-tbw-open   value high-value.
           88 flag-tbw-closed value low-value.

       01  path-tbw                       pic x(255) value space.

       Procedure division.

      * Prepare.
           Move "tbw" to path-tbw.

      * First test.
           Perform tbw-delete-file thru tbw-exit.

           Perform tbw-open-i-o    thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move 122 to end-tbw-record.
           Move "aaaaa" to tbw-key.
           Move spaces to tbw-alt
                          tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move low-values to tbw-alt.
           Perform tbw-start-alternate thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

      * Second test.
           Perform tbw-close thru tbw-exit.

           Perform tbw-delete-file thru tbw-exit.

           Perform tbw-open-i-o thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move 163 to end-tbw-record.
           Move "aaaaa" to tbw-key.
           Move 1 to tbw-alt-1
                     tbw-alt-2.
           Move spaces to tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move 122 to end-tbw-record.
           Move "aaaab" to tbw-key.
           Move spaces to tbw-alt
                          tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move low-values to tbw-alt.
           Perform tbw-start-alternate thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move spaces to tbw-alt.
           Perform tbw-rewrite thru tbw-exit.

      * Finish.
           Perform tbw-close thru tbw-exit.
           Display "Test completed".
           Stop run.

      * I/O.
       tbw-Open-I-O.
           If flag-tbw-open
               Perform tbw-Close thru tbw-Close-exit
           end-if.
           Display "open".
           Open i-o tbw.
           Display "open".
           If fs-file-status is less than "10"
               Set flag-tbw-open to true
           end-if.
           Go to tbw-exit.
      *
       tbw-Start-Primary-Greater.
           Display "start > tbw-key".
           Start tbw
               key is greater than tbw-key
               invalid key Continue
           end-start.
           Display "start > tbw-key".
           Go to tbw-exit.
      *
       tbw-Start-Alternate.
           Display "start >= tbw-alt".
           Start tbw
               key is not less than tbw-alt
               invalid key Continue
           end-start.
           Display "start >= tbw-alt".
           Go to tbw-exit.
      *
       tbw-Read-Next.
           Display "read next".
           Read tbw
               next record
               at end Continue
           end-read.
           Display "read next done".
           Go to tbw-exit.
      *
       tbw-Write.
           Display "write".
           Write tbw-record
               invalid key Continue
           end-write.
           Display "write".
           Go to tbw-exit.
      *
       tbw-Rewrite.
           Display "rewrite".
           Rewrite tbw-record
               invalid key Continue
           end-rewrite.
           Display "rewrite " fs-file-status.
           Go to tbw-exit.
      *
       tbw-Delete-File.
           If flag-tbw-open
               Perform tbw-Close thru tbw-Close-exit
           end-if.
           Move "xx" to fs-file-status.
           Display "delete file".
           Delete file tbw
           end-delete.
           Display "delete file".
           Go to tbw-exit.
      *
       tbw-Close.
           If flag-tbw-open
               Display "close"
               Close tbw
               Display "close"
               Set flag-tbw-closed to true
           end-if.
       tbw-Close-exit.
           Exit.
       tbw-exit.
           Exit.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[delete file
delete file
open
open
start > tbw-key
start > tbw-key
read next
read next done
write
write
start >= tbw-alt
start >= tbw-alt
start > tbw-key
start > tbw-key
read next
read next done
read next
read next done
close
close
delete file
delete file
open
open
start > tbw-key
start > tbw-key
read next
read next done
write
write
write
write
start >= tbw-alt
start >= tbw-alt
read next
read next done
rewrite
rewrite 00
close
close
Test completed
], [])

AT_CLEANUP


AT_SETUP([INDEXED sample])
AT_KEYWORDS([runfile optional file status READ WRITE DUPLICATES START])

# modified version of GC-FAQ: indexing example
# Author: Brian Tiffin, Date:   17-Feb-2009, 28-Jan-2014

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [

       identification division.
       program-id. linage.

       environment division.
       configuration section.

       input-output section.
       file-control.
          select optional indexed-file
          assign to "indexed-file.dat"
          status is indexing-status
          organization is indexed
          access mode is dynamic
          record key is keyfield of indexing-record
          alternate record key is altkey of indexing-record
              with duplicates
          .

       data division.
       file section.
       fd indexed-file.
       01 indexing-record.
          03 keyfield          pic x(8).
          03 filler            pic x.
          03 altkey.
             05 first-part     pic 99.
             05 middle-part    pic x.
             05 last-part      pic 99.
          03 filler            pic x.
          03 data-part         pic x(18).

       working-storage section.
       01 indexing-status.
          03 high-status-code  pic xx.
          03 high-status redefines high-status-code pic 99.
             88 indexing-ok              values 0 thru 10.
          03 low-status-code   pic xx.
          03 low-status redefines low-status-code pic 99.

       78 line-separator       value
           '-----------------------------------------'.
       01 display-record.
          03 filler            pic x(4)  value spaces.
          03 keyfield          pic x(8).
          03 filler            pic xx    value spaces.
          03 altkey.
             05 first-part     pic 99.
             05 filler         pic x     value space.
             05 middle-part    pic x.
             05 filler         pic x     value space.
             05 last-part      pic 99.
          03 filler            pic xx    value ", ".
          03 data-part         pic x(18).
       77 safety-net           pic 99.

      *> control break
       01 oldkey               pic 99x99.

      *> read control fields
       01 duplicate-flag       pic x.
          88 no-more-duplicates          value high-value
             when set to false                 low-value.
       01 record-flag          pic x.
          88 no-more-records             value high-value
             when set to false                 low-value.

      *> ***************************************************************
       procedure division.
       main.
      *> Populate a sample database, create or overwrite keys
           perform populate-sample

      *> clear the record space for this example
           move spaces to indexing-record

      *> open the data file again
           open i-o indexed-file
           perform indexing-check
           if not indexing-ok
             stop run returning 1
           end-if

      *> read all the duplicate 00b02 keys
           move 00 to first-part of indexing-record
           move "b" to middle-part of indexing-record
           move 02 to last-part of indexing-record

      *> using read key and then next key / last key compare
           set no-more-duplicates to false

           display "Read all 00b02 keys sequentially" end-display
           perform read-indexing-record
           perform read-next-record
      *>       this is only here for safety...
               varying safety-net from 1 by 1
               until no-more-duplicates
      *>         s a f e  against broken indexed i/o
                  or safety-net > 40
           if safety-net > 40
               display "Safety kicked in!" end-display
           end-if
           display line-separator end-display

      *> read by key of reference ... the cool stuff
           move 00 to first-part of indexing-record
           move "a" to middle-part of indexing-record
           move 02 to last-part of indexing-record
           set no-more-records to false

      *> using start and read next
           display "Read all alternate keys greater than 00a02"
           end-display
           perform start-at-key
           perform read-next-by-key
      *>       this is only here for safety...
               varying safety-net from 1 by 1
               until no-more-records
      *>         s a f e  against broken indexed i/o
                  or safety-net > 40
           if safety-net > 40
               display "Safety kicked in!" end-display
           end-if
           display line-separator end-display

      *> read by primary key of reference
           move "87654321" to keyfield of indexing-record
           set no-more-records to false

      *> using start and previous by key
           display
               "Read all primary keys less than "
               function trim (keyfield of indexing-record)
           end-display
           perform start-prime-key
           perform read-previous-by-key
      *>       this is only here for safety...
               varying safety-net from 1 by 1
               until no-more-records
      *>         s a f e  against broken indexed i/o
                  or safety-net > 40
           if safety-net > 40
             display "Safety kicked in!" end-display
           end-if
           display line-separator end-display

      *> and with that we are done with indexing sample
           close indexed-file

           goback
           .
      *> ***************************************************************

      *> ***************************************************************
      *><* read by alternate key paragraph
       read-indexing-record.
           display "Reading: " altkey of indexing-record end-display
           read indexed-file key is altkey of indexing-record
               invalid key
                   display
                       "bad read key: "
                       function trim (altkey of indexing-record)
                       upon syserr
                   end-display
               set no-more-duplicates to true
           end-read
           perform indexing-check
           .

      *><* read next sequential paragraph
       read-next-record.
           move corresponding indexing-record to display-record
           display display-record end-display
           move altkey of indexing-record to oldkey

           read indexed-file next record
               at end set no-more-duplicates to true
               not at end
                   if oldkey not equal altkey of indexing-record
                       set no-more-duplicates to true
                   end-if
           end-read
           perform indexing-check
           .

      *><* start primary key of reference paragraph
       start-prime-key.
           display "Prime < " keyfield of indexing-record end-display
           start indexed-file
              key is less than
                  keyfield of indexing-record
              invalid key
                  display
                      "bad start: "
                      function trim (keyfield of indexing-record)
                      upon syserr
                  end-display
                  set no-more-records to true
              not invalid key
                  read indexed-file previous record
                      at end set no-more-records to true
                  end-read
           end-start
           perform indexing-check
           .

      *><* read previous by key of reference paragraph
       read-previous-by-key.
           move corresponding indexing-record to display-record
           display display-record end-display

           read indexed-file previous record
               at end set no-more-records to true
           end-read
           perform indexing-check
           .
      *><* start alternate key of reference paragraph
       start-at-key.
           display "Seeking >= " altkey of indexing-record end-display
           start indexed-file
              key is greater than or equal to
                  altkey of indexing-record
              invalid key
                  display
                      "bad start: "
                      function trim (altkey of indexing-record)
                      upon syserr
                  end-display
                  set no-more-records to true
              not invalid key
                  read indexed-file next record
                      at end set no-more-records to true
                  end-read
           end-start
           perform indexing-check
           .

      *><* read next by key of reference paragraph
       read-next-by-key.
           move corresponding indexing-record to display-record
           display display-record end-display

           read indexed-file next record
               at end set no-more-records to true
           end-read
           perform indexing-check
           .

      *><* populate a sample database
       populate-sample.

      *> Open optional index file for read write
           open i-o indexed-file
           perform indexing-check

           move "12345678 00a01 some 12345678 data" to indexing-record
           perform write-indexing-record
           move "87654321 00a01 some 87654321 data" to indexing-record
           perform write-indexing-record
           move "12348765 00a01 some 12348765 data" to indexing-record
           perform write-indexing-record
           move "87651234 00a01 some 87651234 data" to indexing-record
           perform write-indexing-record

           move "12345679 00b02 some 12345679 data" to indexing-record
           perform write-indexing-record
           move "97654321 00b02 some 97654321 data" to indexing-record
           perform write-indexing-record
           move "12349765 00b02 some 12349765 data" to indexing-record
           perform write-indexing-record
           move "97651234 00b02 some 97651234 data" to indexing-record
           perform write-indexing-record

           move "12345689 00c13 some 12345689 data" to indexing-record
           perform write-indexing-record
           move "98654321 00c13 some 98654321 data" to indexing-record
           perform write-indexing-record
           move "12349865 00c13 some 12349865 data" to indexing-record
           perform write-indexing-record
           move "98651234 00c13 some 98651234 data" to indexing-record
           perform write-indexing-record

      *> close it ... not necessary, but for the example we will
           close indexed-file
           perform indexing-check
           .

      *><* Write paragraph
       write-indexing-record.
           write indexing-record
               invalid key
                   display
                       "rewriting key: "
                       function trim (keyfield of indexing-record)
                       upon syserr
                   end-display
                   rewrite indexing-record
                       invalid key
                           display
                               "really bad key: "
                             function trim (keyfield of indexing-record)
                               upon syserr
                           end-display
                   end-rewrite
           end-write
           .

      *><* file status quick check.  For this sample, keep running
       indexing-check.
           if not indexing-ok then
               display
                   "isam file io problem: " indexing-status
                   upon syserr
               end-display
           end-if
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Read all 00b02 keys sequentially
Reading: 00b02
    12345679  00 b 02, some 12345679 data
    97654321  00 b 02, some 97654321 data
    12349765  00 b 02, some 12349765 data
    97651234  00 b 02, some 97651234 data
-----------------------------------------
Read all alternate keys greater than 00a02
Seeking >= 00a02
    12345679  00 b 02, some 12345679 data
    97654321  00 b 02, some 97654321 data
    12349765  00 b 02, some 12349765 data
    97651234  00 b 02, some 97651234 data
    12345689  00 c 13, some 12345689 data
    98654321  00 c 13, some 98654321 data
    12349865  00 c 13, some 12349865 data
    98651234  00 c 13, some 98651234 data
-----------------------------------------
Read all primary keys less than 87654321
Prime < 87654321
    87651234  00 a 01, some 87651234 data
    12349865  00 c 13, some 12349865 data
    12349765  00 b 02, some 12349765 data
    12348765  00 a 01, some 12348765 data
    12345689  00 c 13, some 12345689 data
    12345679  00 b 02, some 12345679 data
    12345678  00 a 01, some 12345678 data
-----------------------------------------
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Read all 00b02 keys sequentially
Reading: 00b02
    12345679  00 b 02, some 12345679 data
    97654321  00 b 02, some 97654321 data
    12349765  00 b 02, some 12349765 data
    97651234  00 b 02, some 97651234 data
-----------------------------------------
Read all alternate keys greater than 00a02
Seeking >= 00a02
    12345679  00 b 02, some 12345679 data
    97654321  00 b 02, some 97654321 data
    12349765  00 b 02, some 12349765 data
    97651234  00 b 02, some 97651234 data
    12345689  00 c 13, some 12345689 data
    98654321  00 c 13, some 98654321 data
    12349865  00 c 13, some 12349865 data
    98651234  00 c 13, some 98651234 data
-----------------------------------------
Read all primary keys less than 87654321
Prime < 87654321
    87651234  00 a 01, some 87651234 data
    12349865  00 c 13, some 12349865 data
    12349765  00 b 02, some 12349765 data
    12348765  00 a 01, some 12348765 data
    12345689  00 c 13, some 12345689 data
    12345679  00 b 02, some 12345679 data
    12345678  00 a 01, some 12345678 data
-----------------------------------------
],
[rewriting key: 12345678
rewriting key: 87654321
rewriting key: 12348765
rewriting key: 87651234
rewriting key: 12345679
rewriting key: 97654321
rewriting key: 12349765
rewriting key: 97651234
rewriting key: 12345689
rewriting key: 98654321
rewriting key: 12349865
rewriting key: 98651234
])

AT_CLEANUP


AT_SETUP([WRITE + REWRITE FILE name])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8).
           10  C2-COMPANY                      PICTURE X(25).
           10  C2-DISK                         PICTURE X(8).
           10  C2-NO-TERMINALS                 PICTURE 9(4).

       WORKING-STORAGE SECTION.

       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4).

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.


       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN I-O FLATFILE2.
           MOVE 2 TO REC-NUM
           READ FLATFILE2
           DISPLAY "Read    " C2-CUST-NUM " Sts:" CUST-STAT
                   " Trms:" C2-NO-TERMINALS.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD
           READ FLATFILE2
           DISPLAY "REWROTE " C2-CUST-NUM " Sts:" CUST-STAT
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE2.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.

           OPEN OUTPUT FLATFILE.

           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.

       LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE FILE FLATFILE FROM TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample program data file.
Sample program data file load complete.
Read    BET00000 Sts:00 Trms:0013
REWROTE BET00000 Sts:00 Trms:0014
], [])

AT_CLEANUP


AT_SETUP([START RELATIVE (1)])
AT_KEYWORDS([fundamental runfile DELETE FILE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT OPTIONAL TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION RELATIVE
              STATUS       TESTSTAT
              RELATIVE KEY TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC     PIC X(4).
       WORKING-STORAGE  SECTION.
       01  TESTKEY      USAGE BINARY-LONG UNSIGNED.
       01  TESTSTAT     PIC XX.
           88  V-OK     VALUE "00" "05".
       PROCEDURE        DIVISION.
           DELETE FILE TEST-FILE.
           OPEN  I-O   TEST-FILE.
           IF NOT V-OK
              DISPLAY "OPEN " TESTSTAT
              END-DISPLAY
              GOBACK
           END-IF.
           MOVE 99 TO TESTKEY.
           START TEST-FILE KEY < TESTKEY
           END-START.
           IF TESTSTAT NOT = "23"
              DISPLAY "START " TESTSTAT
              END-DISPLAY
           END-IF.
           CLOSE TEST-FILE.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([START RELATIVE (2)])
AT_KEYWORDS([fundamental runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT OPTIONAL TEST-FILE
              ASSIGN      "TESTFILE"
              ACCESS       DYNAMIC
              ORGANIZATION RELATIVE
              STATUS       TESTSTAT
              RELATIVE KEY TESTKEY
       .
       DATA             DIVISION.
       FILE             SECTION.
       FD  TEST-FILE.
       01  TEST-REC     PIC X(4).
       WORKING-STORAGE  SECTION.
       01  TESTKEY      USAGE BINARY-LONG UNSIGNED.
       01  TESTSTAT     PIC XX.
           88  V-OK     VALUE "00" "05".
           88  V-ZERO   VALUE "00".
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  I-O   TEST-FILE.
           IF NOT V-OK
              DISPLAY "OPEN " TESTSTAT
              END-DISPLAY
              GOBACK
           END-IF.
           MOVE 3 TO TESTKEY.
           MOVE "0003" TO TEST-REC.
           WRITE TEST-REC INVALID KEY
                 DISPLAY "WRITE " TESTSTAT
                 END-DISPLAY
           END-WRITE.
           MOVE 2 TO TESTKEY.
           MOVE "0002" TO TEST-REC.
           WRITE TEST-REC INVALID KEY
                 DISPLAY "WRITE " TESTSTAT
                 END-DISPLAY
           END-WRITE.
           MOVE 99 TO TESTKEY.
           START TEST-FILE KEY < TESTKEY
           END-START.
           IF NOT V-ZERO
              DISPLAY "START " TESTSTAT
              END-DISPLAY
           END-IF.
           IF TESTKEY NOT = 99
              DISPLAY "TESTKEY " TESTKEY
              END-DISPLAY
           END-IF.
           MOVE  SPACE TO TEST-REC.
           READ  TEST-FILE NEXT
           END-READ.
           IF NOT V-ZERO
              DISPLAY "READ " TESTSTAT
              END-DISPLAY
           END-IF.
           IF TEST-REC NOT = "0003"
              DISPLAY "READ RECORD " TEST-REC
              END-DISPLAY
           END-IF.
           CLOSE TEST-FILE.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([START RELATIVE (3)])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN TO DISK
                    ORGANIZATION RELATIVE
                    ACCESS DYNAMIC RELATIVE KEY file1-key.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic 999.
       WORKING-STORAGE SECTION.
       77  file1-key pic 9(6).
       PROCEDURE DIVISION.
          OPEN OUTPUT file1.
          CLOSE file1.
          OPEN I-O file1.
          MOVE 10 TO file1-key file1-rec.
          WRITE file1-rec.
          MOVE 11 TO file1-key file1-rec.
          WRITE file1-rec.
          MOVE 12 TO file1-key file1-rec.
          WRITE file1-rec.
          MOVE 13 TO file1-key file1-rec.
          WRITE file1-rec.
      *
          MOVE 0 TO file1-key.
          START file1 KEY > file1-key.
          READ file1 NEXT.
          IF (file1-rec <> 10)
             DISPLAY "FAILED: START key > 0".
      *
          MOVE 99 TO file1-key.
          START file1 KEY < file1-key.
          READ file1 NEXT.
          IF (file1-rec <> 13)
             DISPLAY "FAILED: START key < 99".
      *
          MOVE 0 TO file1-key.
          START file1 FIRST.
          READ file1 NEXT.
          IF (file1-rec <> 10)
             DISPLAY "FAILED: START key FIRST".
      *
          MOVE 0 TO file1-key.
          START file1 LAST.
          READ file1 NEXT.
          IF (file1-rec <> 13)
             DISPLAY "FAILED: START key LAST".
      *
          MOVE 0 TO file1-key.
          START file1 KEY >= file1-key.
          READ file1 NEXT.
          IF (file1-rec <> 10)
             DISPLAY "FAILED: START key >= 0".
      *
          MOVE 99 TO file1-key.
          START file1 KEY <= file1-key.
          READ file1 NEXT.
          IF (file1-rec <> 13)
             DISPLAY "FAILED: START key <= 99".
      *
          CLOSE file1.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])
AT_CLEANUP


AT_SETUP([READ on OPTIONAL missing RELATIVE / SEQUENTIAL])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL INFILE  ASSIGN TO
                "missing.txt"
                ORGANIZATION IS RELATIVE
                ACCESS IS SEQUENTIAL
                FILE STATUS IS WSFS.
           SELECT OPTIONAL INFILES ASSIGN TO
                "missings.txt"
                ORGANIZATION IS SEQUENTIAL
                ACCESS IS SEQUENTIAL
                FILE STATUS IS WSFS.
       DATA DIVISION.
       FILE SECTION.
       FD  INFILE.
       01  INREC             PIC X(80).
       FD  INFILES.
       01  INRECS            PIC X(80).
       WORKING-STORAGE SECTION.
       01  WSFS           PIC X(2).
           88  RECORDFOUND VALUE "00".
       01  WSINREC         PIC X(80).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
      *    Open missing file
           OPEN INPUT INFILE
           DISPLAY "R: OPEN INPUT on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '05'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
           OPEN INPUT INFILES
           DISPLAY "S: OPEN INPUT on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '05'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
      *    First read, raise a FS 10 (AT END) which is expected
           READ INFILE INTO WSINREC
           DISPLAY "R: 1st READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '10'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
           READ INFILES INTO WSINREC
           DISPLAY "S: 1st READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '10'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.

      *    Second read, should raise a FS 46 (READ AFTER AT END).
           READ INFILE INTO WSINREC
           DISPLAY "R: 2nd READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '46'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
           READ INFILES INTO WSINREC
           DISPLAY "S: 2nd READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '46'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
           READ INFILE
           DISPLAY "R: 3rd READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '46'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.
           READ INFILES
           DISPLAY "S: 3rd READ on missing optional file = " WSFS " "
                    NO ADVANCING
           IF WSFS = '46'
              DISPLAY "OK"
           ELSE
              DISPLAY "Bad"
           END-IF.

           CLOSE INFILE
           CLOSE INFILES
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[R: OPEN INPUT on missing optional file = 05 OK
S: OPEN INPUT on missing optional file = 05 OK
R: 1st READ on missing optional file = 10 OK
S: 1st READ on missing optional file = 10 OK
R: 2nd READ on missing optional file = 46 OK
S: 2nd READ on missing optional file = 46 OK
R: 3rd READ on missing optional file = 46 OK
S: 3rd READ on missing optional file = 46 OK
], [])

AT_CLEANUP


AT_SETUP([READ on OPTIONAL missing INDEXED file])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL file1 ASSIGN "fileX"
               ORGANIZATION IS INDEXED
               RECORD KEY IS file1-key
               STATUS f-status.

       DATA DIVISION.
       FILE SECTION.
       FD  file1.
       01  file1-key PIC X.

       WORKING-STORAGE SECTION.
       01  f-status PIC XX.

       PROCEDURE DIVISION.
           DELETE FILE file1.
           OPEN INPUT file1.
           IF (f-status <> "05")
               DISPLAY "FAILED OPEN: fs=" f-status
           END-IF
           READ file1
               AT END
                   IF (f-status <> "10")
                       DISPLAY "FAILED READ AT END: fs=" f-status
                   END-IF

               NOT AT END
                   DISPLAY "FAILED READ NO AT END: status " f-status
           END-READ
           CLOSE file1
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([EXTERNAL RELATIVE file])
# FIXME: Check the function of the EXTERNAL file using a second program, too
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT my-file
               ASSIGN TO "somefile"
               ORGANIZATION IS RELATIVE
               RELATIVE KEY IS my-key.

       DATA DIVISION.
       FILE SECTION.
       FD my-file EXTERNAL.
       01 my-record.
           03 my-record-data PIC X(80).

       WORKING-STORAGE SECTION.
       01  my-key PIC 9.

       PROCEDURE DIVISION.
           CONTINUE
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DECLARATIVES procedure referencing])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "./TEST-FILE".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(10).
       WORKING-STORAGE  SECTION.
       01 Z             USAGE BINARY-LONG VALUE 0.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       P01 SECTION.
           USE AFTER ERROR PROCEDURE ON TEST-FILE.
       P0101.
           ADD 1 TO Z.
       END DECLARATIVES.
       MP01 SECTION.
       MP0101.
           OPEN INPUT TEST-FILE.
           PERFORM P0101.
           IF Z NOT = 2
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([DECLARATIVES procedure referencing (multiple)])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "./TEST-FILE".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(10).
       WORKING-STORAGE  SECTION.
       01 Z             USAGE BINARY-LONG VALUE 0.
       PROCEDURE        DIVISION.
       DECLARATIVES.
       P01 SECTION.
           USE AFTER ERROR PROCEDURE ON TEST-FILE.
       P0101.
           ADD 1 TO Z.
       P02 SECTION.
           USE AFTER ERROR PROCEDURE ON OUTPUT.
       P0201.
           ADD 1 TO Z.
       END DECLARATIVES.
       MP01 SECTION.
       MP0101.
           OPEN  INPUT  TEST-FILE.
           PERFORM P01 THRU P02.
           IF Z NOT = 3
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([System routines for directories (1)])
AT_KEYWORDS([extensions runfile CBL_CREATE_DIR CBL_CHANGE_DIR CBL_DELETE_DIR])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 DIR PIC X(4) VALUE 'ABCD'.

        PROCEDURE DIVISION.
        CALL 'CBL_CREATE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'error creating dir ...' END-DISPLAY
        END-IF

        CALL 'CBL_CHANGE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'error changing dir ...' END-DISPLAY
        END-IF

        CALL 'CBL_CHANGE_DIR' USING '..' END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'error changing dir up ...' END-DISPLAY
        END-IF

        CALL 'CBL_DELETE_DIR' USING DIR END-CALL
        IF RETURN-CODE NOT = 0
            DISPLAY 'error deleting dir' END-DISPLAY
        END-IF

        STOP RUN.
])


AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([test -e abcd], [1], [], [])

AT_CLEANUP


AT_SETUP([System routines for directories (2)])
AT_KEYWORDS([runfile extensions
CBL_CREATE_DIR CBL_CREATE_FILE CBL_CLOSE_FILE CBL_CHECK_FILE_EXIST
CBL_DELETE_DIR CBL_PURGE_DIR])

AT_DATA([prog.cob], [
       IDENTIFICATION      DIVISION.
       PROGRAM-ID.         prog.

       DATA                DIVISION.
       WORKING-STORAGE     SECTION.
       01  fh              PIC X(4) COMP-5.
       01  rb              PIC X(8) COMP-X.
       01  cb-bfr          PIC X(4) COMP-X VALUE 16.
       01  w-dirname-1     PIC X(4) VALUE "tmp1".
       01  w-dirname-2     PIC X(9) VALUE "tmp1/tmp2".
       01  w-dirname-3     PIC X(14) VALUE "tmp1/tmp2/tmp3".
       01  w-filename      PIC X(20) VALUE "tmp1/tmp2/tmp3/file1".
       01  w-finfo         PIC X(16).

       PROCEDURE DIVISION.
           CALL "CBL_CREATE_DIR" USING w-dirname-1.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 1: CBL_CREATE_DIR (res=" RETURN-CODE ")"
           END-IF

           CALL "CBL_CREATE_DIR" USING w-dirname-2.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 2: CBL_CREATE_DIR (res=" RETURN-CODE ")"
           END-IF

      *    Should fail because directory does NOT exists yet.
           CALL "CBL_CREATE_FILE"
              USING w-filename, 1, 0, 0, fh.
           IF RETURN-CODE <> 35
              DISPLAY "FAILED 3: CBL_CREATE_FILE expected fail (res="
                      RETURN-CODE ")"
              IF RETURN-CODE = ZERO
                 CALL "CBL_CLOSE_FILE" USING fh
              END-IF
           END-IF

           CALL "CBL_CREATE_DIR" USING w-dirname-3.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 4: CBL_CREATE_DIR (res=" RETURN-CODE ")"
           END-IF

           CALL "CBL_CREATE_FILE"
              USING w-filename, 1, 0, 0, fh.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 5: CBL_CREATE_FILE (res="
                      RETURN-CODE ")"
           END-IF

           CALL "CBL_CLOSE_FILE" USING fh.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 6: CBL_CLOSE_FILE (res="
                      RETURN-CODE ")"
           END-IF

           CALL "CBL_CHECK_FILE_EXIST" USING w-filename, w-finfo.
           IF RETURN-CODE <> 0
              DISPLAY "FAILED 7: CBL_CHECK_FILE_EXIST (res="
                      RETURN-CODE ")"
           END-IF


      *    Should fail because directory is NOT empty.
           CALL "CBL_DELETE_DIR" USING w-dirname-1.
           IF RETURN-CODE = 0
              DISPLAY "FAILED 8: CBL_DELETE_DIR EXPECTED TO FAIL"
           END-IF
      ***********************
      * TO-DO: IMPLEMENT CBL_PURGE_DIR? NOT IN MF OR ACU.
      ***********************
      *    Remove all files (including sub-directories) in tmp1
      *    CALL "CBL_PURGE_DIR" USING w-dirname-1.
      *    IF RETURN-CODE <> 0
      *        DISPLAY "FAILED 9: CBL_PURGE_DIR (res=" RETURN-CODE ")"
      *  END-IF
      *
      *     Should succeed because directory is NOW empty.
      *     CALL "CBL_DELETE_DIR" USING w-dirname-1.
      *     IF RETURN-CODE <> 0
      *         DISPLAY "FAILED 10: CBL_DELETE_DIR (res=" RETURN-CODE ")"
      *     END-IF

           STOP RUN NORMAL
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([System routines for files])
AT_KEYWORDS([extensions runfile CBL_CREATE_FILE CBL_WRITE_FILE CBL_FLUSH_FILE
CBL_OPEN_FILE CBL_READ_FILE CBL_CLOSE_FILE CBL_RENAME_FILE CBL_DELETE_FILE
C$DELETE])

AT_DATA([file1], [
dummy
])
AT_DATA([file2], [
test
])
AT_DATA([file3], [
data
])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID.     prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FNAME        PIC X(256) VALUE 'testtext.txt'.
        01 ACCESS-MODE  PIC X      USAGE COMP-X VALUE 2.
        01 FHANDLE      PIC X(4)   USAGE COMP-X.

        01 OFFSET       PIC X(8)   USAGE COMP-X.
        01 NBYTES       PIC X(4)   USAGE COMP-X.
        01 WRITE-BUFFER PIC X(20).

        PROCEDURE DIVISION.
        CALL 'CBL_CREATE_FILE' USING FNAME 55 11 22 FHANDLE
        END-CALL
        IF RETURN-CODE NOT = -1
           DISPLAY 'Wrong return codes ...' END-DISPLAY
        END-IF
        MOVE 0 TO RETURN-CODE

        CALL 'CBL_CREATE_FILE' USING
        FNAME ACCESS-MODE 0 0 FHANDLE
        END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error creating file ...' END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        MOVE 'TestText.ABCD' TO WRITE-BUFFER.
        MOVE 0 TO OFFSET.
        MOVE 9 TO NBYTES.

        CALL 'CBL_WRITE_FILE' USING
        FHANDLE OFFSET NBYTES '0' WRITE-BUFFER
        END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error writing file ...' END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        CALL 'CBL_FLUSH_FILE' USING FHANDLE END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error flushing file ...' END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        CALL 'CBL_CLOSE_FILE' USING FHANDLE END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error closing file ...' END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        STOP RUN.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID.     prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FNAME        PIC X(256) VALUE 'testtext.txt'.
        01 RET          PIC -9.
        01 FHANDLE      PIC X(4)   USAGE COMP-X.

        01 OFFSET       PIC X(8)   USAGE COMP-X.
        01 NBYTES       PIC X(4)   USAGE COMP-X.
        01 READ-BUFFER  PIC X(10).

        PROCEDURE DIVISION.
        CALL 'CBL_OPEN_FILE' USING FNAME 1 0 0 FHANDLE
        END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error opening file ...' END-DISPLAY
        END-IF

        MOVE SPACES TO READ-BUFFER.
        MOVE 2 TO OFFSET.
        MOVE 9 TO NBYTES.

        CALL 'CBL_READ_FILE' USING
        FHANDLE OFFSET NBYTES 0 READ-BUFFER
        END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error reading file ...'
                   return-code
           END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF
        IF READ-BUFFER NOT = 'stText.' *> text from first test
           DISPLAY 'Wrong readbuffer ...' END-DISPLAY
        END-IF

        CALL 'CBL_CLOSE_FILE' USING FHANDLE END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error closing file ...'
                   return-code
           END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        CALL 'CBL_RENAME_FILE' USING FNAME 'foo.txt' END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error renaming file ...'
                   return-code
           END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF

        CALL 'CBL_DELETE_FILE' USING 'file1' END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error deleting file1 ...'
                   return-code
           END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF
        CALL 'CBL_DELETE_FILE' USING 'file1' END-CALL
        IF RETURN-CODE = 0
           DISPLAY 'no error on deleting file1 for the second time...'
                   return-code
           END-DISPLAY
        END-IF
        MOVE 0 TO RETURN-CODE

        CALL 'C$DELETE' USING 'file2' 'S' END-CALL
        IF RETURN-CODE NOT = 0
           DISPLAY 'error deleting file2 ...'
                   return-code
           END-DISPLAY
           MOVE 0 TO RETURN-CODE
        END-IF
        CALL 'CBL_DELETE_FILE' USING 'file2' END-CALL
        IF RETURN-CODE = 0   *> note: should only return 0 or 1 when in ACUCOBOL mode
           DISPLAY 'no error on deleting file2 for the second time...'
                   return-code
           END-DISPLAY
        END-IF
        MOVE 0 TO RETURN-CODE

        STOP RUN.
])


AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [],
[libcob: prog.cob:15: warning: call to CBL_CREATE_FILE with wrong file_lock: 11
libcob: prog.cob:15: warning: call to CBL_CREATE_FILE with wrong file_dev: 22
libcob: prog.cob:15: warning: call to CBL_OPEN_FILE with wrong access mode: 55
])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([System routine CBL_COPY_FILE])
AT_KEYWORDS([extensions runfile])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE DIVISION.
        DISPLAY "test" END-DISPLAY
        STOP RUN.
])

AT_DATA([prog2.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog2.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 FILE1 PIC X(8) VALUE 'prog.cob'.
        01 FILE2 PIC X(9) VALUE 'prog3.cob'.

        PROCEDURE DIVISION.
        CALL 'CBL_COPY_FILE' USING
        FILE1 FILE2
        END-CALL
        STOP RUN.
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
AT_CHECK([diff prog.cob prog3.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([Default file external name])
AT_KEYWORDS([runfile])

AT_DATA([fexists_signed.c], [

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <libcob.h>

/*
 * Check file is present and correct by comparing
 * its content to a given signature.
 */
COB_EXT_EXPORT int
fexists_signed (char *fid, char *signature, int signature_size)
{
    char *bfr;
    FILE *f;
    int res = -1;

    f = fopen (fid, "r");
    if (f != NULL) {
         bfr = (char *) malloc (signature_size);
         if (1 == fread (bfr, signature_size, 1, f)) {
                if (!memcmp (signature, bfr, signature_size)) {
                     res = 0;
                }
         }
         free (bfr);
    }
    return res;
}
])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec.
          2  file1-date pic x(8).
          2  file1-time pic x(8).
       WORKING-STORAGE SECTION.
       77 erc PIC 9(8) COMP.
       77 rec-size PIC 9(8) COMP VALUE 16.
       PROCEDURE DIVISION.
           ACCEPT file1-date FROM DATE YYYYMMDD.
           ACCEPT file1-time FROM TIME.
           OPEN OUTPUT file1.
           WRITE file1-rec.
           CLOSE file1.
           CALL "fexists_signed" USING
                BY REFERENCE "./file1" file1-rec
                BY VALUE rec-size
                RETURNING erc.
           IF (erc <> 0)
              DISPLAY "FAILED file1".
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE fexists_signed.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([unset COB_FILE_PATH; ./prog], [0])

AT_CLEANUP

### TO-DO: Move "ASSIGN expansion" test here.
### TO-DO: Already in run_extensions.at.

AT_SETUP([SEQUENTIAL basic I/O])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK ORGANIZATION SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x.
       PROCEDURE DIVISION.
           DELETE FILE file1.
           OPEN OUTPUT file1.
           MOVE "A" TO file1-rec.
           WRITE file1-rec.
           CLOSE file1.
           OPEN INPUT file1.
           READ file1.
           IF (file1-rec <> "A")
              display "FAILED".
           CLOSE file1.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL basic I/O])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK ORGANIZATION LINE SEQUENTIAL.
       SELECT file2 ASSIGN DISK ORGANIZATION LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x.
       FD file2.
       1  file2-rec pic xx.
       PROCEDURE DIVISION.
           DELETE FILE file1, file2
           OPEN OUTPUT file1, file2
           MOVE "A" TO file1-rec, file2-rec
           WRITE file1-rec
           WRITE file2-rec
           MOVE " " TO file1-rec, file2-rec
           WRITE file1-rec
           WRITE file2-rec
           WRITE file1-rec FROM "A"
           WRITE file2-rec FROM "AA"
           WRITE file1-rec FROM " "
           WRITE file2-rec FROM " A"
           CLOSE file1, file2
           OPEN INPUT file1, file2
           READ file1
           IF file1-rec NOT = "A"
              display "FAILED 1 file1 - '" file1-rec "'".
           READ file2
           IF file2-rec NOT = "A"
              display "FAILED 1 file2 - '" file2-rec "'".
           READ file1
           IF file1-rec NOT = SPACE
              display "FAILED 2 file1 - '" file1-rec "'".
           READ file2
           IF file2-rec NOT = SPACES
              display "FAILED 2 file2 - '" file2-rec "'".
           READ file1
           IF file1-rec NOT = "A"
              display "FAILED 3 file1 - '" file1-rec "'".
           READ file2
           IF file2-rec NOT = "AA"
              display "FAILED 3 file2 - '" file2-rec "'".
           READ file1
           IF file1-rec NOT = SPACE
              display "FAILED 4 file1 - '" file1-rec "'".
           READ file2
           IF file2-rec NOT = " A"
              display "FAILED 4 file2 - '" file2-rec "'".
           CLOSE file1, file2.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL record truncation])
AT_KEYWORDS([runfile])

AT_DATA([TEST-FILE],
[a
ab
abc
abcd
abcde
abcdef
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS LINE SEQUENTIAL.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN INPUT TEST-FILE.
           PERFORM 6 TIMES
               READ TEST-FILE
               DISPLAY "(" TEST-REC ")"
           END-PERFORM
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[(a   )
(ab  )
(abc )
(abcd)
(abcd)
(abcd)
])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file I/O with variable records])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN DISK.

       DATA DIVISION.
       FILE SECTION.
       FD  f RECORD VARYING FROM 10 TO 20 DEPENDING rec-size.
       01  f-rec.
           02  f-x OCCURS 20 PIC X.

       WORKING-STORAGE SECTION.
       01  rec-size PIC 99.
       01  i PIC 99.
       01  1-template VALUE "+12345678++12345678+".
           02  1-x OCCURS 20 PIC X.

       PROCEDURE DIVISION.
           OPEN OUTPUT f
           PERFORM VARYING rec-size FROM 20 BY -1 UNTIL rec-size < 10
               WRITE f-rec FROM 1-template
           END-PERFORM
           CLOSE f

           OPEN INPUT f
      *    rec-size should not influence READ
           MOVE 15 TO rec-size
           PERFORM VARYING i FROM 20 BY -1 UNTIL i < 10
               READ f
                   AT END
                       DISPLAY "Failed: EOF"
                       STOP RUN ERROR
               END-READ

      *        Note the characters f-rec (rec-size + 1:) are all undefined,
      *        hence the refmod (1:rec-size).
               DISPLAY rec-size ": >" f-rec (1:rec-size) "<"
               IF rec-size NOT = i
                   DISPLAY "Failed: bad record size"
                   STOP RUN ERROR
               END-IF
               IF f-x (rec-size) NOT = 1-x (rec-size)
                   DISPLAY "Failed: bad data"
                   STOP RUN ERROR
               END-IF
           END-PERFORM
           CLOSE f
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[20: >+12345678++12345678+<
19: >+12345678++12345678<
18: >+12345678++1234567<
17: >+12345678++123456<
16: >+12345678++12345<
15: >+12345678++1234<
14: >+12345678++123<
13: >+12345678++12<
12: >+12345678++1<
11: >+12345678++<
10: >+12345678+<
])

AT_CLEANUP


AT_SETUP([LINE SEQUENTIAL file I/O with variable records])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN DISK
               LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.
       FD  f RECORD VARYING FROM 10 TO 20 DEPENDING rec-size.
       01  f-rec.
           02  f-x OCCURS 20 PIC X.

       WORKING-STORAGE SECTION.
       01  rec-size PIC 99.
       01  i PIC 99.
       01  1-template VALUE "+12345678++12345678+".
           02  1-x OCCURS 20 PIC X.

       PROCEDURE DIVISION.
           OPEN OUTPUT f
           PERFORM VARYING rec-size FROM 20 BY -1 UNTIL rec-size < 10
               WRITE f-rec FROM 1-template
           END-PERFORM
           CLOSE f

           OPEN INPUT f
      *    rec-size should not influence READ
           MOVE 15 TO rec-size
           PERFORM VARYING i FROM 20 BY -1 UNTIL i < 10
               READ f
                   AT END
                       DISPLAY "Failed: EOF"
                       STOP RUN ERROR
               END-READ

               DISPLAY rec-size ": >" f-rec (1:rec-size) "<"
               IF rec-size NOT = i
                   DISPLAY "Failed: bad record size"
                   STOP RUN ERROR
               END-IF
               IF f-x (rec-size) NOT = 1-x (rec-size)
                   DISPLAY "Failed: bad data"
                   STOP RUN ERROR
               END-IF
           END-PERFORM
           CLOSE f
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[20: >+12345678++12345678+<
19: >+12345678++12345678<
18: >+12345678++1234567<
17: >+12345678++123456<
16: >+12345678++12345<
15: >+12345678++1234<
14: >+12345678++123<
13: >+12345678++12<
12: >+12345678++1<
11: >+12345678++<
10: >+12345678+<
])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file REWRITE])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.  prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT file1 ASSIGN DISK.

       DATA DIVISION.
       FILE SECTION.
       FD  file1.
       01  file1-rec.
           02  file1-serial-1 PIC 9(6).
           02  file1-xseen PIC 9(4).
           02  file1-serial-2 PIC 9(6).

       WORKING-STORAGE SECTION.
       01  w-count PIC 9(6) VALUE 0.
       01  w-eof PIC 9 VALUE 0.
           88  eof VALUE 1 FALSE 0.
       01  w-abort PIC 9 VALUE 0.
           88  abort VALUE 1 FALSE 0.

       PROCEDURE DIVISION.
           OPEN OUTPUT file1
           PERFORM VARYING w-count FROM 1 BY 1
                   UNTIL w-count > 20
               MOVE w-count TO file1-serial-1
               MOVE 0 TO file1-xseen
               ADD 100 w-count GIVING file1-serial-2
               WRITE file1-rec
           END-PERFORM
           CLOSE file1

           OPEN I-O file1
           SET eof TO FALSE
           PERFORM VARYING w-count FROM 1 BY 1
                   UNTIL eof OR abort
               READ file1
                   AT END
                       SET eof TO TRUE

                   NOT AT END
                       IF (file1-serial-1 <> w-count)
                           DISPLAY "FAIL 1: " w-count " :: "
                               file1-serial-1
                           SET abort TO TRUE
                       ELSE IF (file1-serial-2 <> (100 + w-count))
                           DISPLAY "FAIL 2: " w-count " :: "
                               file1-serial-2
                           SET abort TO TRUE
                       ELSE IF (file1-xseen <> 0)
                           DISPLAY "FAIL 3: " w-count " :: " file1-xseen
                           SET abort TO TRUE
                       ELSE IF (w-count = 5 OR 10 OR 15 OR 20)
                           ADD 1000 w-count GIVING file1-serial-2
                           ADD 1 TO file1-xseen
                           REWRITE file1-rec
                       END-IF
               END-READ
           END-PERFORM
           IF NOT ((w-count = 22) AND eof)
               DISPLAY "FAIL 4"
           END-IF
           CLOSE file1

           OPEN INPUT file1
           SET eof TO FALSE
           SET abort TO FALSE
           PERFORM VARYING w-count FROM 1 BY 1
                   UNTIL eof OR abort
               READ file1
                   AT END
                       SET eof TO TRUE

                   NOT AT END
                       IF (file1-serial-1 <> w-count)
                           DISPLAY "FAIL 5"
                           SET abort TO TRUE
                       ELSE IF (w-count = 5 OR 10 OR 15 OR 20)
                           IF NOT ((file1-serial-2 = (1000 + w-count))
                                   AND (file1-xseen = 1))
                               DISPLAY "FAIL 6"
                               SET abort TO TRUE
                           END-IF
                       ELSE
                           IF NOT ((file1-serial-2 = (100 + w-count))
                                   AND (file1-xseen = 0))
                               DISPLAY "FAIL 7"
                               SET abort TO TRUE
                           END-IF
                       END-IF
               END-READ
           END-PERFORM
           CLOSE file1
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file with LOCK MODE EXCLUSIVE])
AT_KEYWORDS([runfile])

AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           lock mode is exclusive
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file with OPEN WITH LOCK])
AT_KEYWORDS([runfile])

AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open i-o file1 with lock.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file with SHARING NO])
AT_KEYWORDS([runfile])

AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           sharing no
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([SEQUENTIAL file with SHARING READ ONLY])
AT_KEYWORDS([runfile])

AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           sharing read only
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open i-o file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           open input file1.
           if fs not = "00"
              display "FAILED: " fs
           else
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


## Check successor is blocked from exclusive open on file already open.
AT_SETUP([SEQUENTIAL file with blocked lock])
AT_KEYWORDS([runfile])

AT_XFAIL_IF([true])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open i-o file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "00"
              display "FAILED: " fs
              stop run
           end-if.
           close file1
           open input file1 with lock.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([RELATIVE SEQUENTIAL basic I/O])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK ORGANIZATION RELATIVE.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x.
       PROCEDURE DIVISION.
           DELETE FILE file1.
           OPEN OUTPUT file1.
           MOVE "A" TO file1-rec.
           WRITE file1-rec.
           CLOSE file1.
           OPEN INPUT file1.
           READ file1.
           IF (file1-rec <> "A")
              display "FAILED".
           CLOSE file1.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([RELATIVE RANDOM basic I/O])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN DISK
          ORGANIZATION RELATIVE
          ACCESS RANDOM RELATIVE KEY file1-key.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec pic x.
       WORKING-STORAGE SECTION.
       77  file1-key pic 99.
       PROCEDURE DIVISION.
           DELETE FILE file1.
           OPEN OUTPUT file1.
           MOVE 1 to file1-key.
           MOVE "A" TO file1-rec.
           WRITE file1-rec.
           MOVE 2 to file1-key.
           MOVE "B" TO file1-rec.
           WRITE file1-rec.
           MOVE 3 to file1-key.
           MOVE "C" TO file1-rec.
           WRITE file1-rec.
           CLOSE file1.
           OPEN INPUT file1.
           MOVE 2 to file1-key.
           READ file1.
           IF (file1-rec <> "B")
              display "FAILED".
           MOVE 1 to file1-key.
           READ file1.
           IF (file1-rec <> "A")
              display "FAILED".
           CLOSE file1.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([RELATIVE SEQUENTIAL with variable records])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN DISK
               ORGANIZATION RELATIVE.

       DATA DIVISION.
       FILE SECTION.
       FD  f RECORD VARYING FROM 10 TO 20 DEPENDING rec-size.
       01  f-rec.
           02  f-x OCCURS 20 PIC X.

       WORKING-STORAGE SECTION.
       01  rec-size PIC 99.
       01  i PIC 99.
       01  1-template VALUE "+12345678++12345678+".
           02  1-x OCCURS 20 PIC X.

       PROCEDURE DIVISION.
           OPEN OUTPUT f
           PERFORM VARYING rec-size FROM 20 BY -1 UNTIL rec-size < 10
               WRITE f-rec FROM 1-template
           END-PERFORM
           CLOSE f

           OPEN INPUT f
      *    rec-size should not influence READ
           MOVE 15 TO rec-size
           PERFORM VARYING i FROM 20 BY -1 UNTIL i < 10
               READ f
                   AT END
                       DISPLAY "Failed: EOF"
                       STOP RUN ERROR
               END-READ

               DISPLAY rec-size ": >" f-rec (1:rec-size) "<"
               IF rec-size NOT = i
                   DISPLAY "Failed: bad record size"
                   STOP RUN ERROR
               END-IF
               IF f-x (rec-size) NOT = 1-x (rec-size)
                   DISPLAY "Failed: bad data"
                   STOP RUN ERROR
               END-IF
           END-PERFORM
           CLOSE f
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[20: >+12345678++12345678+<
19: >+12345678++12345678<
18: >+12345678++1234567<
17: >+12345678++123456<
16: >+12345678++12345<
15: >+12345678++1234<
14: >+12345678++123<
13: >+12345678++12<
12: >+12345678++1<
11: >+12345678++<
10: >+12345678+<
])

AT_CLEANUP


AT_SETUP([INDEXED SEQUENTIAL basic I/O])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT fileX ASSIGN DISK ORGANIZATION INDEXED
           RECORD KEY fileX-key.
       DATA DIVISION.
       FILE SECTION.
       FD fileX.
       1  fileX-rec.
          2 fileX-key pic x(6).
          2 fileX-data pic x(10).
       PROCEDURE DIVISION.
           OPEN OUTPUT fileX.
           MOVE ALL "A" TO fileX-rec.
           WRITE fileX-rec.
           CLOSE fileX.
           OPEN INPUT fileX.
           READ fileX.
           IF (fileX-rec <> ALL "A")
              display "FAILED".
           CLOSE fileX.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([INDEXED SEQUENTIAL with variable records])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_SKIP_IF([test "$COB_HAS_ISAM" = "disam"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN DISK
               INDEXED
               RECORD KEY f-key
               ACCESS RANDOM.

       DATA DIVISION.
       FILE SECTION.
       FD  f RECORD VARYING FROM 12 TO 22 DEPENDING rec-size.
       01  f-rec.
           02  f-key PIC 99.
           02  f-data.
               03  f-x OCCURS 20 PIC X.

       WORKING-STORAGE SECTION.
       01  rec-size PIC 99.
       01  1-template VALUE "+12345678++12345678+".
           02  1-x OCCURS 20 PIC X.

       PROCEDURE DIVISION.
           OPEN OUTPUT f
           MOVE 1 TO f-key
           PERFORM VARYING rec-size FROM 22 BY -1 UNTIL rec-size < 12
               MOVE 1-template TO f-data
               WRITE f-rec
               ADD 1 TO f-key
           END-PERFORM
           CLOSE f

           OPEN INPUT f
      *    rec-size should not influence READ
           MOVE 15 TO rec-size
           PERFORM VARYING f-key FROM 1 BY 1 UNTIL f-key > 11
               READ f
                   AT END
                       DISPLAY "Failed: EOF"
                       STOP RUN ERROR
               END-READ

               DISPLAY rec-size ": >" f-rec (3:rec-size - 2) "<"
               IF rec-size NOT = (22 - f-key) + 1
                   DISPLAY "Failed: bad record size - " rec-size
                   STOP RUN ERROR
               END-IF
               IF f-x (rec-size - 2) NOT = 1-x (rec-size - 2)
                   DISPLAY "Failed: bad data - " f-data
                   STOP RUN ERROR
               END-IF
           END-PERFORM
           CLOSE f
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[22: >+12345678++12345678+<
21: >+12345678++12345678<
20: >+12345678++1234567<
19: >+12345678++123456<
18: >+12345678++12345<
17: >+12345678++1234<
16: >+12345678++123<
15: >+12345678++12<
14: >+12345678++1<
13: >+12345678++<
12: >+12345678+<
])

AT_CLEANUP


AT_SETUP([INDEXED file with LOCK MODE EXCLUSIVE])
AT_KEYWORDS([runfile])

## TO-DO: Support INDEXED file sharing/locking.
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           lock mode is exclusive
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([INDEXED file with OPEN WITH LOCK])
AT_KEYWORDS([runfile])

## TO-DO: Support INDEXED file sharing/locking.
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([true])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1 with lock.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([INDEXED file with SHARING NO])
AT_KEYWORDS([runfile])

## TO-DO: Support INDEXED file sharing/locking.
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           sharing no
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([INDEXED file with SHARING READ ONLY])
AT_KEYWORDS([runfile])

## TO-DO: Support INDEXED file sharing/locking.
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([false])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           sharing read only
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open i-o file1.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           open input file1.
           if fs not = "00"
              display "FAILED: " fs
           else
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


## Check successor is blocked from exclusive open on file already open.
AT_SETUP([INDEXED file with blocked lock])
AT_KEYWORDS([runfile])

## TO-DO: Support INDEXED file sharing/locking.
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([true])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           close file1.
           open input file1.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           if fs not = "00"
              display "FAILED: " fs
              stop run
           end-if.
           close file1
           open input file1 with lock.
           if fs not = "61"
              display "FAILED: " fs
              close file1
           end-if.
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP

## Try to read locked record
AT_SETUP([INDEXED file with LOCK AUTOMATIC (1)])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_XFAIL_IF([true])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           lock mode is automatic
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           move "X" to file1-key.
           write file1-rec.
           if fs not = "00"
              display "FAILED 1::w fs=" fs.
           close file1.
           open i-o file1.
           move "X" to file1-key.
           read file1.
           if fs not = "00"
              display "FAILED 1::r fs=" fs.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           lock mode is automatic
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open i-o file1.
           move "X" to file1-key.
           read file1.
           if fs not = "61"
              display "FAILED 2::r " fs.
           close file1
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])


AT_CLEANUP

## Read unlocked record
AT_SETUP([INDEXED file with LOCK AUTOMATIC (2)])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           lock mode is automatic
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           move "X" to file1-key.
           write file1-rec.
           if fs not = "00"
              display "FAILED 1::w fs=" fs.
           close file1.
           open i-o file1.
           move "X" to file1-key.
           read file1.
           if fs not = "00"
              display "FAILED 1::r fs=" fs.
           rewrite file1-rec.
           if fs not = "00"
              display "FAILED 1::rw fs=" fs.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open input file1.
           move "X" to file1-key.
           read file1.
           if fs not = "00"
              display "FAILED 2::r " fs
           end-if.
           close file1
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([INDEXED file with LOCK MANUAL])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog1.cob], [
       identification division.
       program-id. prog1.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           lock mode is manual
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       1    os-check   pic x(7).
         88 os-is-windows-or-dos values 'WINDOWS' 'FREEDOS'.
       78  callee       value "./prog2".
       78  callee-wdos  value ".\prog2".
       procedure division.
           open output file1.
           move "X" to file1-key.
           write file1-rec.
           if fs not = "00"
              display "FAILED 1::w fs=" fs.
           close file1.
           open i-o file1.
           move "X" to file1-key.
           read file1 with lock.
           if fs not = "00"
              display "FAILED 1::r fs=" fs.
           accept os-check from environment "OS".
           if os-check = spaces
             accept os-check from environment "OS_NAME".
           inspect os-check converting "werfdosin" to "WERFDOSIN".
           if os-is-windows-or-dos
             call "SYSTEM" using callee-wdos
           else
             call "SYSTEM" using callee.
           close file1.
           stop run.
])
AT_DATA([prog2.cob], [
       identification division.
       program-id. prog2.
       environment division.
       input-output section.
       file-control.
       select file1 assign disk
           access mode is random
           organization indexed
           record key file1-key
           status is fs.
       data division.
       file section.
       fd file1.
       1    file1-rec.
        2   file1-key pic x.
       working-storage section.
       1    fs pic xx.
       procedure division.
           open i-o file1.
           if fs not = "61"
              display "FAILED 2::r " fs
           end-if.
           move "X" to file1-key.
           read file1.
           close file1
           stop run.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog1], [0])

AT_CLEANUP


AT_SETUP([START INDEXED])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN TO "./file1X"
                    ORGANIZATION INDEXED
                    ACCESS DYNAMIC RECORD KEY file1-key.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec.
          2  file1-key pic 999.
          2  file1-data pic 999.
       PROCEDURE DIVISION.
          OPEN OUTPUT file1.
          CLOSE file1.
          OPEN I-O file1.
          MOVE 10 TO file1-key file1-data.
          WRITE file1-rec.
          MOVE 11 TO file1-key file1-data.
          WRITE file1-rec.
          MOVE 12 TO file1-key file1-data.
          WRITE file1-rec.
          MOVE 13 TO file1-key file1-data.
          WRITE file1-rec.
      *
          MOVE 0 TO file1-key.
          START file1 KEY > file1-key.
          READ file1 NEXT.
          IF (file1-data <> 10)
             DISPLAY "FAILED: START key > 0".
      *
          MOVE 99 TO file1-key.
          START file1 KEY < file1-key.
          READ file1 NEXT.
          IF (file1-data <> 13)
             DISPLAY "FAILED: START key < 99".
      *
          MOVE 999 TO file1-key.
          START file1 FIRST.
          READ file1 NEXT.
          IF (file1-data <> 10)
             DISPLAY "FAILED: START key FIRST".
      *
          MOVE 0 TO file1-key.
          START file1 LAST.
          READ file1 NEXT.
          IF (file1-data <> 13)
             DISPLAY "FAILED: START key LAST".
      *
          MOVE 0 TO file1-key.
          START file1 KEY >= file1-key.
          READ file1 NEXT.
          IF (file1-data <> 10)
             DISPLAY "FAILED: START key >= 0".
      *
          MOVE 99 TO file1-key.
          START file1 KEY <= file1-key.
          READ file1 NEXT.
          IF (file1-data <> 13)
             DISPLAY "FAILED: START key <= 99".

          CLOSE file1.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


AT_SETUP([INDEXED partial keys])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL f ASSIGN "fileX"
               ORGANIZATION INDEXED
               ACCESS DYNAMIC
               RECORD KEY f-key1
               ALTERNATE RECORD f-key2
               ALTERNATE RECORD f-key3 DUPLICATES
               STATUS f-status.

       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-rec.
           02  f-key1.
               03  f-key1-1 PIC X(3).
               03  f-key1-2 PIC X(3).
           02  f-key2.
               03  f-key2-1 PIC X(3).
               03  f-key2-2 PIC X(3).
           02  f-key3.
               03  f-key3-1 PIC X(3).
               03  f-key3-2 PIC X(3).
           02  file1-serial PIC 99.

       WORKING-STORAGE SECTION.
       01  f-status PIC XX.
       01  w-serial PIC 99 VALUE 0.

       PROCEDURE DIVISION.
           DELETE FILE f
           OPEN I-O f
           MOVE "AAAAAAaaaaaaXX----" TO f-rec
           PERFORM write-f
           MOVE "AAAAABaaaaabXX----" TO f-rec
           PERFORM write-f
           MOVE "AAAABBaaaabbXX----" TO f-rec
           PERFORM write-f
           MOVE "AAABBBaaabbbXXX---" TO f-rec
           PERFORM write-f
           MOVE "AABBBBaabbbbXXX---" TO f-rec
           PERFORM write-f
           MOVE "ABBBBBabbbbbXXX---" TO f-rec
           PERFORM write-f
           MOVE "BBBBBBbbbbbbXXX---" TO f-rec
           PERFORM write-f

           MOVE "AAB" TO f-key1-1
           MOVE "~~~" TO f-key1-2
           START f KEY = f-key1-1
           READ f NEXT
           IF (f-status <> "00") OR
                   (file1-serial <> 4)
               DISPLAY "FAILED 1: status " f-status
           END-IF

           MOVE "AAB" TO f-key1-1
           MOVE "~~~" TO f-key1-2
           START f KEY < f-key1-1
           READ f PREVIOUS
           IF (f-status <> "00") OR
                   (file1-serial <> 3)
               DISPLAY "FAILED 2: status " f-status
           END-IF

           MOVE "AAA" TO f-key1-1
           MOVE "~~~" TO f-key1-2
           START f KEY > f-key1-1
           READ f NEXT
           IF (f-status <> "00") OR
                   (file1-serial <> 4)
               DISPLAY "FAILED 3: status " f-status
                       "serial: " file1-serial
           END-IF

           MOVE "aab" TO f-key2-1
           MOVE "~~~" TO f-key2-2
           START f KEY = f-key2-1
           READ f NEXT
           IF (f-status <> "00") OR
                   (file1-serial <> 4)
               DISPLAY "FAILED 4: status " f-status
                       "serial: " file1-serial
           END-IF

           MOVE "aab" TO f-key2-1
           MOVE "~~~" TO f-key2-2
           START f KEY < f-key2-1
           READ f PREVIOUS
           IF (f-status <> "00") OR
                   (file1-serial <> 3)
               DISPLAY "FAILED 5: status " f-status
                       "serial: " file1-serial
           END-IF

           MOVE "aaa" TO f-key2-1
           MOVE "~~~" TO f-key2-2
           START f KEY > f-key2-1
           READ f NEXT
           IF (f-status <> "00") OR
                   (file1-serial <> 4)
               DISPLAY "FAILED 6: status " f-status
                       "serial: " file1-serial
           END-IF

           MOVE "XX-" TO f-key3-1
           START f KEY > f-key3-1
           READ f NEXT
      *    Not yet implemented: Return file-status "02" if duplicates exist
      *    IF (f-status <> "02") OR
           IF (f-status <> "00") OR
                   (file1-serial <> 3)
               DISPLAY "FAILED 7: status " f-status
                       "serial: " file1-serial
           END-IF
           CLOSE f
           STOP RUN
           .
       write-f.
           MOVE w-serial TO file1-serial
           WRITE f-rec
           ADD 1 TO w-serial
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])

AT_CLEANUP


# Write records to a file with 3 keys declared. Check files with a subset of the
# keys can access file and that a record added by such files gets indexed for
# the 2nd and 3rd keys.
AT_SETUP([INDEXED undeclared keys])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT file1 ASSIGN TO "./fileX"
                    ORGANIZATION INDEXED
                    ACCESS RANDOM
                    RECORD KEY file1-key1
                    ALTERNATE RECORD KEY file1-key2
                    ALTERNATE RECORD KEY file1-key3.
       SELECT file2 ASSIGN TO "./fileX"
                    ORGANIZATION INDEXED
                    ACCESS RANDOM
                    RECORD KEY file2-key1
                    ALTERNATE RECORD KEY file2-key2.
       SELECT file3 ASSIGN TO "./fileX"
                    ORGANIZATION INDEXED
                    ACCESS RANDOM
                    RECORD KEY file3-key1.
       DATA DIVISION.
       FILE SECTION.
       FD file1.
       1  file1-rec.
          2  file1-key1 pic 999.
          2  file1-key2 pic 999.
          2  file1-key3 pic 999.
          2  file1-data pic 999.
       FD file2.
       1  file2-rec.
          2  file2-key1 pic 999.
          2  file2-key2 pic 999.
          2  file2-key3 pic 999.
          2  file2-data pic 999.
       FD file3.
       1  file3-rec.
          2  file3-key1 pic 999.
          2  file3-key2 pic 999.
          2  file3-key3 pic 999.
          2  file3-data pic 999.
       WORKING-STORAGE SECTION.
       77 ix pic 9(6).
       PROCEDURE DIVISION.
          OPEN OUTPUT file1.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             MOVE ix TO file1-key1 file1-data
             ADD 100 TO ix GIVING file1-key2
             ADD 200 TO ix GIVING file1-key3
             WRITE file1-rec
          END-PERFORM.
          CLOSE file1.
      *
          OPEN INPUT file1.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             MOVE ix TO file1-key1
             READ file1 KEY file1-key1
             IF (file1-data <> ix)
                DISPLAY "FAILED 1-1"
             END-IF
          END-PERFORM.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             ADD 100 TO ix GIVING file1-key2
             READ file1 KEY file1-key2
             IF (file1-data <> ix)
                DISPLAY "FAILED 1-2"
             END-IF
          END-PERFORM.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             ADD 200 TO ix GIVING file1-key3
             READ file1 KEY file1-key3
             IF (file1-data <> ix)
                DISPLAY "FAILED 1-3"
             END-IF
          END-PERFORM.
          CLOSE file1.
      *
          OPEN INPUT file2.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             MOVE ix TO file2-key1
             READ file2 KEY file2-key1
             IF (file2-data <> ix)
                DISPLAY "FAILED 2-1"
             END-IF
          END-PERFORM.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             ADD 100 TO ix GIVING file2-key2
             READ file2 KEY file2-key2
             IF (file2-data <> ix)
                DISPLAY "FAILED 2-2"
             END-IF
          END-PERFORM.
          CLOSE file2.
      *
          OPEN INPUT file3.
          PERFORM VARYING ix FROM 1 BY 1
             UNTIL ix > 10
             MOVE ix TO file3-key1
             READ file3 KEY file3-key1
             IF (file3-data <> ix)
                DISPLAY "FAILED 3-1"
             END-IF
          END-PERFORM.
          CLOSE file3.
      *
      *   Insert rec via file with only 1 index declared
          OPEN I-O file3.
          MOVE 20 TO ix.
          MOVE ix TO file3-key1 file3-data
          ADD 100 TO ix GIVING file3-key2
          ADD 200 TO ix GIVING file3-key3
          WRITE file3-rec
          CLOSE file3
      *
      *   Check new rec is visible in other files
          OPEN INPUT file1.
          MOVE 10 TO file1-key1.
          READ file1 KEY file1-key1.
          IF (file1-data <> 10)
             DISPLAY "FAILED 1-4".
          MOVE SPACES TO file1-rec.
          MOVE 110 TO file1-key2.
          READ file1 KEY file1-key2.
          IF (file1-data <> 10)
             DISPLAY "FAILED 1-5".
          MOVE SPACES TO file1-rec.
          MOVE 210 TO file1-key3.
          READ file1 KEY file1-key3.
          IF (file1-data <> 10)
             DISPLAY "FAILED 1-6".
          CLOSE file1.
      *
          OPEN INPUT file2.
          MOVE 10 TO file2-key1.
          READ file2 KEY file2-key1.
          IF (file2-data <> 10)
             DISPLAY "FAILED 2-3".
          MOVE SPACES TO file2-rec.
          MOVE 110 TO file2-key2.
          READ file2 KEY file2-key2.
          IF (file2-data <> 10)
             DISPLAY "FAILED 2-4".
          CLOSE file2.
          STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([export IX_OPTIONS='keycheck=off'
$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([READ INPUT pipe & WRITE OUTPUT pipe])
AT_KEYWORDS([runfile])

# not implemented in 2.2+
AT_XFAIL_IF([true])

AT_DATA([test-data-in],
[NAME
STREET
TOWN
COUNTRY
])

AT_DATA([provider], [
cat $1
])

AT_DATA([consumer], [
cat
])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       environment division.
       configuration section.
       input-output section.
       file-control.
           select pipe-in
               organization line sequential
               access sequential
               assign to w-command
               status is f-status.
           select pipe-out
               organization line sequential
               access sequential
               assign to w-command
               status is f-status.
       data division.
       file section.
       fd  pipe-in.
       1   pipe-msg-in pic x(132).
       fd  pipe-out.
       1   pipe-msg-out pic x(132).
       working-storage section.
       77  f-status pic xx.
           88  f-status-ok value "00".
       77  w-command pic x(100).
       procedure division.
           move "< sh ./provider ./test-data-in"
             to w-command.
           open input pipe-in.
           if not f-status-ok
              display "FAILED: OPEN INPUT"
              stop run
           end-if.
           move "> sh ./consumer > ./test-data-out"
             to w-command.
           open output pipe-out.
           if not f-status-ok
              display "FAILED: OPEN OUTPUT"
              stop run
           end-if.
           perform until not f-status-ok
              read pipe-in
              if f-status-ok
                 perform x01-100-map
                 write pipe-msg-out
              end-if
           end-perform.
           close pipe-in.
           close pipe-out.
           stop run.
      *
       x01-100-map.
           move "*** Jacques Tati ***" to pipe-msg-out.
           if (pipe-msg-in = "COUNTRY")
              move "Country: FRANCE" to pipe-msg-out.
           if (pipe-msg-in = "TOWN")
              move "Town: DEAUVILLE" to pipe-msg-out.
           if (pipe-msg-in = "NAME")
              move "Name: M. Hulot" to pipe-msg-out.
           if (pipe-msg-in = "STREET")
              move "Street: Rue des Anglais" to pipe-msg-out.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0])
AT_CHECK([cat test-data-out], [0],
[Name: M. Hulot
Street: Rue des Anglais
Town: DEAUVILLE
Country: FRANCE
])

AT_CLEANUP


AT_SETUP([EXTFH: using ISAM callback])
AT_KEYWORDS([runfile EXTFH])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

           SELECT TSTFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3).
             15  CM-CUST-NNN                   PICTURE X(5).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSTFL-RECORD.
           05  TSTFL-REC.
           10  TS-CUST-NUM                     PICTURE X(8).
           10  TS-STATUS                       PICTURE X.
           10  TS-COMPANY                      PICTURE X(25).
           10  TS-ADDRESS-1                    PICTURE X(25).
           10  TS-ADDRESS-2                    PICTURE X(25).
           10  TS-ADDRESS-3                    PICTURE X(25).
           10  TS-TELEPHONE                    PICTURE 9(10).
           10  TS-DP-MGR                       PICTURE X(25).
           10  TS-MACHINE                      PICTURE X(8).
           10  TS-MEMORY                       PICTURE X(4).
           10  TS-DISK                         PICTURE X(8).
           10  TS-TAPE                         PICTURE X(8).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8).
           10  C2-COMPANY                      PICTURE X(25).
           10  C2-DISK                         PICTURE X(8).
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4.
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  FILLER PICTURE XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           OPEN OUTPUT TSPFILE
           CLOSE TSPFILE.

           OPEN I-O TSPFILE
           MOVE '99' TO CUST-STAT
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT
                       " opening TSTFILE, Record size different"
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different"
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           PERFORM LOADFLAT.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT
               " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD
           READ  TSTFILE NEXT RECORD
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD
           READ  TSPFILE NEXT RECORD

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                         "00/02 as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       "00/02 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                        "00/02 as expected"
                         UPON CONSOLE
           END-IF.
           DELETE TSPFILE.
           CLOSE TSPFILE.

       LOADFLAT.
           OPEN OUTPUT FLATFILE.
           PERFORM FLAT-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB
                             OR SUB > 5.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           MOVE 3 TO REC-NUM
           READ FLATFILE
           MOVE 999 TO REC-NUM
           READ FLATFILE
           CLOSE FLATFILE.

       FLAT-RECORD.

           MOVE SPACES                       TO TSP2-RECORD.
           MOVE SUB                          TO REC-NUM.
           MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           IF  ODD-RECORD
               MOVE "8417"                   TO C2-DISK
           ELSE
               MOVE "8470"                   TO C2-DISK.
           WRITE TSP2-RECORD.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <libcob.h>

static char *txtOpCode(int opCode);

/*********************************************************
 *  TSTFH - External File Handler entry point.
*********************************************************/

COB_EXT_EXPORT int
TSTFH (unsigned char *opCodep, FCD3 *fcd)
{
   unsigned int   opCode;

   if (*opCodep == 0xfa)
      opCode = 0xfa00 + opCodep[1];
   else
      opCode = opCodep[1];

   if (fcd->fileOrg == ORG_LINE_SEQ
    || fcd->fileOrg == ORG_SEQ
    || fcd->fileOrg == ORG_INDEXED
    || fcd->fileOrg == ORG_RELATIVE) {
      switch (opCode) {
      case OP_OPEN_OUTPUT:
      case OP_OPEN_IO:
      case OP_OPEN_EXTEND:
      case OP_OPEN_OUTPUT_NOREWIND:
         return EXTFH(opCodep, fcd);
         break;

      case OP_OPEN_INPUT:
      case OP_OPEN_INPUT_NOREWIND:
      case OP_OPEN_INPUT_REVERSED:
         return EXTFH(opCodep, fcd);
         break;

      default:
         break;
      }

   }

   if (opCode == OP_CLOSE
    && (fcd->openMode & OPEN_NOT_OPEN) ) {
      return 0;
   }

   return EXTFH(opCodep, fcd);
}
]])

AT_CHECK([$COMPILE -fcallfh=TSTFH prog.cob cmod.c], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00/02 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])

AT_CLEANUP


AT_SETUP([EXTFH: SEQUENTIAL files])
AT_KEYWORDS([runfile EXTFH])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL SEQFIX
           ORGANIZATION SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(8). 
       
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           OPEN INPUT FLATFILE.
           DISPLAY "Open Input when no file Sts:" CUST-STAT
           OPEN EXTEND FLATFILE.
           DISPLAY "Open Extend when no file Sts:" CUST-STAT 
           CLOSE FLATFILE.
           DISPLAY "Close when no open file Sts:" CUST-STAT 
           OPEN OUTPUT FLATFILE.
           CLOSE FLATFILE.
           OPEN EXTEND FLATFILE.
           DISPLAY "Open Extend when empty file Sts:" CUST-STAT 
           CLOSE FLATFILE.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           READ FLATFILE WITH LOCK
           DISPLAY "Read " CM-CUST-NUM
      *    DELETE FLATFILE 
      *    DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Re-list File Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN EXTEND FLATFILE.
           MOVE 2 TO SUB
           PERFORM LOAD-RECORD
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "List File afer EXTEND Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
             DISPLAY "Read  " CM-CUST-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       LOADFILE.
           DISPLAY "Loading sample data file.".
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete.".
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <libcob.h>

static char *txtOpCode(int opCode);

static int
doOpenFile(
   unsigned char  *opCodep, 
   FCD3  *fcd,
   char  *opmsg) 
{
   int      sts;

   sts = EXTFH( opCodep, fcd );
   printf("EXFTH did %s; Status=%c%c; File now %s\n",
       opmsg, fcd->fileStatus[0], fcd->fileStatus[1],
       (fcd->openMode & OPEN_NOT_OPEN) ? "Closed" : "Open");
   return sts;
}

/*********************************************************
 *  TSTFH - External File Handler entry point.
*********************************************************/

COB_EXT_EXPORT int
TSTFH (unsigned char *opCodep, FCD3 *fcd) 
{
   unsigned int   opCode;
   int      sts;

   if (*opCodep == 0xfa)
      opCode = 0xfa00 + opCodep[1];
   else
      opCode = opCodep[1];

   if (fcd->fileOrg == ORG_LINE_SEQ
    || fcd->fileOrg == ORG_SEQ
    || fcd->fileOrg == ORG_INDEXED
    || fcd->fileOrg == ORG_RELATIVE) {
      switch (opCode) {
      case OP_OPEN_OUTPUT:
      case OP_OPEN_IO:
      case OP_OPEN_EXTEND:
      case OP_OPEN_OUTPUT_NOREWIND:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      case OP_OPEN_INPUT:
      case OP_OPEN_INPUT_NOREWIND:
      case OP_OPEN_INPUT_REVERSED:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      case OP_CLOSE:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      default:
         break;
      }

   }

   if (opCode == OP_CLOSE
    && (fcd->openMode & OPEN_NOT_OPEN) ) {
      return 0;
   }

   sts = EXTFH(opCodep, fcd);
   printf("EXFTH did %s; Status=%c%c\n", txtOpCode(opCode),
       fcd->fileStatus[0], fcd->fileStatus[1]);
   return sts;
}

static char *           /* Return Text name of function */
txtOpCode(int opCode)
{
   static char tmp[32];
   switch (opCode) {
   case OP_OPEN_INPUT:     return "OPEN_IN";
   case OP_OPEN_OUTPUT:       return "OPEN_OUT";
   case OP_OPEN_IO:     return "OPEN_IO";
   case OP_OPEN_EXTEND:       return "OPEN_EXT";
   case OP_OPEN_INPUT_NOREWIND:  return "OPEN_IN_NOREW";
   case OP_OPEN_OUTPUT_NOREWIND: return "OPEN_OUT_NOREW";
   case OP_OPEN_INPUT_REVERSED:  return "OPEN_IN_REV";
   case OP_CLOSE:          return "CLOSE";
   case OP_CLOSE_LOCK:     return "CLOSE_LOCK";
   case OP_CLOSE_NOREWIND:    return "CLOSE_NORED";
   case OP_CLOSE_REEL:     return "CLOSE_REEL";
   case OP_CLOSE_REMOVE:      return "CLOSE_REMOVE";
   case OP_CLOSE_NO_REWIND:   return "CLOSE_NO_REW";
   case OP_START_EQ:       return "START_EQ";
   case OP_START_EQ_ANY:      return "START_EQ_ANY";
   case OP_START_GT:       return "START_GT";
   case OP_START_GE:       return "START_GE";
   case OP_START_LT:       return "START_LT";
   case OP_START_LE:       return "START_LE";
   case OP_READ_SEQ_NO_LOCK:  return "READ_SEQ_NO_LK";
   case OP_READ_SEQ:       return "READ_SEQ";
   case OP_READ_SEQ_LOCK:     return "READ_SEQ_LK";
   case OP_READ_SEQ_KEPT_LOCK:   return "READ_SEQ_KEPT_LK";
   case OP_READ_PREV_NO_LOCK:    return "READ_PREV_NO_LK";
   case OP_READ_PREV:      return "READ_PREV";
   case OP_READ_PREV_LOCK:    return "READ_PREV_LK";
   case OP_READ_PREV_KEPT_LOCK:  return "READ_PREV_KEPT_LK";
   case OP_READ_RAN:       return "READ_RAN";
   case OP_READ_RAN_NO_LOCK:  return "READ_RAN_NO_LK";
   case OP_READ_RAN_KEPT_LOCK:   return "READ_RAN_KEPT_LK";
   case OP_READ_RAN_LOCK:     return "READ_RAN_LK";
   case OP_READ_DIR:       return "READ_DIR";
   case OP_READ_DIR_NO_LOCK:  return "READ_DIR_NO_LK";
   case OP_READ_DIR_KEPT_LOCK:   return "READ_DIR_KEPT_LK";
   case OP_READ_DIR_LOCK:     return "READ_DIR_LK";
   case OP_READ_POSITION:     return "READ_POSITION";
   case OP_WRITE:          return "WRITE";
   case OP_REWRITE:     return "REWRITE";
   case OP_DELETE:      return "DELETE";
   case OP_DELETE_FILE:       return "DELETE_FILE";
   case OP_UNLOCK:      return "UNLOCK";
   case OP_ROLLBACK:       return "ROLLBACK";
   case OP_COMMIT:      return "COMMIT";
   case OP_WRITE_BEFORE:      return "WRITE_BEFORE";
   case OP_WRITE_BEFORE_TAB:  return "WRITE_BEFORE_TAB";
   case OP_WRITE_BEFORE_PAGE:    return "WRITE_BEFORE_PAGE";
   case OP_WRITE_AFTER:       return "WRITE_AFTER";
   case OP_WRITE_AFTER_TAB:   return "WRITE_AFTER_TAB";
   case OP_WRITE_AFTER_PAGE:  return "WRITE_AFTER_PAGE";
   }
   sprintf(tmp, "Func 0x%02X:", opCode);
   return tmp;
}
]])

AT_CHECK([$COMPILE -fcallfh=TSTFH prog.cob cmod.c], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[EXFTH did OPEN_IN; Status=35; File now Closed
Open Input when no file Sts:35
EXFTH did OPEN_EXT; Status=35; File now Closed
Open Extend when no file Sts:35
EXFTH did CLOSE; Status=42; File now Closed
Close when no open file Sts:42
EXFTH did OPEN_OUT; Status=00; File now Open
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_EXT; Status=00; File now Open
Open Extend when empty file Sts:00
EXFTH did CLOSE; Status=00; File now Closed
Loading sample data file.
EXFTH did OPEN_OUT; Status=00; File now Open
EXFTH did WRITE; Status=00
EXFTH did WRITE; Status=00
EXFTH did WRITE; Status=00
EXFTH did WRITE; Status=00
EXFTH did WRITE; Status=00
EXFTH did WRITE; Status=00
Sample data file load complete.
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_IN; Status=00; File now Open
Open Sts:00
EXFTH did READ_SEQ; Status=00
Read ALP00000 Sts:00
EXFTH did READ_SEQ; Status=00
Read BET00000 Sts:00
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_IO; Status=00; File now Open
EXFTH did READ_SEQ; Status=00
Read ALP00000 Sts:00
EXFTH did REWRITE; Status=00
REWRITE ALP00000 Sts 00 Trms:0011
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_IO; Status=00; File now Open
EXFTH did READ_SEQ; Status=00
Read ALP00000 Sts:00
EXFTH did REWRITE; Status=00
REWRITE ALP00000 Sts 00 Trms:0012
EXFTH did READ_SEQ; Status=00
Read BET00000
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_IN; Status=00; File now Open
Re-list File Open Sts:00
EXFTH did READ_SEQ; Status=00
Read  ALP00000 Trms:0012
EXFTH did READ_SEQ; Status=00
Read  BET00000 Trms:0013
EXFTH did READ_SEQ; Status=00
Read  GAM00000 Trms:0075
EXFTH did READ_SEQ; Status=00
Read  DEL00000 Trms:0010
EXFTH did READ_SEQ; Status=00
Read  EPS00000 Trms:0090
EXFTH did READ_SEQ; Status=00
Read  FOR00000 Trms:0254
EXFTH did READ_SEQ; Status=10
Read Status: 10
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_EXT; Status=00; File now Open
EXFTH did WRITE; Status=00
EXFTH did CLOSE; Status=00; File now Closed
EXFTH did OPEN_IN; Status=00; File now Open
List File afer EXTEND Open Sts:00
EXFTH did READ_SEQ; Status=00
Read  ALP00000 Trms:0012
EXFTH did READ_SEQ; Status=00
Read  BET00000 Trms:0013
EXFTH did READ_SEQ; Status=00
Read  GAM00000 Trms:0075
EXFTH did READ_SEQ; Status=00
Read  DEL00000 Trms:0010
EXFTH did READ_SEQ; Status=00
Read  EPS00000 Trms:0090
EXFTH did READ_SEQ; Status=00
Read  FOR00000 Trms:0254
EXFTH did READ_SEQ; Status=00
Read  BET00000 Trms:0013
EXFTH did READ_SEQ; Status=10
Read Status: 10
EXFTH did CLOSE; Status=00; File now Closed
], [])

AT_CLEANUP


AT_SETUP([EXTFH: LINE SEQUENTIAL files, direct EXTFH])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.

       01  I                       PIC XX COMP-X.

       01  WS-FCD-DDNAME           PIC X(8) VALUE SPACES.
       01  WS-FCD-PTR              POINTER   VALUE NULL.

       01  WS-FCD-SIZE             PIC 9(04) VALUE   0       COMP-5.
       01  WS-FCD-FLAGS            PIC 9(04) VALUE   0       COMP-5.

       01  DISPLAY-BYTE.
          05  DISPLAY-XXX             PIC X(03).
          05  DISPLAY-ZZ9             REDEFINES DISPLAY-XXX
                                      PIC ZZ9.
       01  ACTION-CODE                 pic x(2).
          78  OP-OPEN-INPUT           value x"fa00".
          78  OP-OPEN-OUTPUT          value x"fa01".
          78  OP-OPEN-I-O             value x"fa02".
          78  OP-WRITE                value x"faf3".
          78  OP-RELEASE              value x"faf3".
          78  OP-REWRITE              value x"faf4".
          78  OP-READ-NEXT            value x"faf5".
          78  OP-START-EQUAL          value x"fae9".
          78  OP-CLOSE                value x"fa80".
          78  OP-QUERY-FILE           value x"0006".

       01  ACTION-CODE-WORK            redefines ACTION-CODE.
          05  ACTION-CODE-1           PIC x(01)                 COMP-X.
          05  ACTION-CODE-2           PIC x(01)                 COMP-X.

       01  DISPLAY-A1-XXX              PIC X(03).
       01  DISPLAY-A1-ZZ9              REDEFINES DISPLAY-A1-XXX
                                      PIC ZZ9.
       01  DISPLAY-A2-XXX              PIC X(03).
       01  DISPLAY-A2-ZZ9              REDEFINES DISPLAY-A2-XXX
                                       PIC ZZ9.

       01  FCD-FILENAME               PIC X(80) value "test.out".
       01  FCD-RECORD                 PIC X(512) value spaces.

       LINKAGE SECTION.

       01  FCD-MAP.
           copy 'xfhfcd3.cpy'.

      *================================================================*
       PROCEDURE DIVISION.
      *----------------------------------------------------------------*
       000-MAIN.

          PERFORM 100-OPEN.

          PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10
            MOVE I TO DISPLAY-A1-ZZ9
            MOVE DISPLAY-A1-ZZ9 TO FCD-RECORD
            PERFORM 300-WRITE
          END-PERFORM.

          PERFORM 400-CLOSE.
          STOP RUN.

      *----------------------------------------------------------------*
      *    Process the open request
      *
       100-OPEN.

          MOVE "TESTOUT" TO WS-FCD-DDNAME

          MOVE LENGTH OF FCD-MAP TO WS-FCD-SIZE
          DISPLAY "FCD SIZE " WS-FCD-SIZE.

          IF WS-FCD-PTR EQUAL NULL
             ALLOCATE ws-fcd-size characters
                                  returning WS-FCD-PTR

             SET  ADDRESS OF FCD-MAP  TO WS-FCD-PTR
             MOVE LOW-VALUES          TO FCD-MAP
             MOVE WS-FCD-SIZE         TO FCD-LENGTH
             move fcd--version-number TO FCD-VERSION
             MOVE "00"                TO FCD-FILE-STATUS
             move fcd--status-defined to FCD-ACCESS-MODE
             move fcd--open-closed    to FCD-OPEN-MODE
             move fcd--external-name  to FCD-OTHER-FLAGS
             SET  FCD-HANDLE          TO NULL
             MOVE 8                   TO FCD-NAME-LENGTH
             SET  FCD-FILENAME-ADDRESS TO ADDRESS 
                                       OF WS-FCD-DDNAME
             SET  FCD-KEY-DEF-ADDRESS TO NULL
             move fcd--allow-readers  to FCD-LOCKTYPES
          ELSE
             SET  ADDRESS OF FCD-MAP  TO WS-FCD-PTR
             IF FCD-OPEN-MODE NOT = fcd--open-closed
                DISPLAY "ERRROR - FILE ALREADY OPEN"
                STOP RUN
             END-IF
          END-IF

          move fcd--line-sequential-org to FCD-ORGANIZATION
          move fcd--recmode-fixed       to FCD-RECORDING-MODE
          move 10 to FCD-MIN-REC-LENGTH, FCD-MAX-REC-LENGTH
          SET  FCD-RECORD-ADDRESS     TO ADDRESS OF FCD-RECORD

      * Move fcd--cr-delimiter for CR LF after each record
      *   move fcd--cr-delimiter        to FCD-STATUS-TYPE

          move op-open-output to action-code

          PERFORM 800-CALL-EXTFH
          .

      *----------------------------------------------------------------*
      *    Process the write request
      *
       300-WRITE.

          move 10 to FCD-CURRENT-REC-LEN
          move op-write to action-code
          PERFORM 800-CALL-EXTFH
          .
      *----------------------------------------------------------------*
      *    Process the close request
      *
       400-CLOSE.
          MOVE "00"                   TO FCD-FILE-STATUS
          move op-close               to action-code
          PERFORM 800-CALL-EXTFH
          .
      *----------------------------------------------------------------*
      *    External file handler interface -- all I/O goes through here
      *
        800-CALL-EXTFH.

            CALL "EXTFH" USING ACTION-CODE, FCD-MAP

            IF FCD-STATUS-KEY-1 = "9" AND FCD-BINARY = 199
               MOVE "10" TO FCD-FILE-STATUS
            END-IF
            .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([TESTOUT=TEST-OUT $COBCRUN_DIRECT ./prog], [0],
[FCD SIZE 00216
], [])


AT_CAPTURE_FILE(./TEST-OUT)

# note: currently with the same behaviour as MF
#       (ignoring minimal record length for line-sequential)
#       this may change in the future...
AT_DATA([reference],
[  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
])

AT_CHECK([diff reference TEST-OUT], [0], [], [])

AT_CLEANUP


AT_SETUP([RELATIVE Multi-Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELVAR
           ORGANIZATION RELATIVE 
           ACCESS IS SEQUENTIAL
           RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-TYPE                         PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(251). 
       
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-TYPE                         PICTURE X. 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-ADDRESS                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
       
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  ZRO               VALUE  1          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Initial Re-Read Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           IF CUST-STAT = "30"
               CLOSE FLATFILE
           STOP RUN
           END-IF
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           DISPLAY "For Rewrite Open I-O Sts:" CUST-STAT 
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           DISPLAY "For Rewrite/Delete Open I-O Sts:" CUST-STAT 
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           PERFORM READ-RECORD
           DELETE FLATFILE 
           DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > 2.
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list afer Extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
           IF CM-TYPE = SPACES
             DISPLAY "Read  " CM-CUST-NUM " #:" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM " #:" REC-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.
      *
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      *
           IF ODD-RECORD
               MOVE "8417"                   TO C2-DISK 
      *        MOVE CM-CUST-NUM              TO C2-CUST-NUM
               MOVE '2'                      TO C2-TYPE
      *        MOVE CM-COMPANY               TO C2-COMPANY
               MOVE CM-PK-DATE               TO C2-PK-DATE
               MOVE CM-NO-TERMINALS          TO C2-NO-TERMINALS
               MOVE DATA-ADDRESS (SUB)       TO C2-ADDRESS
               WRITE TSP2-RECORD
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE ' '                      TO CM-TYPE
               WRITE TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample program data file.
Sample program data file load complete.
Initial Re-Read Open Sts:00
Read2 ALP00000 #:0001 Trms:0010
Read  BET00000 #:0002 Trms:0013
Read2 GAM00000 #:0003 Trms:0075
Read  DEL00000 #:0004 Trms:0010
Read2 EPS00000 #:0005 Trms:0090
Read  FOR00000 #:0006 Trms:0254
Read Status: 10
For Rewrite Open I-O Sts:00
Read2 ALP00000 #:0001 Trms:0010
REWRITE ALP00000 Sts 00 Trms:0011
For Rewrite/Delete Open I-O Sts:00
Read2 ALP00000 #:0001 Trms:0011
REWRITE ALP00000 Sts 00 Trms:0012
Read  BET00000 #:0002 Trms:0013
DELETE BET00000 Sts 00
Re-list Open Sts:00
Read2 ALP00000 #:0001 Trms:0012
Read2 GAM00000 #:0003 Trms:0075
Read  DEL00000 #:0004 Trms:0010
Read2 EPS00000 #:0005 Trms:0090
Read  FOR00000 #:0006 Trms:0254
Read Status: 10
Re-list afer Extend Open Sts:00
Read2 ALP00000 #:0001 Trms:0012
Read2 GAM00000 #:0003 Trms:0075
Read  DEL00000 #:0004 Trms:0010
Read2 EPS00000 #:0005 Trms:0090
Read  FOR00000 #:0006 Trms:0254
Read2 ALP00000 #:0007 Trms:0010
Read  BET00000 #:0008 Trms:0013
Read Status: 10
], [])

AT_CLEANUP


AT_SETUP([RELATIVE one Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(252). 
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
           10  C2-TRAILER                      PICTURE X(252). 

       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           PERFORM 4 TIMES
             PERFORM READ-NEXT
           END-PERFORM.
           CLOSE FLATFILE.

           DISPLAY "*** Test Update of file ***".
           OPEN I-O FLATFILE.
           PERFORM READ-NEXT
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           READ FLATFILE WITH LOCK
           DISPLAY "Read " CM-CUST-NUM
           DELETE FLATFILE 
           DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           DISPLAY "*** List file afer Update/Delete ***".
           OPEN INPUT FLATFILE.
           PERFORM 4 TIMES
             READ FLATFILE
             DISPLAY "Read " CM-CUST-NUM " Sts " CUST-STAT 
                     " Trms:" CM-NO-TERMINALS
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN I-O FLATFILE2.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE 5  TO REC-NUM.
           PERFORM READ2.
           MOVE 3  TO REC-NUM.
           PERFORM READ2.
           WRITE TSP2-RECORD.
           DISPLAY "Write of " REC-NUM " Sts " CUST-STAT 
           PERFORM READ2.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE 2  TO REC-NUM.
           READ FLATFILE2.
           DISPLAY " Read of deleted " REC-NUM " Sts " CUST-STAT 
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (2)       TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           MOVE "8440"                       TO C2-DISK 
           MOVE 2  TO REC-NUM.
           REWRITE TSP2-RECORD.
           DISPLAY "ReWrite deleted " C2-CUST-NUM " Sts " CUST-STAT 
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (2)       TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           MOVE "8440"                       TO C2-DISK 
           MOVE 2  TO REC-NUM.
           WRITE TSP2-RECORD.
           DISPLAY "Write of deleted " C2-CUST-NUM " Sts " CUST-STAT 
           CLOSE FLATFILE2.

           DISPLAY "*** List file afer Re-Add ***".
           OPEN INPUT FLATFILE.
           PERFORM 4 TIMES
             PERFORM READ-RECORD
           END-PERFORM.
           PERFORM READ-PREV
           PERFORM READ-PREV
           PERFORM READ-PREV
           PERFORM READ-PREV
           START FLATFILE LAST
           DISPLAY "Start Last Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-PREV
           PERFORM READ-PREV
           START FLATFILE FIRST
           DISPLAY "Start First Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 4 TO REC-NUM.
           START FLATFILE KEY GREATER OR EQUAL REC-NUM.
           DISPLAY "Start GE 4:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 4 TO REC-NUM.
           START FLATFILE KEY GREATER REC-NUM.
           DISPLAY "Start GT 4:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-NEXT
           PERFORM READ-NEXT
           MOVE 5 TO REC-NUM.
           START FLATFILE KEY LESS REC-NUM.
           DISPLAY "Start LT 5: " REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-RECORD.
           PERFORM READ-PREV
           MOVE 5 TO REC-NUM.
           START FLATFILE KEY LESS OR EQUAL REC-NUM.
           DISPLAY "Start LE 5:" REC-NUM 
                   " Sts " CUST-STAT " Rec#" REC-NUM.
           PERFORM READ-RECORD.
           PERFORM READ-PREV
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           MOVE 2 TO SUB
           PERFORM LOAD-RECORD .
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list after Extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE2.
             PERFORM READ2
                        VARYING REC-NUM FROM 1 BY 1 
                          UNTIL REC-NUM > MAX-SUB + 5
                             OR CUST-STAT NOT = "00".
           CLOSE FLATFILE2.
           STOP RUN RETURNING 0.
      
       READ2.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE2
                INVALID KEY
                   DISPLAY "Invalid Read2 " REC-NUM 
                           " Status: " CUST-STAT
           END-READ
           IF CUST-STAT NOT = "00"
             DISPLAY "Read2 Status: " CUST-STAT
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.

       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
             DISPLAY "Read  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       READ-PREV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE PREVIOUS
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Prev Status: " CUST-STAT
           ELSE
             DISPLAY "Prev  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Next Status: " CUST-STAT
           ELSE
             DISPLAY "Next  " CM-CUST-NUM 
                     " #" REC-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample program data file.
Sample program data file load complete.
Open Sts:00
Next  ALP00000 #0001 Trms:0010
Next  BET00000 #0002 Trms:0013
Next  DEL00000 #0003 Trms:0075
Next  EPS00000 #0004 Trms:0010
*** Test Update of file ***
Next  ALP00000 #0001 Trms:0010
REWRITE ALP00000 Sts 00 Trms:0011
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:0012
Read BET00000
DELETE BET00000 Sts 00
*** List file afer Update/Delete ***
Read ALP00000 Sts 00 Trms:0012
Read DEL00000 Sts 00 Trms:0075
Read EPS00000 Sts 00 Trms:0010
Read FOR00000 Sts 00 Trms:0090
Read2 FOR00000 #0005 Trms:0090
Read2 DEL00000 #0003 Trms:0075
Write of 0003 Sts 22
Read2 DEL00000 #0003 Trms:0075
 Read of deleted 0002 Sts 23
ReWrite deleted BET00000 Sts 23
Write of deleted BET00000 Sts 00
*** List file afer Re-Add ***
Read  ALP00000 #0001 Trms:0012
Read  BET00000 #0002 Trms:0013
Read  DEL00000 #0003 Trms:0075
Read  EPS00000 #0004 Trms:0010
Prev  DEL00000 #0003 Trms:0075
Prev  BET00000 #0002 Trms:0013
Prev  ALP00000 #0001 Trms:0012
Read Prev Status: 10
Start Last Sts 00 Rec#0006
Prev  GAM00000 #0006 Trms:0254
Prev  FOR00000 #0005 Trms:0090
Start First Sts 00 Rec#0001
Next  ALP00000 #0001 Trms:0012
Next  BET00000 #0002 Trms:0013
Start GE 4:0004 Sts 00 Rec#0004
Next  EPS00000 #0004 Trms:0010
Next  FOR00000 #0005 Trms:0090
Start GT 4:0005 Sts 00 Rec#0005
Next  FOR00000 #0005 Trms:0090
Next  GAM00000 #0006 Trms:0254
Start LT 5: 0004 Sts 00 Rec#0004
Read  EPS00000 #0004 Trms:0010
Prev  DEL00000 #0003 Trms:0075
Start LE 5:0005 Sts 00 Rec#0005
Read  FOR00000 #0005 Trms:0090
Prev  EPS00000 #0004 Trms:0010
Re-list Open Sts:00
Read  ALP00000 #0001 Trms:0012
Read  BET00000 #0002 Trms:0013
Read  DEL00000 #0003 Trms:0075
Read  EPS00000 #0004 Trms:0010
Read  FOR00000 #0005 Trms:0090
Read  GAM00000 #0006 Trms:0254
Read Status: 10
Re-list after Extend Open Sts:00
Read  ALP00000 #0001 Trms:0012
Read  BET00000 #0002 Trms:0013
Read  DEL00000 #0003 Trms:0075
Read  EPS00000 #0004 Trms:0010
Read  FOR00000 #0005 Trms:0090
Read  GAM00000 #0006 Trms:0254
Read  BET00000 #0007 Trms:0013
Read Status: 10
Read2 ALP00000 #0001 Trms:0012
Read2 BET00000 #0002 Trms:0013
Read2 DEL00000 #0003 Trms:0075
Read2 EPS00000 #0004 Trms:0010
Read2 FOR00000 #0005 Trms:0090
Read2 GAM00000 #0006 Trms:0254
Read2 BET00000 #0007 Trms:0013
Invalid Read2 0008 Status: 23
Read2 Status: 23
], [])

AT_CLEANUP


AT_SETUP([SEQUENTIAL Multi-Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL SEQVAR
           ORGANIZATION SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-TYPE                         PICTURE X.
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(251). 
       
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-TYPE                         PICTURE X.
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-ADDRESS                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP.
       77  ZRO               VALUE  1          PICTURE 9(4) COMP.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(8) COMP.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(4) COMP-4 VALUE 10.
           05  FILLER PIC 9(4) COMP-4 VALUE 13.
           05  FILLER PIC 9(4) COMP-4 VALUE 75.
           05  FILLER PIC 9(4) COMP-4 VALUE 10.
           05  FILLER PIC 9(4) COMP-4 VALUE 90.
           05  FILLER PIC 9(4) COMP-4 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(4) COMP-4 OCCURS 6.
       01  WORK-AREA.
           05  SUB                     PICTURE 9(4) COMP.
               88  ODD-RECORD          VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           PERFORM READ-RECORD
           PERFORM READ-RECORD
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE " C2-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           PERFORM READ-RECORD
      *    DELETE should cause compiler error
      *    DELETE FLATFILE 
      *    DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD.
           PERFORM READ-RECORD.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE TSP2-RECORD
           DISPLAY "REWRITE2 " C2-CUST-NUM " Sts " CUST-STAT
                     " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           PERFORM READ-RECORD.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT
                     " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.


           OPEN INPUT FLATFILE.
           DISPLAY "Reread file after updates Open Sts:" CUST-STAT.
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.

           OPEN EXTEND FLATFILE.
           MOVE 1 TO SUB
           PERFORM LOAD-RECORD
           CLOSE FLATFILE.

           OPEN INPUT FLATFILE.
           DISPLAY "Re-list after extend Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read status: " CUST-STAT
           ELSE
           IF CM-TYPE = SPACES
             DISPLAY "Read  " CM-CUST-NUM
                     " Trms:" CM-NO-TERMINALS
           ELSE
             DISPLAY "Read2 " C2-CUST-NUM
                     " Trms:" C2-NO-TERMINALS
           END-IF.
      *
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      *
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           IF ODD-RECORD
      *        MOVE CM-CUST-NUM              TO C2-CUST-NUM
      *        MOVE CM-COMPANY               TO C2-COMPANY
               MOVE CM-DISK                  TO C2-DISK   
               MOVE CM-PK-DATE               TO C2-PK-DATE
               MOVE CM-NO-TERMINALS          TO C2-NO-TERMINALS
               MOVE DATA-ADDRESS (SUB)       TO C2-ADDRESS
               MOVE '2'                      TO C2-TYPE
               WRITE TSP2-RECORD
           ELSE
               WRITE TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample program data file.
Sample program data file load complete.
Open Sts:00
Read2 ALP00000 Trms:0010
Read  BET00000 Trms:0013
Read2 ALP00000 Trms:0010
REWRITE ALP00000 Sts 00 Trms:0011
Read2 ALP00000 Trms:0011
REWRITE ALP00000 Sts 00 Trms:0012
Read  BET00000 Trms:0013
Read2 ALP00000 Trms:0012
Read  BET00000 Trms:0013
REWRITE2 BET00000 Sts 44 Trms:8225
Read2 ALP00000 Trms:0012
REWRITE ALP00000 Sts 44 Trms:8225
Reread file after updates Open Sts:00
Read2 ALP00000 Trms:0012
Read  BET00000 Trms:0013
Read2 GAM00000 Trms:0075
Read  DEL00000 Trms:0010
Read2 EPS00000 Trms:0090
Read  FOR00000 Trms:0254
Read status: 10
Re-list after extend Open Sts:00
Read2 ALP00000 Trms:0012
Read  BET00000 Trms:0013
Read2 GAM00000 Trms:0075
Read  DEL00000 Trms:0010
Read2 EPS00000 Trms:0090
Read  FOR00000 Trms:0254
Read2 ALP00000 Trms:0010
Read status: 10
], [])

AT_CLEANUP


AT_SETUP([SEQUENTIAL one Record])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL SEQFIX
           ORGANIZATION SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  CM-PK-DATE                      PICTURE S9(14) COMP-3.
           10  CM-TRAILER                      PICTURE X(8). 
       
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Open Sts:" CUST-STAT 
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           CLOSE FLATFILE.

           OPEN I-O FLATFILE.
           READ FLATFILE
           DISPLAY "Read " CM-CUST-NUM " Sts:" CUST-STAT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           DISPLAY "REWRITE " CM-CUST-NUM " Sts " CUST-STAT 
                   " Trms:" CM-NO-TERMINALS.
           READ FLATFILE WITH LOCK
           DISPLAY "Read " CM-CUST-NUM
      *    DELETE FLATFILE 
      *    DISPLAY "DELETE " CM-CUST-NUM " Sts " CUST-STAT.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "Re-list File Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           OPEN EXTEND FLATFILE.
           MOVE 2 TO SUB
           PERFORM LOAD-RECORD
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           DISPLAY "List File afer EXTEND Open Sts:" CUST-STAT 
           PERFORM UNTIL CUST-STAT NOT = "00"
               PERFORM READ-RECORD
           END-PERFORM.
           CLOSE FLATFILE.
           STOP RUN RETURNING 0.
      
       READ-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE
           IF CUST-STAT NOT = "00"
             DISPLAY "Read Status: " CUST-STAT
           ELSE
             DISPLAY "Read  " CM-CUST-NUM
                     " Trms:" CM-NO-TERMINALS
           END-IF.

       LOADFILE.
           DISPLAY "Loading sample data file.".
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete.".
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           MOVE 20070319                     TO CM-PK-DATE.
           IF SUB = 1 OR 4 OR 6
               MOVE -20070319                 TO CM-PK-DATE.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample data file.
Sample data file load complete.
Open Sts:00
Read ALP00000 Sts:00
Read BET00000 Sts:00
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:0011
Read ALP00000 Sts:00
REWRITE ALP00000 Sts 00 Trms:0012
Read BET00000
Re-list File Open Sts:00
Read  ALP00000 Trms:0012
Read  BET00000 Trms:0013
Read  GAM00000 Trms:0075
Read  DEL00000 Trms:0010
Read  EPS00000 Trms:0090
Read  FOR00000 Trms:0254
Read Status: 10
List File afer EXTEND Open Sts:00
Read  ALP00000 Trms:0012
Read  BET00000 Trms:0013
Read  GAM00000 Trms:0075
Read  DEL00000 Trms:0010
Read  EPS00000 Trms:0090
Read  FOR00000 Trms:0254
Read  BET00000 Trms:0013
Read Status: 10
], [])

AT_CLEANUP


AT_SETUP([trace feature])
AT_KEYWORDS([runfile])

# FIXME: this test should use line sequential or relative files,
#        possibly add a second one for INDEXED!
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

           SELECT TSTFILE 
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3). 
             15  CM-CUST-NNN                   PICTURE X(5). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-TAPE                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(5). 
       
       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSTFL-RECORD.
           05  TSTFL-REC. 
           10  TS-CUST-NUM                     PICTURE X(8). 
           10  TS-STATUS                       PICTURE X. 
           10  TS-COMPANY                      PICTURE X(25). 
           10  TS-ADDRESS-1                    PICTURE X(25). 
           10  TS-ADDRESS-2                    PICTURE X(25). 
           10  TS-ADDRESS-3                    PICTURE X(25). 
           10  TS-TELEPHONE                    PICTURE 9(10). 
           10  TS-DP-MGR                       PICTURE X(25). 
           10  TS-MACHINE                      PICTURE X(8). 
           10  TS-MEMORY                       PICTURE X(4). 
           10  TS-DISK                         PICTURE X(8). 
           10  TS-TAPE                         PICTURE X(8). 
       
      
       WORKING-STORAGE SECTION.
      
       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
      
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
      
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
      
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
      
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
      
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
      
           05  TSPFL-KEY                       PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           OPEN OUTPUT TSPFILE 
           CLOSE TSPFILE.

           OPEN I-O TSPFILE 
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT 
                       " opening TSTFILE, Record size different" 
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different" 
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           STOP RUN.
      
       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
               DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
               " opening 'testisam' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
      
           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT 
                                 UPON CONSOLE.
      
       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD 
           READ  TSTFILE NEXT RECORD 
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD 
           READ  TSPFILE NEXT RECORD 

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File" UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD 
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

AT_CHECK([$COMPILE -ftraceall prog.cob ], [0], [], [])

AT_CHECK([export COB_TRACE_FILE=trace.txt
export COB_TRACE_IO=Y
export COB_SET_TRACE=Y
export COB_TRACE_FORMAT=' Line: %L%S'
export IO_TSPFILE=trace
export IO_TSTFILE=no-trace
./prog], [0], [OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])


AT_CAPTURE_FILE(./trace.txt)

AT_DATA([reference], [Source: 'prog.cob'
Program-Id: prog
 Line:    279    Entry: prog
 Line:    281Paragraph: MAINFILE
 Line:    282           OPEN
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    283           CLOSE
            CLOSE TSPFILE Status: 00
 Line:    285           OPEN
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    286           READ
            READ Sequential TSPFILE Status: 10
 Line:    287           IF
 Line:    292           MOVE
 Line:    293           START
            START TSPFILE Status: 23
            Key : ALL LOW-VALUES
 Line:    294           IF
 Line:    299           READ
            READ Sequential TSPFILE Status: 46
 Line:    300           IF
 Line:    305           DISPLAY
 Line:    306           CLOSE
            CLOSE TSPFILE Status: 00
 Line:    308           PERFORM
 Line:    322Paragraph: LOADFILE
 Line:    323           DISPLAY
 Line:    326           OPEN
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    327           IF
 Line:    335           PERFORM
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 00
         Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
                  '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
                  '    1600 BPI00085'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    362           MOVE
 Line:    363           MOVE
 Line:    364           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    371           IF
 Line:    347Paragraph: 1000-LOAD-RECORD
 Line:    349           MOVE
 Line:    350           MOVE
 Line:    351           MOVE
 Line:    352           MOVE
 Line:    353           MOVE
 Line:    354           MOVE
 Line:    355           MOVE
 Line:    356           MOVE
 Line:    357           MOVE
 Line:    358           MOVE
 Line:    359           MOVE
 Line:    361           IF
 Line:    366           MOVE
 Line:    367           MOVE
 Line:    368           MOVE
 Line:    370           WRITE
            WRITE TSPFILE Status: 02
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    371           IF
 Line:    339           DISPLAY
 Line:    341           CLOSE
            CLOSE TSPFILE Status: 00
 Line:    309           PERFORM
 Line:    376Paragraph: LISTFILE
 Line:    377           DISPLAY
 Line:    378           OPEN
 Line:    379           MOVE
 Line:    380           MOVE
 Line:    381           START
 Line:    382           READ
 Line:    383           READ
 Line:    384           CLOSE
 Line:    386           MOVE
 Line:    387           OPEN
            OPEN INPUT TSPFILE -> 'testisam' Status: 00
 Line:    388           IF
 Line:    396           MOVE
 Line:    397           MOVE
 Line:    398           START
            START TSPFILE Status: 00
            Key : 'PRE00000'
 Line:    399           READ
            READ Sequential TSPFILE Status: 00
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    400           READ
            READ Sequential TSPFILE Status: 10
 Line:    402           MOVE
 Line:    403           MOVE
 Line:    404           START
            START TSPFILE Status: 00
            Key : 'DEL00000'
 Line:    405           IF
 Line:    413           READ
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    414           IF
 Line:    422           PERFORM
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    431           ADD
 Line:    424           DISPLAY
 Line:    427           READ
            READ Sequential TSPFILE Status: 00
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    431           ADD
 Line:    433           IF
 Line:    437           DISPLAY
 Line:    438           MOVE
 Line:    439           START
            START TSPFILE Status: 00
            Key : 'OLD00000'
 Line:    440           IF
 Line:    445           READ
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    446           IF
 Line:    451           PERFORM
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    460           ADD
 Line:    453           DISPLAY
 Line:    456           READ
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    460           ADD
 Line:    463           CLOSE
            CLOSE TSPFILE Status: 00
 Line:    465           OPEN
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    466           MOVE
 Line:    467           MOVE
 Line:    468           MOVE
 Line:    469           READ
            READ TSPFILE Status: 23
            Key : 'BET0X000'
 Line:    470           IF
 Line:    474           MOVE
 Line:    475           MOVE
 Line:    476           READ
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    477           IF
 Line:    481           DISPLAY
 Line:    485           READ
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    486           IF
 Line:    490           DISPLAY
 Line:    494           MOVE
 Line:    495           MOVE
 Line:    496           READ
            READ TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
            Key :  6456445643
 Line:    497           IF
 Line:    501           DISPLAY
 Line:    505           WRITE
            WRITE TSPFILE Status: 22
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    506           IF
 Line:    510           DISPLAY
 Line:    513           MOVE
 Line:    514           MOVE
 Line:    515           READ
            READ TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
            Key : 'GAM00000'
 Line:    516           DISPLAY
 Line:    520           ADD
 Line:    521           REWRITE
            REWRITE TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00080'
 Line:    522           IF
 Line:    527           DISPLAY
 Line:    532           MOVE
 Line:    533           MOVE
 Line:    534           READ
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    535           DISPLAY
 Line:    539           MOVE
 Line:    540           MOVE
 Line:    541           REWRITE
            REWRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    542           IF
 Line:    547           DISPLAY
 Line:    551           MOVE
 Line:    552           MOVE
 Line:    553           READ
            READ TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
            Key : 'FOR00000'
 Line:    554           MOVE
 Line:    555           MOVE
 Line:    556           REWRITE
            REWRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    557           IF
 Line:    562           DISPLAY
 Line:    566           CLOSE
            CLOSE TSPFILE Status: 00
 Line:    310           OPEN
 Line:    311           IF
 Line:    312           DISPLAY
 Line:    320           STOP RUN
])

AT_CHECK([gcdiff -I'WRITE TSPFILE Status' reference trace.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([trace feature with subroutine])

# FIXME: this test should use line sequential or relative files!
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
AT_KEYWORDS([runfile])

AT_DATA([callsub.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. callsub.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A     PIC 9(3) VALUE 399.
       01 NUM-B     PIC 9(3) VALUE 211.
       01 RSLT      PIC 9(5)V99.

       LINKAGE SECTION.
       01  n PIC 99.
       
       PROCEDURE DIVISION USING n.
       MAIN-10.
           ADD 1 TO n.
           COMPUTE RSLT = ((NUM-A / (100.55 + -0.550)) 
                         -  (NUM-B / (10.11 * 10 - 1.1)))
                             * (220 / 2.2) * n.
       END PROGRAM callsub.
])

AT_CHECK([$COMPILE_MODULE -m -o callsub callsub.cob ], [0], [], [])


AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

           SELECT TSTFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT .

           SELECT FLATFILE 
           ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3).
             15  CM-CUST-NNN                   PICTURE X(5).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSTFL-RECORD.
           05  TSTFL-REC.
           10  TS-CUST-NUM                     PICTURE X(8).
           10  TS-STATUS                       PICTURE X.
           10  TS-COMPANY                      PICTURE X(25).
           10  TS-ADDRESS-1                    PICTURE X(25).
           10  TS-ADDRESS-2                    PICTURE X(25).
           10  TS-ADDRESS-3                    PICTURE X(25).
           10  TS-TELEPHONE                    PICTURE 9(10).
           10  TS-DP-MGR                       PICTURE X(25).
           10  TS-MACHINE                      PICTURE X(8).
           10  TS-MEMORY                       PICTURE X(4).
           10  TS-DISK                         PICTURE X(8).
           10  TS-TAPE                         PICTURE X(8).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  FILLER PICTURE XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
       77  CALL-NUM          VALUE  00         PICTURE 99.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           OPEN OUTPUT TSPFILE
           CLOSE TSPFILE.

           OPEN I-O TSPFILE
           MOVE '99' TO CUST-STAT
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT
                       " opening TSTFILE, Record size different"
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different"
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           PERFORM LOADFLAT.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT
               " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD
           READ  TSTFILE NEXT RECORD
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD
           READ  TSPFILE NEXT RECORD

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               CALL "callsub" USING CALL-NUM
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File: " CALL-NUM UPON CONSOLE
           ELSE
               DISPLAY "Stop read after: " CALL-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT
                       " instead of 00"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                        "00/02 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got "
                       "00/02 as expected"
                         UPON CONSOLE
           END-IF.
           DELETE TSPFILE.
           CLOSE TSPFILE.

       LOADFLAT.
           OPEN OUTPUT FLATFILE.
           PERFORM FLAT-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB
                             OR SUB > 5.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           MOVE 3 TO REC-NUM
           READ FLATFILE
           MOVE 999 TO REC-NUM
           READ FLATFILE
           CLOSE FLATFILE.
      
       FLAT-RECORD.
      
           MOVE SPACES                       TO TSP2-RECORD.
           MOVE SUB                          TO REC-NUM.
           MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           IF  ODD-RECORD
               MOVE "8417"                   TO C2-DISK 
           ELSE
               MOVE "8470"                   TO C2-DISK.
           WRITE TSP2-RECORD.
])

AT_CHECK([$COMPILE -ftraceall prog.cob ], [0], [], [])

AT_CHECK([COB_TRACE_FILE=trace.txt \
COB_TRACE_IO=Y                     \
COB_SET_TRACE=Y                    \
COB_TRACE_FORMAT=' Line: %L %S'    \
IO_TSPFILE=trace                   \
IO_TSTFILE=no-trace                \
./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])


AT_CAPTURE_FILE(./trace.txt)

AT_DATA([reference], [Source: 'prog.cob'
Program-Id: prog
 Line:    290     Entry: prog
 Line:    292 Paragraph: MAINFILE
 Line:    293            OPEN
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    294            CLOSE
            CLOSE TSPFILE Status: 00
 Line:    296            OPEN
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    297            MOVE
 Line:    298            READ
            READ Sequential TSPFILE Status: 10
 Line:    299            IF
 Line:    304            MOVE
 Line:    305            START
            START TSPFILE Status: 23
            Key : ALL LOW-VALUES
 Line:    306            IF
 Line:    311            READ
            READ Sequential TSPFILE Status: 46
 Line:    312            IF
 Line:    317            DISPLAY
 Line:    318            CLOSE
            CLOSE TSPFILE Status: 00
 Line:    320            PERFORM
 Line:    335 Paragraph: LOADFILE
 Line:    336            DISPLAY
 Line:    339            OPEN
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    340            IF
 Line:    346            PERFORM
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 00
         Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
                  '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
                  '    1600 BPI00085'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
            WRITE TSPFILE Status: 02
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    382            IF
 Line:    350            DISPLAY
 Line:    352            CLOSE
            CLOSE TSPFILE Status: 00
 Line:    321            PERFORM
 Line:    387 Paragraph: LISTFILE
 Line:    388            DISPLAY
 Line:    389            OPEN
 Line:    390            MOVE
 Line:    391            MOVE
 Line:    392            START
 Line:    393            READ
 Line:    394            READ
 Line:    395            CLOSE
 Line:    397            MOVE
 Line:    398            OPEN
            OPEN INPUT TSPFILE -> 'testisam' Status: 00
 Line:    399            IF
 Line:    404            MOVE
 Line:    405            MOVE
 Line:    406            START
            START TSPFILE Status: 00
            Key : 'PRE00000'
 Line:    407            READ
            READ Sequential TSPFILE Status: 00
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    408            READ
            READ Sequential TSPFILE Status: 10
 Line:    410            MOVE
 Line:    411            MOVE
 Line:    412            START
            START TSPFILE Status: 00
            Key : 'DEL00000'
 Line:    413            IF
 Line:    418            READ
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    419            IF
 Line:    424            PERFORM
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            CALL
 Line:    430            READ
            READ Sequential TSPFILE Status: 00
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    434            ADD
 Line:    436            IF
 Line:    439            DISPLAY
 Line:    442            DISPLAY
 Line:    443            MOVE
 Line:    444            START
            START TSPFILE Status: 00
            Key : 'OLD00000'
 Line:    445            IF
 Line:    450            READ
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    451            IF
 Line:    456            PERFORM
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    465            ADD
 Line:    468            CLOSE
            CLOSE TSPFILE Status: 00
 Line:    470            OPEN
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    471            MOVE
 Line:    472            MOVE
 Line:    473            MOVE
 Line:    474            READ
            READ TSPFILE Status: 23
            Key : 'BET0X000'
 Line:    475            IF
 Line:    479            MOVE
 Line:    480            MOVE
 Line:    481            READ
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    482            IF
 Line:    486            DISPLAY
 Line:    490            READ
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    491            IF
 Line:    495            DISPLAY
 Line:    499            MOVE
 Line:    500            MOVE
 Line:    501            READ
            READ TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
            Key :  6456445643
 Line:    502            IF
 Line:    506            DISPLAY
 Line:    510            WRITE
            WRITE TSPFILE Status: 22
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    511            IF
 Line:    515            DISPLAY
 Line:    518            MOVE
 Line:    519            MOVE
 Line:    520            READ
            READ TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
            Key : 'GAM00000'
 Line:    521            DISPLAY
 Line:    525            ADD
 Line:    526            REWRITE
            REWRITE TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00080'
 Line:    527            IF
 Line:    532            DISPLAY
 Line:    537            MOVE
 Line:    538            MOVE
 Line:    539            READ
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    540            DISPLAY
 Line:    544            MOVE
 Line:    545            MOVE
 Line:    546            REWRITE
            REWRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    547            IF
 Line:    552            DISPLAY
 Line:    556            MOVE
 Line:    557            MOVE
 Line:    558            READ
            READ TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
            Key : 'FOR00000'
 Line:    559            MOVE
 Line:    560            MOVE
 Line:    561            REWRITE
            REWRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    562            IF
 Line:    567            DISPLAY
 Line:    571            DELETE
            DELETE TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    572            CLOSE
            CLOSE TSPFILE Status: 00
 Line:    322            OPEN
 Line:    323            IF
 Line:    324            DISPLAY
 Line:    332            PERFORM
 Line:    574 Paragraph: LOADFLAT
 Line:    575            OPEN
            OPEN OUTPUT FLATFILE -> 'RELFIX' Status: 00
 Line:    576            PERFORM
 Line:    588 Paragraph: FLAT-RECORD
 Line:    590            MOVE
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            IF
 Line:    597            MOVE
 Line:    600            WRITE
            WRITE FLATFILE Status: 00
         Record :  A L P 0  0 0 0 0  A L P H  A   E L  E C T R  I C A L    C O .    L T D 
              1 x 414C5030 30303030 414C5048 4120454C 45435452 4943414C 20434F2E 204C5444 
                   . 8 4 1  7            U             p 1  
             33 x 2E383431 37202020 20005500 00000200 70319C
        Record# :  000001
 Line:    588 Paragraph: FLAT-RECORD
 Line:    590            MOVE
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            IF
 Line:    599            MOVE
 Line:    600            WRITE
            WRITE FLATFILE Status: 00
         Record :  B E T 0  0 0 0 0  B E T A    S H O  E   M F  G .   I  N C .            
              1 x 42455430 30303030 42455441 2053484F 45204D46 472E2049 4E432E20 20202020 
                     8 4 7  0            "             p 1  
             33 x 20383437 30202020 20002200 00000200 70319C
        Record# :  000002
 Line:    588 Paragraph: FLAT-RECORD
 Line:    590            MOVE
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            IF
 Line:    597            MOVE
 Line:    600            WRITE
            WRITE FLATFILE Status: 00
         Record :  G A M 0  0 0 0 0  G A M M  A   X -  R A Y    T E C H  N O L O  G Y     
              1 x 47414D30 30303030 47414D4D 4120582D 52415920 54454348 4E4F4C4F 47592020 
                     8 4 1  7            K             p 1  
             33 x 20383431 37202020 20004B00 00000200 70319C
        Record# :  000003
 Line:    588 Paragraph: FLAT-RECORD
 Line:    590            MOVE
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            IF
 Line:    599            MOVE
 Line:    600            WRITE
            WRITE FLATFILE Status: 00
         Record :  D E L 0  0 0 0 0  D E L T  A   L U  G G A G  E   R E  P A I R  S       
              1 x 44454C30 30303030 44454C54 41204C55 47474147 45205245 50414952 53202020 
                     8 4 7  0            -             p 1  
             33 x 20383437 30202020 20002D00 00000200 70319C
        Record# :  000004
 Line:    588 Paragraph: FLAT-RECORD
 Line:    590            MOVE
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            IF
 Line:    597            MOVE
 Line:    600            WRITE
            WRITE FLATFILE Status: 00
         Record :  E P S 0  0 0 0 0  E P S I  L O N    E Q U I  P M E N  T   S U  P P L Y 
              1 x 45505330 30303030 45505349 4C4F4E20 45515549 504D454E 54205355 50504C59 
                     8 4 1  7            Z             p 1  
             33 x 20383431 37202020 20005A00 00000200 70319C
        Record# :  000005
 Line:    580            CLOSE
            CLOSE FLATFILE Status: 00
 Line:    581            OPEN
            OPEN INPUT FLATFILE -> 'RELFIX' Status: 00
 Line:    582            MOVE
 Line:    583            READ
            READ FLATFILE Status: 00
         Record :  G A M 0  0 0 0 0  G A M M  A   X -  R A Y    T E C H  N O L O  G Y     
              1 x 47414D30 30303030 47414D4D 4120582D 52415920 54454348 4E4F4C4F 47592020 
                     8 4 1  7            K             p 1  
             33 x 20383431 37202020 20004B00 00000200 70319C
        Record# :  000003
 Line:    584            MOVE
 Line:    585            READ
            READ FLATFILE Status: 23
        Record# :  000999
 Line:    586            CLOSE
            CLOSE FLATFILE Status: 00
 Line:    333            STOP RUN
])
# " <-- comment for fixing syntax highlighting

# hack for not checking Status 02 as this isn't returned by all
# ISAM implementations

AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g' \
reference > references], [0], [], [])
AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g'  \
-e 's/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 05"'/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 00"'/g' \
trace.txt > traces.txt], [0], [], [])

AT_CHECK([gcdiff references traces.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([trace feature with indexed EXTFH])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT TSTFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE
           ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3).
             15  CM-CUST-NNN                   PICTURE X(5).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSTFL-RECORD.
           05  TSTFL-REC.
           10  TS-CUST-NUM                     PICTURE X(8).
           10  TS-STATUS                       PICTURE X.
           10  TS-COMPANY                      PICTURE X(25).
           10  TS-ADDRESS-1                    PICTURE X(25).
           10  TS-ADDRESS-2                    PICTURE X(25).
           10  TS-ADDRESS-3                    PICTURE X(25).
           10  TS-TELEPHONE                    PICTURE 9(10).
           10  TS-DP-MGR                       PICTURE X(25).
           10  TS-MACHINE                      PICTURE X(8).
           10  TS-MEMORY                       PICTURE X(4).
           10  TS-DISK                         PICTURE X(8).
           10  TS-TAPE                         PICTURE X(8).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8).
           10  C2-COMPANY                      PICTURE X(25).
           10  C2-DISK                         PICTURE X(8).
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4.
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  FILLER PICTURE XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
       77  CALL-NUM          VALUE  00         PICTURE 99.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           OPEN OUTPUT TSPFILE
           CLOSE TSPFILE.

           OPEN I-O TSPFILE
           MOVE '99' TO CUST-STAT
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT
                       " opening TSTFILE, Record size different"
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different"
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           PERFORM LOADFLAT.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF NOT (CUST-STAT = "00" or "05") *> the file may exist
               DISPLAY "Error " CUST-STAT
               " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD
           READ  TSTFILE NEXT RECORD
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD
           READ  TSPFILE NEXT RECORD

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               ADD 1 TO CALL-NUM
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File: " CALL-NUM UPON CONSOLE
           ELSE
               DISPLAY "Stop read after: " CALL-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE

               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                       " as expected "
                       CM-NO-TERMINALS " terminals"
                       UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           DELETE TSPFILE.
           CLOSE TSPFILE.

       LOADFLAT.
           OPEN OUTPUT FLATFILE.
           PERFORM FLAT-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB
                             OR SUB > 5.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           MOVE 3 TO REC-NUM
           READ FLATFILE
           MOVE 999 TO REC-NUM
           READ FLATFILE
           CLOSE FLATFILE.

       FLAT-RECORD.

           MOVE SPACES                       TO TSP2-RECORD.
           MOVE SUB                          TO REC-NUM.
           MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           IF  ODD-RECORD
               MOVE "8417"                   TO C2-DISK
           ELSE
               MOVE "8470"                   TO C2-DISK.
           WRITE TSP2-RECORD.
])

AT_DATA([cmod.c], [[
/******************************************************************************
*     2017, Ron Norman                                                        *
*  Source for a Micro Focus COBOL External File Handler.                      *
*                                                                             *
* For GnuCOBOL add  -fcallfh=TSTFH              as a compile option           *
*                                                                             *
* This is a sample module for GnuCOBOL, but it does not do very much          *
******************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <libcob.h>
#include <stdio.h>

#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif
#define MIN(a,b) (a < b ? a : b)

static char *txtOpCode(int opCode);

/*************************************************************************
   Replace filename with environment variable value, then open the file
   This is required as MF Cobol seems to have pre-read the ENV Variables 
*************************************************************************/
static int
doOpenFile(
   unsigned char  *opCodep, 
   FCD3  *fcd,
   char  *opmsg) 
{
   int      sts,oldlen,j,k;
   char  *oldFptr,*env,wrk[64];
   unsigned char  svOther;
   unsigned int   opCode;

   oldFptr = fcd->fnamePtr;            /* Save values */
   oldlen  = LDCOMPX2(fcd->fnameLen); 
   fcd->otherFlags &= ~OTH_DOLSREAD;
   svOther = fcd->otherFlags;

   return EXTFH( opCodep, fcd );          /* No DD_, so use normal MF File Open */
}

/*********************************************************
 *  TSTFH - External File Handler entry point.
*********************************************************/
int   
TSTFH( unsigned char *opCodep, FCD3 *fcd) 
{
   unsigned int   opCode;
   char  *fname;
   int      sts, ky, j, k;

   if(*opCodep == 0xfa)
      opCode = 0xfa00 + opCodep[1];
   else
      opCode = opCodep[1];

   if(fcd->fileOrg == ORG_LINE_SEQ
   || fcd->fileOrg == ORG_SEQ
   || fcd->fileOrg == ORG_INDEXED
   || fcd->fileOrg == ORG_RELATIVE) {
      switch (opCode) {
      case OP_OPEN_OUTPUT:
      case OP_OPEN_IO:
      case OP_OPEN_EXTEND:
      case OP_OPEN_OUTPUT_NOREWIND:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      case OP_OPEN_INPUT:
      case OP_OPEN_INPUT_NOREWIND:
      case OP_OPEN_INPUT_REVERSED:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      default:
         break;
      }

   }

   if(opCode == OP_CLOSE
   && (fcd->openMode & OPEN_NOT_OPEN) ) {
      return 0;
   }

   sts = EXTFH( opCodep, fcd );
   return sts;
}

static char *           /* Return Text name of function */
txtOpCode(int opCode)
{
   static char tmp[32];
   switch (opCode) {
   case OP_OPEN_INPUT:     return "OPEN_IN";
   case OP_OPEN_OUTPUT:       return "OPEN_OUT";
   case OP_OPEN_IO:     return "OPEN_IO";
   case OP_OPEN_EXTEND:       return "OPEN_EXT";
   case OP_OPEN_INPUT_NOREWIND:  return "OPEN_IN_NOREW";
   case OP_OPEN_OUTPUT_NOREWIND: return "OPEN_OUT_NOREW";
   case OP_OPEN_INPUT_REVERSED:  return "OPEN_IN_REV";
   case OP_CLOSE:          return "CLOSE";
   case OP_CLOSE_LOCK:     return "CLOSE_LOCK";
   case OP_CLOSE_NOREWIND:    return "CLOSE_NORED";
   case OP_CLOSE_REEL:     return "CLOSE_REEL";
   case OP_CLOSE_REMOVE:      return "CLOSE_REMOVE";
   case OP_CLOSE_NO_REWIND:   return "CLOSE_NO_REW";
   case OP_START_EQ:       return "START_EQ";
   case OP_START_EQ_ANY:      return "START_EQ_ANY";
   case OP_START_GT:       return "START_GT";
   case OP_START_GE:       return "START_GE";
   case OP_START_LT:       return "START_LT";
   case OP_START_LE:       return "START_LE";
   case OP_READ_SEQ_NO_LOCK:  return "READ_SEQ_NO_LK";
   case OP_READ_SEQ:       return "READ_SEQ";
   case OP_READ_SEQ_LOCK:     return "READ_SEQ_LK";
   case OP_READ_SEQ_KEPT_LOCK:   return "READ_SEQ_KEPT_LK";
   case OP_READ_PREV_NO_LOCK:    return "READ_PREV_NO_LK";
   case OP_READ_PREV:      return "READ_PREV";
   case OP_READ_PREV_LOCK:    return "READ_PREV_LK";
   case OP_READ_PREV_KEPT_LOCK:  return "READ_PREV_KEPT_LK";
   case OP_READ_RAN:       return "READ_RAN";
   case OP_READ_RAN_NO_LOCK:  return "READ_RAN_NO_LK";
   case OP_READ_RAN_KEPT_LOCK:   return "READ_RAN_KEPT_LK";
   case OP_READ_RAN_LOCK:     return "READ_RAN_LK";
   case OP_READ_DIR:       return "READ_DIR";
   case OP_READ_DIR_NO_LOCK:  return "READ_DIR_NO_LK";
   case OP_READ_DIR_KEPT_LOCK:   return "READ_DIR_KEPT_LK";
   case OP_READ_DIR_LOCK:     return "READ_DIR_LK";
   case OP_READ_POSITION:     return "READ_POSITION";
   case OP_WRITE:          return "WRITE";
   case OP_REWRITE:     return "REWRITE";
   case OP_DELETE:      return "DELETE";
   case OP_DELETE_FILE:       return "DELETE_FILE";
   case OP_UNLOCK:      return "UNLOCK";
   case OP_ROLLBACK:       return "ROLLBACK";
   case OP_COMMIT:      return "COMMIT";
   case OP_WRITE_BEFORE:      return "WRITE_BEFORE";
   case OP_WRITE_BEFORE_TAB:  return "WRITE_BEFORE_TAB";
   case OP_WRITE_BEFORE_PAGE:    return "WRITE_BEFORE_PAGE";
   case OP_WRITE_AFTER:       return "WRITE_AFTER";
   case OP_WRITE_AFTER_TAB:   return "WRITE_AFTER_TAB";
   case OP_WRITE_AFTER_PAGE:  return "WRITE_AFTER_PAGE";
   }
   sprintf(tmp,"Func 0x%02X:",opCode);
   return tmp;
}
]])

AT_CHECK([$COMPILE -fcallfh=TSTFH -ftraceall prog.cob cmod.c], [0], [], [])

# first run without runtime tracing
AT_CHECK([export COB_TRACE_FILE=trace.txt
export COB_TRACE_IO=Y
export COB_SET_TRACE=Y
export COB_TRACE_FORMAT=%L%S
export IO_TSPFILE=trace
export IO_TSTFILE=no-trace
./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00/02 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])

# not merged yet:
#export COB_TRACE_IO=Y
#export IO_TSPFILE=trace
#export IO_TSTFILE=no-trace

AT_CHECK([COB_TRACE_FILE=trace.txt \
COB_SET_TRACE=Y \
COB_TRACE_FORMAT=" Line: %L %S" \
$COBCRUN_DIRECT ./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00/02 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])


AT_CAPTURE_FILE(./trace.txt)

AT_DATA([reference],
[Source: 'prog.cob'
Program-Id: prog
 Line:    290     Entry: prog
 Line:    292 Paragraph: MAINFILE
 Line:    293            OPEN
 Line:    294            CLOSE
 Line:    296            OPEN
 Line:    297            MOVE
 Line:    298            READ
 Line:    299            IF
 Line:    304            MOVE
 Line:    305            START
 Line:    306            IF
 Line:    311            READ
 Line:    312            IF
 Line:    317            DISPLAY
 Line:    318            CLOSE
 Line:    320            PERFORM
 Line:    335 Paragraph: LOADFILE
 Line:    336            DISPLAY
 Line:    339            OPEN
 Line:    340            IF
 Line:    346            PERFORM
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    373            MOVE
 Line:    374            MOVE
 Line:    375            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    358 Paragraph: 1000-LOAD-RECORD
 Line:    360            MOVE
 Line:    361            MOVE
 Line:    362            MOVE
 Line:    363            MOVE
 Line:    364            MOVE
 Line:    365            MOVE
 Line:    366            MOVE
 Line:    367            MOVE
 Line:    368            MOVE
 Line:    369            MOVE
 Line:    370            MOVE
 Line:    372            IF
 Line:    377            MOVE
 Line:    378            MOVE
 Line:    379            MOVE
 Line:    381            WRITE
 Line:    382            IF
 Line:    350            DISPLAY
 Line:    352            CLOSE
 Line:    321            PERFORM
 Line:    387 Paragraph: LISTFILE
 Line:    388            DISPLAY
 Line:    389            OPEN
 Line:    390            MOVE
 Line:    391            MOVE
 Line:    392            START
 Line:    393            READ
 Line:    394            READ
 Line:    395            CLOSE
 Line:    397            MOVE
 Line:    398            OPEN
 Line:    399            IF
 Line:    404            MOVE
 Line:    405            MOVE
 Line:    406            START
 Line:    407            READ
 Line:    408            READ
 Line:    410            MOVE
 Line:    411            MOVE
 Line:    412            START
 Line:    413            IF
 Line:    418            READ
 Line:    419            IF
 Line:    424            PERFORM
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    426            DISPLAY
 Line:    429            ADD
 Line:    430            READ
 Line:    434            ADD
 Line:    436            IF
 Line:    439            DISPLAY
 Line:    442            DISPLAY
 Line:    443            MOVE
 Line:    444            START
 Line:    445            IF
 Line:    450            READ
 Line:    451            IF
 Line:    456            PERFORM
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    458            DISPLAY
 Line:    461            READ
 Line:    465            ADD
 Line:    468            CLOSE
 Line:    470            OPEN
 Line:    471            MOVE
 Line:    472            MOVE
 Line:    473            MOVE
 Line:    474            READ
 Line:    475            IF
 Line:    479            MOVE
 Line:    480            MOVE
 Line:    481            READ
 Line:    482            IF
 Line:    486            DISPLAY
 Line:    490            READ
 Line:    491            IF
 Line:    495            DISPLAY
 Line:    499            MOVE
 Line:    500            MOVE
 Line:    501            READ
 Line:    502            IF
 Line:    506            DISPLAY
 Line:    510            WRITE
 Line:    511            IF
 Line:    515            DISPLAY
 Line:    518            MOVE
 Line:    519            MOVE
 Line:    520            READ
 Line:    521            DISPLAY
 Line:    525            ADD
 Line:    526            REWRITE
 Line:    527            IF
 Line:    533            DISPLAY
 Line:    538            MOVE
 Line:    539            MOVE
 Line:    540            READ
 Line:    541            DISPLAY
 Line:    545            MOVE
 Line:    546            MOVE
 Line:    547            REWRITE
 Line:    548            IF
 Line:    553            DISPLAY
 Line:    557            MOVE
 Line:    558            MOVE
 Line:    559            READ
 Line:    560            MOVE
 Line:    561            MOVE
 Line:    562            REWRITE
 Line:    563            IF
 Line:    568            DISPLAY
 Line:    572            DELETE
 Line:    573            CLOSE
 Line:    322            OPEN
 Line:    323            IF
 Line:    324            DISPLAY
 Line:    332            PERFORM
 Line:    575 Paragraph: LOADFLAT
 Line:    576            OPEN
 Line:    577            PERFORM
 Line:    589 Paragraph: FLAT-RECORD
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            MOVE
 Line:    597            IF
 Line:    598            MOVE
 Line:    601            WRITE
 Line:    589 Paragraph: FLAT-RECORD
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            MOVE
 Line:    597            IF
 Line:    600            MOVE
 Line:    601            WRITE
 Line:    589 Paragraph: FLAT-RECORD
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            MOVE
 Line:    597            IF
 Line:    598            MOVE
 Line:    601            WRITE
 Line:    589 Paragraph: FLAT-RECORD
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            MOVE
 Line:    597            IF
 Line:    600            MOVE
 Line:    601            WRITE
 Line:    589 Paragraph: FLAT-RECORD
 Line:    591            MOVE
 Line:    592            MOVE
 Line:    593            MOVE
 Line:    594            MOVE
 Line:    595            MOVE
 Line:    596            MOVE
 Line:    597            IF
 Line:    598            MOVE
 Line:    601            WRITE
 Line:    581            CLOSE
 Line:    582            OPEN
 Line:    583            MOVE
 Line:    584            READ
 Line:    585            MOVE
 Line:    586            READ
 Line:    587            CLOSE
 Line:    333            STOP RUN
])
# hack for not checking Status 02 as this isn't returned by all
# ISAM implementations

AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g' \
reference > references], [0], [], [])
AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g'  \
-e 's/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 05"'/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 00"'/g' \
trace.txt > traces.txt], [0], [], [])

AT_CHECK([gcdiff references traces.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([RELATIVE File Locking])
AT_KEYWORDS([runfile])

# has timing issues - just skip until resolved later
AT_SKIP_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT LOCKFILE ASSIGN EXTERNAL RELLCK
           ORGANIZATION RELATIVE
           SHARING READ ONLY
           ACCESS IS RANDOM RELATIVE KEY IS LCK-REC
           FILE STATUS IS CUST-STAT.

           SELECT OPTIONAL REPORTIT ASSIGN TO REPORT-FILE 
           ORGANIZATION LINE SEQUENTIAL.

       DATA  DIVISION.
       FILE SECTION.
       FD  REPORTIT
           BLOCK CONTAINS 5 RECORDS.
      
       01  REPORT-RECORD   PIC X(80).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4). 
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE S9(4). 

       FD  LOCKFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  LCK-RECORD.
           10  LCK-NUM                         PICTURE 9(3). 
           10  LCK-TBL                         PICTURE X OCCURS 4 TIMES. 
           10  LCK-MESSAGE                     PICTURE X(25). 

       WORKING-STORAGE SECTION.
      
       77  MAX-SUB                     PICTURE 9(4) VALUE 6.
       77  CUST-STAT                   PICTURE X(2).
       77  REC-NUM                     PICTURE 9(4) VALUE 1.
       77  LCK-REC                     PICTURE 9(4) VALUE 1.
       77  SLP-TIME                    PICTURE 9(9) BINARY VALUE 1.
       77  REPORT-FILE                 PICTURE X(32) VALUE "parent.txt".
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
       01  CMD-LINE     PIC X(64).
       01  WMI          PIC X(7).
       01  SEQ          PIC 9(2) VALUE 0.
       01  MSG          PIC X(64) VALUE " ".
      
       PROCEDURE DIVISION.

           ACCEPT CMD-LINE FROM COMMAND-LINE.
           CALL "C$TOUPPER" USING CMD-LINE BY VALUE LENGTH OF CMD-LINE.
           MOVE SPACES TO REPORT-RECORD.
           EVALUATE CMD-LINE
           WHEN  SPACES
               MOVE "control.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Control" TO WMI
               PERFORM LOADFILE
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  PARENT &"
               CALL "SYSTEM" USING "./prog  CHILD &"
               CALL "C$SLEEP" USING 2
               MOVE "continue test " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 1 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-EXCLUSIVE
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 1
               CALL "SYSTEM" USING "./prog  LOCK &"
               CALL "SYSTEM" USING "./prog  READADV &"
               CALL "C$SLEEP" USING 6
               MOVE "waiting step 2 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  UPDT &"
               CALL "SYSTEM" USING "./prog  CHILDUP &"
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 3 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
           WHEN "PARENT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE " PARENT" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 1
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM READ-FILE-RETRY-SHORT
               PERFORM LOCK-RELEASE
           WHEN "CHILD"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "  CHILD" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
           WHEN "UPDT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Upd" TO WMI
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "CHILDUP"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Upd" TO WMI
               MOVE 1 TO SLP-TIME
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "LOCK"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Lck" TO WMI
               PERFORM READ-FILE-ADV
               OPEN I-O SHARING ALL OTHER FLATFILE2
               MOVE 1 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               DELETE FLATFILE2
               STRING "Deleted " C2-CUST-NUM "        1  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE 3 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               STRING "Read    " C2-CUST-NUM " Locked 3  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 4
               CLOSE FLATFILE2
           WHEN "READADV"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Adv" TO WMI
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE-ADV
               MOVE "Cld Ign" TO WMI
               PERFORM READ-FILE-IGN
           END-EVALUATE.
           MOVE "ending " TO MSG
           PERFORM DISPLAY-IT
           CLOSE REPORTIT.
           STOP RUN.

       READ-FILE.
           OPEN INPUT FLATFILE.
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 2 TIMES
             PERFORM READ-NEXT
             CALL "C$SLEEP" USING 1
           END-PERFORM.
           CLOSE FLATFILE.

       READ-FILE-NO-SHARE.
           OPEN INPUT SHARING NO OTHER FLATFILE.
           STRING "NO SHARE Open              Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHARE.
           OPEN INPUT SHARING NO OTHER RETRY 10 SECONDS FLATFILE.
           STRING "RETRY SHARE Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHORT.
           OPEN INPUT SHARING NO OTHER RETRY 2 SECONDS FLATFILE.
           STRING "RETRY SHORT Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       UPDT-SHARE.
           OPEN I-O SHARING ALL OTHER FLATFILE2.
           MOVE 3 TO REC-NUM.
           CALL "C$SLEEP" USING SLP-TIME
           READ FLATFILE2
           STRING "Read    " C2-CUST-NUM " no lock   Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD WITH NO LOCK
      *    REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING 2
           READ FLATFILE2 WITH LOCK
           STRING "Re-Read " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM "  and LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.

           MOVE 2 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO C2-CUST-NUM
           MOVE WMI   TO C2-CUST-NUM (3:6)
           REWRITE TSP2-RECORD RETRY 10 SECONDS WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " No read! "
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CLOSE FLATFILE2.
      
       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT
           IF CUST-STAT NOT = "00"
             STRING "Read Next                  Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Next    " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-ADV.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-ADV
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-IGN.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-IGN
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-IGN.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT IGNORE LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next ign              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextign " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       DISPLAY-IT.
           ADD 1 TO SEQ.
           STRING WMI " :" SEQ ": " MSG INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO MSG.
           MOVE SPACES TO REPORT-RECORD.

       LOCK-EXCLUSIVE.
           OPEN I-O SHARING NO OTHER RETRY FOREVER LOCKFILE.

       LOCK-SHARED.
           OPEN INPUT SHARING READ ONLY RETRY FOREVER LOCKFILE.

       LOCK-RELEASE.
           CLOSE LOCKFILE.

       LOADFILE.
           STRING WMI " .  . Loading sample program data file"
                            INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO REPORT-RECORD.
      
           OPEN OUTPUT LOCKFILE.
           MOVE SPACES TO LCK-RECORD.
           MOVE ZERO TO LCK-NUM.
           MOVE "Lock control" TO LCK-MESSAGE.
           WRITE FILE LOCKFILE FROM LCK-RECORD
      *    WRITE LCK-RECORD.
           CLOSE LOCKFILE.

           OPEN OUTPUT FLATFILE.
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           CLOSE FLATFILE.
      
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE 10                           TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

# CHECKME: do we need -std/-fmf-files here?
AT_CHECK([$COMPILE -std=mf -fmf-files prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])


AT_CAPTURE_FILE(./control.txt)

AT_DATA([reference],
[Control .  . Loading sample program data file
Control :01: continue test
Control :02: waiting step 1 completion
Control :03: waiting step 2 completion
Control :04: waiting step 3 completion
Control :05: ending
])

AT_CHECK([diff reference control.txt], [0], [], [])


AT_CAPTURE_FILE(./parent.txt)

AT_DATA([reference],
[ PARENT :01: READ Open                  Sts:00
 PARENT :02: Next    ALP00000 Trms:0010 #0001
 PARENT :03: Next    BET00000 Trms:0010 #0002
 PARENT :04: NO SHARE Open              Sts:00
 PARENT :05: Next    ALP00000 Trms:0010 #0001
 PARENT :06: Next    BET00000 Trms:0010 #0002
 PARENT :07: RETRY SHARE Open           Sts:00
 PARENT :08: Next    ALP00000 Trms:0010 #0001
 PARENT :09: Next    BET00000 Trms:0010 #0002
 PARENT :10: RETRY SHORT Open           Sts:61
 PARENT :11: Read Next                  Sts:47
 PARENT :12: ending
Par Lck :01: READ Open                  Sts:00
Par Lck :02: Nextadv ALP00000 Trms:0010 #0001
Par Lck :03: Nextadv BET00000 Trms:0010 #0002
Par Lck :04: Nextadv DEL00000 Trms:0010 #0003
Par Lck :05: Nextadv EPS00000 Trms:0010 #0004
Par Lck :06: Deleted ALP00000        1  Sts:00
Par Lck :07: Read    DEL00000 Locked 3  Sts:00
Par Lck :08: ending
Par Upd :01: Read    DEL00000 no lock   Sts:00
Par Upd :02: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :03: Read    DEL00000 with LOCK Sts:00
Par Upd :04: Re-Read DEL00000 with LOCK Sts:00
Par Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :06: Read    DEL00000  and LOCK Sts:00
Par Upd :07: REWRITE BEPar Up No read!  Sts:00
Par Upd :08: ending
])

AT_CHECK([diff reference parent.txt], [0], [], [])


AT_CAPTURE_FILE(./child.txt)

AT_DATA([reference],
[  CHILD :01: READ Open                  Sts:00
  CHILD :02: Next    ALP00000 Trms:0010 #0001
  CHILD :03: Next    BET00000 Trms:0010 #0002
  CHILD :04: NO SHARE Open              Sts:61
  CHILD :05: Read Next                  Sts:47
  CHILD :06: RETRY SHARE Open           Sts:00
  CHILD :07: Next    ALP00000 Trms:0010 #0001
  CHILD :08: Next    BET00000 Trms:0010 #0002
  CHILD :09: RETRY SHARE Open           Sts:00
  CHILD :10: Next    ALP00000 Trms:0010 #0001
  CHILD :11: Next    BET00000 Trms:0010 #0002
  CHILD :12: ending
Cld Adv :01: READ Open                  Sts:00
Cld Adv :02: Nextadv BET00000 Trms:0010 #0002
Cld Adv :03: Nextadv EPS00000 Trms:0010 #0004
Cld Adv :04: Nextadv FOR00000 Trms:0010 #0005
Cld Adv :05: Nextadv GAM00000 Trms:0010 #0006
Cld Ign :06: READ Open                  Sts:00
Cld Ign :07: Nextign BET00000 Trms:0010 #0002
Cld Ign :08: Nextign DEL00000 Trms:0010 #0003
Cld Ign :09: Nextign EPS00000 Trms:0010 #0004
Cld Ign :10: Nextign FOR00000 Trms:0010 #0005
Cld Ign :11: ending
Cld Upd :01: Read    DEL00000 no lock   Sts:00
Cld Upd :02: REWRITE DEL00000 Trms:0012 Sts:51
Cld Upd :03: Read    DEL00000 with LOCK Sts:51
Cld Upd :04: Re-Read DEL00000 with LOCK Sts:00
Cld Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Cld Upd :06: Read    DEL00000  and LOCK Sts:00
Cld Upd :07: REWRITE BECld Up No read!  Sts:00
Cld Upd :08: ending
])

AT_CHECK([diff reference child.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([WRITE and REWRITE FILE name ])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4).
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4).
      
       WORKING-STORAGE SECTION.
      
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4).
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
      
       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN I-O FLATFILE2.
           MOVE 2 TO REC-NUM
           READ FLATFILE2
           DISPLAY "Read    " C2-CUST-NUM " Sts:" CUST-STAT
                   " Trms:" C2-NO-TERMINALS.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD
           READ FLATFILE2
           DISPLAY "REWROTE " C2-CUST-NUM " Sts:" CUST-STAT 
                   " Trms:" C2-NO-TERMINALS.
           CLOSE FLATFILE2.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample program data file."
                            UPON CONSOLE.
      
           OPEN OUTPUT FLATFILE.
      
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample program data file load complete."
                            UPON CONSOLE.
           CLOSE FLATFILE.
      
       LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE FILE FLATFILE FROM TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Loading sample program data file.
Sample program data file load complete.
Read    BET00000 Sts:00 Trms:0013
REWROTE BET00000 Sts:00 Trms:0014
], [])

AT_CLEANUP


AT_SETUP([INDEXED File Locking])
AT_KEYWORDS([runfile])

# has timing issues - just skip until resolved later
AT_SKIP_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE  ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           LOCK MANUAL 
      *    LOCK AUTOMATIC 
           WITH LOCK ON MULTIPLE RECORDS
      *    WITH LOCK ON RECORD 
           SHARING WITH ALL OTHER
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM

           FILE STATUS IS CUST-STAT .

           SELECT LOCKFILE ASSIGN EXTERNAL RELLCK
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS LCK-REC
           FILE STATUS IS CUST-STAT.

           SELECT OPTIONAL REPORTIT ASSIGN TO REPORT-FILE 
           ORGANIZATION LINE SEQUENTIAL.

       DATA  DIVISION.
       FILE SECTION.
       FD  LOCKFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  LCK-RECORD.
           10  LCK-NUM                         PICTURE 9(3). 
           10  LCK-TBL                         PICTURE X OCCURS 4 TIMES. 
           10  LCK-MESSAGE                     PICTURE X(25). 

       FD  REPORTIT
           BLOCK CONTAINS 5 RECORDS.
      
       01  REPORT-RECORD                       PICTURE X(80).

       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
         05  TSPFL-REC. 
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4). 
       
       WORKING-STORAGE SECTION.
      
       01  WS-TIME-NOW.
           05  WS-NOW-HH               PIC 9(02) VALUE 0.
           05  WS-NOW-MM               PIC 9(02) VALUE 0.
           05  WS-NOW-SS               PIC 9(02) VALUE 0.
           05  WS-NOW-HS               PIC 9(02) VALUE 0.

       01  CUST-STAT              PIC XX.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           PICTURE 9(2)  VALUE 8.
       77  REPORT-FILE       PICTURE X(32) VALUE "control.txt".
       77  MSG               PICTURE X(70) VALUE SPACES.
       77  CMD-LINE          PICTURE X(80) VALUE SPACES.
       77  SEQ               PICTURE 99  VALUE 0.
       77  LCK-REC           PICTURE 9(4) VALUE 1.
      
       01  SAVE-REC          PIC X(250).

       01  TEST-DATA.
         02  DATA-CUST-NUM-TBL.
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "CAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "HIJ00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 8.
         02  DATA-COMPANY-TBL.
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "CAMERA X-RAY TECHNOLOGY  ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "HECKLE PLUMBING SUPPLIES ".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 8.

       01  WORK-AREA.
           05  SLP-TIME        PICTURE 9(9) BINARY VALUE 1.
           05  SLP-SHORT       PICTURE 9(18) BINARY VALUE  20000000.
           05  SLP-LONG        PICTURE 9(18) BINARY VALUE 320000000.
           05  LCK-IDX         PICTURE 9(4) BINARY VALUE 1.
           05  REC-NUM         PICTURE 9(4) VALUE 0.
           05  REC-MAX         PICTURE 9(5) COMP VALUE 10.
           05  SUB             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD  VALUE 1 3 5 7 9 10 11.
      
           05  TSPFL-KEY       PICTURE X(8).
           05  WMI             PICTURE X(8).
      
       PROCEDURE DIVISION.
      
       MAINFILE.
           ACCEPT CMD-LINE FROM COMMAND-LINE.
           CALL "C$TOUPPER" USING CMD-LINE BY VALUE LENGTH OF CMD-LINE.
           MOVE SPACES TO REPORT-RECORD.
           EVALUATE CMD-LINE
           WHEN  SPACES
               MOVE "control.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Control" TO WMI
               PERFORM LOADFILE
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog PARENT &"
               CALL "SYSTEM" USING "./prog CHILD &"
               PERFORM LOCK-WAIT-READY
               MOVE "continue test " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE 2 TIMES
               MOVE "waiting step 1 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE 2 TIMES
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog LOCK &"
               CALL "SYSTEM" USING "./prog READADV &"
               PERFORM LOCK-WAIT-READY
               MOVE "waiting step 2 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE
               PERFORM LOCK-INIT
               CALL "SYSTEM" USING "./prog UPDT &"
               CALL "SYSTEM" USING "./prog CHILDUP &"
               PERFORM LOCK-WAIT-READY
               MOVE "waiting step 3 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-WAIT-COMPLETE
           WHEN "PARENT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE " PARENT" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-NO-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHORT
               PERFORM LOCK-MARK-COMPLETE
           WHEN "CHILD"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "  CHILD" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE
               PERFORM LOCK-COMPLETE-AND-GO
               CALL "C$SLEEP" USING 1
               PERFORM READ-FILE-NO-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-COMPLETE-AND-GO
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "UPDT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Upd" TO WMI
               PERFORM LOCK-READY-AND-GO
               CALL "C$SLEEP" USING 1
               PERFORM UPDT-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "CHILDUP"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Upd" TO WMI
               PERFORM LOCK-READY-AND-GO
               MOVE 2 TO SLP-TIME
               PERFORM UPDT-SHARE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "LOCK"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Lck" TO WMI
               PERFORM LOCK-READY-AND-GO
               PERFORM READ-FILE-ADV
               OPEN I-O SHARING ALL OTHER TSPFILE
               MOVE DATA-CUST-NUM (1) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               DELETE TSPFILE
               STRING "Deleted " CM-CUST-NUM "           Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE DATA-CUST-NUM (3) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               STRING "Read    " CM-CUST-NUM " Locked    Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE DATA-CUST-NUM (6) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               MOVE DATA-CUST-NUM (6) TO CM-CUST-NUM
               READ TSPFILE WITH LOCK
               STRING "Read    " CM-CUST-NUM " Locked    Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 9
               READ TSPFILE 
               CLOSE TSPFILE
               PERFORM LOCK-MARK-COMPLETE
           WHEN "READADV"
               MOVE 2         TO LCK-IDX
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               PERFORM LOCK-READY-AND-GO
               MOVE "Cld Adv" TO WMI
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE-ADV
               MOVE "Cld Ign" TO WMI
               PERFORM READ-FILE-IGN
               PERFORM LOCK-MARK-COMPLETE
           WHEN OTHER
               DISPLAY "Bad cmd:" CMD-LINE
           END-EVALUATE.
           MOVE "ending " TO MSG
           PERFORM DISPLAY-IT
           CLOSE REPORTIT.
           STOP RUN.
      
       LOADFILE.

           MOVE "Loading test data file." TO MSG
           PERFORM DISPLAY-IT.
      
           OPEN OUTPUT TSPFILE
           IF CUST-STAT NOT = "00"
               STRING "Error " CUST-STAT " opening 'testisam' file"
                                INTO MSG
               PERFORM DISPLAY-IT
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE 10                           TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
      
           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               STRING "Key: " TSPFL-KEY ", Status: " CUST-STAT 
                                 INTO MSG
               PERFORM DISPLAY-IT.

       READ-FILE.
           OPEN INPUT TSPFILE.
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 2 TIMES
             PERFORM READ-NEXT
             CALL "C$SLEEP" USING 1
           END-PERFORM.
           CLOSE TSPFILE.

       READ-FILE-NO-SHARE.
           OPEN INPUT SHARING NO OTHER TSPFILE.
           STRING "OPEN NO SHARE              Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CALL "C$SLEEP" USING 2
           CLOSE TSPFILE.

       READ-FILE-RETRY-SHARE.
           OPEN INPUT SHARING NO OTHER RETRY 15 SECONDS TSPFILE.
           STRING "OPEN NO SHARE RETRY 15     Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CALL "C$SLEEP" USING 4
           CLOSE TSPFILE.

       READ-FILE-RETRY-SHORT.
           CALL "C$SLEEP" USING 1.
           OPEN INPUT SHARING NO OTHER RETRY 2 SECONDS TSPFILE.
           STRING "OPEN NO SHARE RETRY 2      Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
           ELSE
               PERFORM READ-NEXT
           END-IF.
           CLOSE TSPFILE.

       UPDT-SHARE.
           OPEN I-O SHARING ALL OTHER TSPFILE.
           MOVE 3 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO CM-CUST-NUM
           READ TSPFILE WITH NO LOCK
           STRING "Read    " CM-CUST-NUM " no lock   Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           ADD 1 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD RETRY 25 SECONDS WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING SLP-TIME

           READ TSPFILE RETRY 2 SECONDS WITH LOCK 
           STRING "Read    " CM-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           IF CUST-STAT = "51"
               READ TSPFILE RETRY 15 SECONDS WITH LOCK
               STRING "Read    " CM-CUST-NUM " retry LCK Sts:"
                       CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
           ELSE
               CALL "C$SLEEP" USING 5
           END-IF
           READ TSPFILE WITH LOCK
           STRING "Re-Read " CM-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           REWRITE TSPFL-RECORD WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ TSPFILE WITH LOCK
           STRING "Read    " CM-CUST-NUM "  and LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.

           MOVE 2 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO CM-CUST-NUM
           REWRITE TSPFL-RECORD RETRY 10 SECONDS WITH NO LOCK
           STRING "REWRITE " CM-CUST-NUM " No read! "
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CLOSE TSPFILE.

       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT
           IF CUST-STAT NOT = "00"
             STRING "Read Next                  Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Next    " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-ADV.
           OPEN INPUT SHARING ALL OTHER TSPFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-ADV
           END-PERFORM.
           START TSPFILE LAST
           PERFORM 4 TIMES
             PERFORM READ-PREV-ADV
           END-PERFORM.
           CLOSE TSPFILE.

       READ-NEXT-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-PREV-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE PREVIOUS ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Prev adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Prevadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-IGN.
           OPEN INPUT SHARING ALL OTHER TSPFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 7 TIMES
             PERFORM READ-NEXT-IGN
           END-PERFORM.
           CLOSE TSPFILE.

       READ-NEXT-IGN.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ TSPFILE NEXT IGNORE LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next ign              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextign " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                     INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       LOCK-INIT.
           OPEN OUTPUT LOCKFILE.
           MOVE SPACES TO LCK-RECORD.
           MOVE ZERO TO LCK-NUM.
           MOVE "Lock control" TO LCK-MESSAGE.
           WRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-READY.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (1) = 'R'
                     AND LCK-TBL (2) = 'R'
               READ LOCKFILE
               IF LCK-TBL (1) NOT = 'R'
               OR LCK-TBL (2) NOT = 'R'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-SHORT
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'G'  TO LCK-TBL (1), LCK-TBL (2)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-COMPLETE.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (1) = 'C'
                     AND LCK-TBL (2) = 'C'
               READ LOCKFILE
               IF LCK-TBL (1) NOT = 'C'
               OR LCK-TBL (2) NOT = 'C'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-LONG
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'G'  TO LCK-TBL (1), LCK-TBL (2)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-WAIT-FOR-GO.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           PERFORM UNTIL LCK-TBL (LCK-IDX) = 'G'
               READ LOCKFILE
               IF LCK-TBL (LCK-IDX) NOT = 'G'
                   CALL "CBL_GC_NANOSLEEP" USING SLP-SHORT
               END-IF
           END-PERFORM.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'X'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-MARK-READY.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'R'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-MARK-COMPLETE.
           OPEN I-O SHARING ALL OTHER RETRY FOREVER LOCKFILE.
           READ LOCKFILE RETRY FOREVER WITH LOCK
           MOVE 'C'  TO LCK-TBL (LCK-IDX)
           REWRITE LCK-RECORD.
           CLOSE LOCKFILE.

       LOCK-COMPLETE-AND-GO.
           PERFORM LOCK-MARK-COMPLETE
           PERFORM LOCK-WAIT-FOR-GO.

       LOCK-READY-AND-GO.
           PERFORM LOCK-MARK-READY
           PERFORM LOCK-WAIT-FOR-GO.

       DISPLAY-IT.
           ADD 1 TO SEQ.
           IF MSG (1:1) = '*'
               ACCEPT WS-TIME-NOW FROM TIME
               STRING WMI " :" SEQ ": " 
                      WS-NOW-MM ":" WS-NOW-SS "." WS-NOW-HS " : "
                      MSG (2:) INTO REPORT-RECORD
           ELSE
               STRING WMI " :" SEQ ": " MSG INTO REPORT-RECORD
           END-IF.
           WRITE REPORT-RECORD.
           MOVE SPACES TO MSG.
           MOVE SPACES TO REPORT-RECORD.
])

# CHECKME: do we need -std/-fmf-files here?
AT_CHECK([$COMPILE -std=mf -fmf-files prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])


AT_CAPTURE_FILE(./control.txt)

AT_DATA([reference],
[Control  :01: Loading test data file.
Control  :02: continue test
Control  :03: waiting step 1 completion
Control  :04: waiting step 2 completion
Control  :05: waiting step 3 completion
Control  :06: ending
])

AT_CHECK([diff reference control.txt], [0], [], [])


AT_CAPTURE_FILE(./parent.txt)

AT_DATA([reference],
[ PARENT  :01: READ Open                  Sts:00
 PARENT  :02: Next    ALP00000 Trms:0010
 PARENT  :03: Next    BET00000 Trms:0010
 PARENT  :04: OPEN NO SHARE              Sts:00
 PARENT  :05: Next    ALP00000 Trms:0010
 PARENT  :06: Next    BET00000 Trms:0010
 PARENT  :07: OPEN NO SHARE RETRY 15     Sts:00
 PARENT  :08: Next    ALP00000 Trms:0010
 PARENT  :09: Next    BET00000 Trms:0010
 PARENT  :10: OPEN NO SHARE RETRY 2      Sts:61
 PARENT  :11: Read Next                  Sts:47
 PARENT  :12: ending
Par Lck  :01: READ Open                  Sts:00
Par Lck  :02: Nextadv ALP00000 Trms:0010
Par Lck  :03: Nextadv BET00000 Trms:0010
Par Lck  :04: Nextadv CAM00000 Trms:0010
Par Lck  :05: Nextadv DEL00000 Trms:0010
Par Lck  :06: Prevadv HIJ00000 Trms:0010
Par Lck  :07: Prevadv GIB00000 Trms:0010
Par Lck  :08: Prevadv FOR00000 Trms:0010
Par Lck  :09: Prevadv EPS00000 Trms:0010
Par Lck  :10: Deleted ALP00000           Sts:00
Par Lck  :11: Read    CAM00000 Locked    Sts:00
Par Lck  :12: Read    FOR00000 Locked    Sts:00
Par Lck  :13: ending
Par Upd  :01: Read    CAM00000 no lock   Sts:00
Par Upd  :02: REWRITE CAM00000 Trms:0012 Sts:00
Par Upd  :03: Read    CAM00000 with LOCK Sts:00
Par Upd  :04: Re-Read CAM00000 with LOCK Sts:00
Par Upd  :05: REWRITE CAM00000 Trms:0012 Sts:00
Par Upd  :06: Read    CAM00000  and LOCK Sts:00
Par Upd  :07: REWRITE BET00000 No read!  Sts:00
Par Upd  :08: ending
])

AT_CHECK([diff reference parent.txt], [0], [], [])


AT_CAPTURE_FILE(./child.txt)

AT_DATA([reference],
[  CHILD  :01: READ Open                  Sts:00
  CHILD  :02: Next    ALP00000 Trms:0010
  CHILD  :03: Next    BET00000 Trms:0010
  CHILD  :04: OPEN NO SHARE              Sts:61
  CHILD  :05: Read Next                  Sts:47
  CHILD  :06: OPEN NO SHARE RETRY 15     Sts:00
  CHILD  :07: Next    ALP00000 Trms:0010
  CHILD  :08: Next    BET00000 Trms:0010
  CHILD  :09: OPEN NO SHARE RETRY 15     Sts:00
  CHILD  :10: Next    ALP00000 Trms:0010
  CHILD  :11: Next    BET00000 Trms:0010
  CHILD  :12: ending
Cld Adv  :01: READ Open                  Sts:00
Cld Adv  :02: Nextadv BET00000 Trms:0010
Cld Adv  :03: Nextadv DEL00000 Trms:0010
Cld Adv  :04: Nextadv EPS00000 Trms:0010
Cld Adv  :05: Nextadv GIB00000 Trms:0010
Cld Adv  :06: Prevadv HIJ00000 Trms:0010
Cld Adv  :07: Prevadv GIB00000 Trms:0010
Cld Adv  :08: Prevadv EPS00000 Trms:0010
Cld Adv  :09: Prevadv DEL00000 Trms:0010
Cld Ign  :10: READ Open                  Sts:00
Cld Ign  :11: Nextign BET00000 Trms:0010
Cld Ign  :12: Nextign CAM00000 Trms:0010
Cld Ign  :13: Nextign DEL00000 Trms:0010
Cld Ign  :14: Nextign EPS00000 Trms:0010
Cld Ign  :15: Nextign FOR00000 Trms:0010
Cld Ign  :16: Nextign GIB00000 Trms:0010
Cld Ign  :17: Nextign HIJ00000 Trms:0010
Cld Ign  :18: ending
Cld Upd  :01: Read    CAM00000 no lock   Sts:00
Cld Upd  :02: REWRITE CAM00000 Trms:0011 Sts:00
Cld Upd  :03: Read    CAM00000 with LOCK Sts:51
Cld Upd  :04: Read    CAM00000 retry LCK Sts:00
Cld Upd  :05: Re-Read CAM00000 with LOCK Sts:00
Cld Upd  :06: REWRITE CAM00000 Trms:0012 Sts:00
Cld Upd  :07: Read    CAM00000  and LOCK Sts:00
Cld Upd  :08: REWRITE BET00000 No read!  Sts:00
Cld Upd  :09: ending
])

AT_CHECK([diff reference child.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([RELATIVE File Locking])
AT_KEYWORDS([runfile])

# has timing issues - just skip until resolved later
AT_SKIP_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE2 ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

           SELECT LOCKFILE ASSIGN EXTERNAL RELLCK
           ORGANIZATION RELATIVE
           SHARING READ ONLY
           ACCESS IS RANDOM RELATIVE KEY IS LCK-REC
           FILE STATUS IS CUST-STAT.

           SELECT OPTIONAL REPORTIT ASSIGN TO REPORT-FILE 
           ORGANIZATION LINE SEQUENTIAL.

       DATA  DIVISION.
       FILE SECTION.
       FD  REPORTIT
           BLOCK CONTAINS 5 RECORDS.
      
       01  REPORT-RECORD   PIC X(80).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8). 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(4). 
      
       FD  FLATFILE2
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE S9(4). 

       FD  LOCKFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  LCK-RECORD.
           10  LCK-NUM                         PICTURE 9(3). 
           10  LCK-TBL                         PICTURE X OCCURS 4 TIMES. 
           10  LCK-MESSAGE                     PICTURE X(25). 

       WORKING-STORAGE SECTION.
      
       77  MAX-SUB                     PICTURE 9(4) VALUE 6.
       77  CUST-STAT                   PICTURE X(2).
       77  REC-NUM                     PICTURE 9(4) VALUE 1.
       77  LCK-REC                     PICTURE 9(4) VALUE 1.
       77  SLP-TIME                    PICTURE 9(9) BINARY VALUE 1.
       77  REPORT-FILE                 PICTURE X(32) VALUE "parent.txt".
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

       01  WORK-AREA.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.
      
       01  CMD-LINE     PIC X(64).
       01  WMI          PIC X(7).
       01  SEQ          PIC 9(2) VALUE 0.
       01  MSG          PIC X(64) VALUE " ".
      
       PROCEDURE DIVISION.

           ACCEPT CMD-LINE FROM COMMAND-LINE.
           CALL "C$TOUPPER" USING CMD-LINE BY VALUE LENGTH OF CMD-LINE.
           MOVE SPACES TO REPORT-RECORD.
           EVALUATE CMD-LINE
           WHEN  SPACES
               MOVE "control.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Control" TO WMI
               PERFORM LOADFILE
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  PARENT &"
               CALL "SYSTEM" USING "./prog  CHILD &"
               CALL "C$SLEEP" USING 2
               MOVE "continue test " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 1 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-EXCLUSIVE
               CALL "C$SLEEP" USING 2
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 1
               CALL "SYSTEM" USING "./prog  LOCK &"
               CALL "SYSTEM" USING "./prog  READADV &"
               CALL "C$SLEEP" USING 6
               MOVE "waiting step 2 completion " TO MSG
               PERFORM DISPLAY-IT
               PERFORM LOCK-EXCLUSIVE
               CALL "SYSTEM" USING "./prog  UPDT &"
               CALL "SYSTEM" USING "./prog  CHILDUP &"
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-EXCLUSIVE
               MOVE "waiting step 3 completion " TO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 1
               PERFORM LOCK-RELEASE
           WHEN "PARENT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE " PARENT" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 1
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 4
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-RETRY-SHORT
               PERFORM LOCK-RELEASE
           WHEN "CHILD"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "  CHILD" TO WMI
               PERFORM LOCK-SHARED
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 3
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-NO-SHARE
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
               CALL "C$SLEEP" USING 4
               PERFORM LOCK-SHARED
               PERFORM READ-FILE-RETRY-SHARE
               PERFORM LOCK-RELEASE
           WHEN "UPDT"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Upd" TO WMI
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "CHILDUP"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Upd" TO WMI
               MOVE 1 TO SLP-TIME
               PERFORM LOCK-SHARED
               PERFORM UPDT-SHARE
               PERFORM LOCK-RELEASE
           WHEN "LOCK"
               MOVE "parent.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Par Lck" TO WMI
               PERFORM READ-FILE-ADV
               OPEN I-O SHARING ALL OTHER FLATFILE2
               MOVE 1 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               DELETE FLATFILE2
               STRING "Deleted " C2-CUST-NUM "        1  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               MOVE 3 TO REC-NUM
               READ FLATFILE2 WITH LOCK
               STRING "Read    " C2-CUST-NUM " Locked 3  Sts:" 
                      CUST-STAT INTO MSG
               PERFORM DISPLAY-IT
               CALL "C$SLEEP" USING 4
               CLOSE FLATFILE2
           WHEN "READADV"
               MOVE "child.txt" TO REPORT-FILE
               OPEN EXTEND REPORTIT
               MOVE "Cld Adv" TO WMI
               CALL "C$SLEEP" USING 2
               PERFORM READ-FILE-ADV
               MOVE "Cld Ign" TO WMI
               PERFORM READ-FILE-IGN
           END-EVALUATE.
           MOVE "ending " TO MSG
           PERFORM DISPLAY-IT
           CLOSE REPORTIT.
           STOP RUN.

       READ-FILE.
           OPEN INPUT FLATFILE.
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 2 TIMES
             PERFORM READ-NEXT
             CALL "C$SLEEP" USING 1
           END-PERFORM.
           CLOSE FLATFILE.

       READ-FILE-NO-SHARE.
           OPEN INPUT SHARING NO OTHER FLATFILE.
           STRING "NO SHARE Open              Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHARE.
           OPEN INPUT SHARING NO OTHER RETRY 10 SECONDS FLATFILE.
           STRING "RETRY SHARE Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CALL "C$SLEEP" USING 2
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CALL "C$SLEEP" USING 2
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 2
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       READ-FILE-RETRY-SHORT.
           OPEN INPUT SHARING NO OTHER RETRY 2 SECONDS FLATFILE.
           STRING "RETRY SHORT Open           Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           IF  CUST-STAT  = "00"
               PERFORM 2 TIMES
                 PERFORM READ-NEXT
                 CALL "C$SLEEP" USING 1
               END-PERFORM
               CLOSE FLATFILE
           ELSE
               PERFORM READ-NEXT
               CALL "C$SLEEP" USING 1
               CLOSE FLATFILE
               CALL "C$SLEEP" USING 1
           END-IF.

       UPDT-SHARE.
           OPEN I-O SHARING ALL OTHER FLATFILE2.
           MOVE 3 TO REC-NUM.
           CALL "C$SLEEP" USING SLP-TIME
           READ FLATFILE2
           STRING "Read    " C2-CUST-NUM " no lock   Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           ADD 1 TO C2-NO-TERMINALS
           REWRITE FILE FLATFILE2 FROM TSP2-RECORD WITH NO LOCK
      *    REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           CALL "C$SLEEP" USING 2
           READ FLATFILE2 WITH LOCK
           STRING "Re-Read " C2-CUST-NUM " with LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.
           REWRITE TSP2-RECORD WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " Trms:" C2-NO-TERMINALS 
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT

           READ FLATFILE2 WITH LOCK
           STRING "Read    " C2-CUST-NUM "  and LOCK Sts:" CUST-STAT 
                  INTO MSG
           PERFORM DISPLAY-IT.

           MOVE 2 TO REC-NUM.
           MOVE DATA-CUST-NUM (REC-NUM) TO C2-CUST-NUM
           MOVE WMI   TO C2-CUST-NUM (3:6)
           REWRITE TSP2-RECORD RETRY 10 SECONDS WITH NO LOCK
           STRING "REWRITE " C2-CUST-NUM " No read! "
                  " Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           CLOSE FLATFILE2.
      
       READ-NEXT.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT
           IF CUST-STAT NOT = "00"
             STRING "Read Next                  Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Next    " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-ADV.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-ADV
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-ADV.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT ADVANCING ON LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next adv              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextadv " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       READ-FILE-IGN.
           OPEN INPUT SHARING ALL OTHER FLATFILE
           STRING "READ Open                  Sts:" CUST-STAT INTO MSG
           PERFORM DISPLAY-IT
           PERFORM 4 TIMES
             PERFORM READ-NEXT-IGN
           END-PERFORM.
           CLOSE FLATFILE.

       READ-NEXT-IGN.
           MOVE SPACES                       TO TSPFL-RECORD.
           READ FLATFILE NEXT IGNORE LOCK
           IF CUST-STAT NOT = "00"
             STRING "Read Next ign              Sts:" CUST-STAT
                    INTO MSG
           ELSE
             STRING "Nextign " CM-CUST-NUM " Trms:" CM-NO-TERMINALS 
                    " #" REC-NUM INTO MSG
           END-IF.
           PERFORM DISPLAY-IT.

       DISPLAY-IT.
           ADD 1 TO SEQ.
           STRING WMI " :" SEQ ": " MSG INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO MSG.
           MOVE SPACES TO REPORT-RECORD.

       LOCK-EXCLUSIVE.
           OPEN I-O SHARING NO OTHER RETRY FOREVER LOCKFILE.

       LOCK-SHARED.
           OPEN INPUT SHARING READ ONLY RETRY FOREVER LOCKFILE.

       LOCK-RELEASE.
           CLOSE LOCKFILE.

       LOADFILE.
           STRING WMI " .  . Loading sample program data file"
                            INTO REPORT-RECORD.
           WRITE REPORT-RECORD.
           MOVE SPACES TO REPORT-RECORD.
      
           OPEN OUTPUT LOCKFILE.
           MOVE SPACES TO LCK-RECORD.
           MOVE ZERO TO LCK-NUM.
           MOVE "Lock control" TO LCK-MESSAGE.
           WRITE FILE LOCKFILE FROM LCK-RECORD
      *    WRITE LCK-RECORD.
           CLOSE LOCKFILE.

           OPEN OUTPUT FLATFILE.
           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           CLOSE FLATFILE.
      
       LOAD-RECORD.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE 10                           TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])


AT_CAPTURE_FILE(./control.txt)

AT_DATA([reference],
[Control .  . Loading sample program data file
Control :01: continue test
Control :02: waiting step 1 completion
Control :03: waiting step 2 completion
Control :04: waiting step 3 completion
Control :05: ending
])

AT_CHECK([diff reference control.txt], [0], [], [])


AT_CAPTURE_FILE(./parent.txt)

AT_DATA([reference],
[ PARENT :01: READ Open                  Sts:00
 PARENT :02: Next    ALP00000 Trms:0010 #0001
 PARENT :03: Next    BET00000 Trms:0010 #0002
 PARENT :04: NO SHARE Open              Sts:00
 PARENT :05: Next    ALP00000 Trms:0010 #0001
 PARENT :06: Next    BET00000 Trms:0010 #0002
 PARENT :07: RETRY SHARE Open           Sts:00
 PARENT :08: Next    ALP00000 Trms:0010 #0001
 PARENT :09: Next    BET00000 Trms:0010 #0002
 PARENT :10: RETRY SHORT Open           Sts:61
 PARENT :11: Read Next                  Sts:47
 PARENT :12: ending
Par Lck :01: READ Open                  Sts:00
Par Lck :02: Nextadv ALP00000 Trms:0010 #0001
Par Lck :03: Nextadv BET00000 Trms:0010 #0002
Par Lck :04: Nextadv DEL00000 Trms:0010 #0003
Par Lck :05: Nextadv EPS00000 Trms:0010 #0004
Par Lck :06: Deleted ALP00000        1  Sts:00
Par Lck :07: Read    DEL00000 Locked 3  Sts:00
Par Lck :08: ending
Par Upd :01: Read    DEL00000 no lock   Sts:00
Par Upd :02: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :03: Read    DEL00000 with LOCK Sts:00
Par Upd :04: Re-Read DEL00000 with LOCK Sts:00
Par Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Par Upd :06: Read    DEL00000  and LOCK Sts:00
Par Upd :07: REWRITE BEPar Up No read!  Sts:00
Par Upd :08: ending
])

AT_CHECK([diff reference parent.txt], [0], [], [])


AT_CAPTURE_FILE(./child.txt)

AT_DATA([reference],
[  CHILD :01: READ Open                  Sts:00
  CHILD :02: Next    ALP00000 Trms:0010 #0001
  CHILD :03: Next    BET00000 Trms:0010 #0002
  CHILD :04: NO SHARE Open              Sts:61
  CHILD :05: Read Next                  Sts:47
  CHILD :06: RETRY SHARE Open           Sts:00
  CHILD :07: Next    ALP00000 Trms:0010 #0001
  CHILD :08: Next    BET00000 Trms:0010 #0002
  CHILD :09: RETRY SHARE Open           Sts:00
  CHILD :10: Next    ALP00000 Trms:0010 #0001
  CHILD :11: Next    BET00000 Trms:0010 #0002
  CHILD :12: ending
Cld Adv :01: READ Open                  Sts:00
Cld Adv :02: Nextadv BET00000 Trms:0010 #0002
Cld Adv :03: Nextadv EPS00000 Trms:0010 #0004
Cld Adv :04: Nextadv FOR00000 Trms:0010 #0005
Cld Adv :05: Nextadv GAM00000 Trms:0010 #0006
Cld Ign :06: READ Open                  Sts:00
Cld Ign :07: Nextign BET00000 Trms:0010 #0002
Cld Ign :08: Nextign DEL00000 Trms:0010 #0003
Cld Ign :09: Nextign EPS00000 Trms:0010 #0004
Cld Ign :10: Nextign FOR00000 Trms:0010 #0005
Cld Ign :11: ending
Cld Upd :01: Read    DEL00000 no lock   Sts:00
Cld Upd :02: REWRITE DEL00000 Trms:0012 Sts:51
Cld Upd :03: Read    DEL00000 with LOCK Sts:51
Cld Upd :04: Re-Read DEL00000 with LOCK Sts:00
Cld Upd :05: REWRITE DEL00000 Trms:0011 Sts:00
Cld Upd :06: Read    DEL00000  and LOCK Sts:00
Cld Upd :07: REWRITE BECld Up No read!  Sts:00
Cld Upd :08: ending
])

AT_CHECK([diff reference child.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([Read on optional missing file])
AT_KEYWORDS([runfile])

AT_DATA([prog.cob],
[       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL INFILE  ASSIGN TO
                "missing.txt"
                ORGANIZATION IS RELATIVE
                ACCESS IS SEQUENTIAL
                FILE STATUS IS WSFS.
       DATA DIVISION.
       FILE SECTION.
       FD  INFILE.
       01  INREC             PIC X(80).
       WORKING-STORAGE SECTION.
       01  WSFS           PIC X(2).
           88  RECORDFOUND VALUE "00".
       01  WSINREC         PIC X(80).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
      *    Open missing file
           OPEN INPUT INFILE
      *    First read, raise a FS 10 (AT END) which is expected
           READ INFILE INTO WSINREC
           END-READ
           IF WSFS = '10'
             DISPLAY "1st Read on missing optional file = " WSFS " OK"
           ELSE
             DISPLAY "1st Read on missing optional file = " WSFS " Bad"
           END-IF.

      *    Second read, should raise a FS 46 (READ AFTER AT END)
      *    but a FS 23 is raised instead.
           READ INFILE INTO WSINREC
           END-READ

           IF WSFS = '46'
             DISPLAY "2nd Read on missing optional file = " WSFS " OK"
           ELSE
             DISPLAY "2nd Read on missing optional file = " WSFS " Bad"
           END-IF.

           CLOSE INFILE
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1st Read on missing optional file = 10 OK
2nd Read on missing optional file = 46 OK
], [])

AT_CLEANUP


AT_SETUP([SELECT with ASSIGN in LINKAGE])
AT_KEYWORDS([runfile FILE-CONTROL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  f-path     PIC X(80) VALUE "fooasg.txt".
       01  x-path     PIC X(80) VALUE "foxasg.txt".
       01  y-path     PIC X(80) VALUE "foyasg.txt".
       01  REC1       PIC 9(4) VALUE 1.
       01  REC2       PIC 9(4) VALUE 2.
       01  CUST-STAT  PIC X(2) VALUE "XX".
       
       PROCEDURE DIVISION.
           CALL "TSTOPN"  USING OMITTED.
           CALL "TSTOPN"  USING y-path.
           CALL "TSTOPEN" USING f-path  REC1 CUST-STAT.
           CALL "TSTOPEN" USING x-path  REC1 CUST-STAT.
           CALL "TSTOPEN" USING OMITTED REC1 CUST-STAT.
           CALL "TSTOPEN" USING f-path  REC2 CUST-STAT.
           CALL "TSTOPEN" USING x-path  REC2 CUST-STAT.
           STOP RUN.
           END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTOPEN.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN s-path
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM 
           RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.
       
       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-line PIC X(79).
       
       WORKING-STORAGE SECTION.
       01  z-path   PIC X(80) VALUE "foozzz.txt".

       LINKAGE SECTION.
       01  s-path     PIC X(80).
       01  REC-NUM    PIC 9(4).
       01  CUST-STAT  PIC X(2).
       
       PROCEDURE DIVISION USING s-path, REC-NUM, CUST-STAT.
           IF ADDRESS OF s-path = NULL 
              SET ADDRESS OF s-path TO ADDRESS OF z-path
           END-IF.
           IF REC-NUM > 1
              OPEN I-O f 
              DISPLAY "Extend file: " s-path(1:10) 
                   " - " CUST-STAT " #" REC-NUM "."
           ELSE
              OPEN OUTPUT f 
              DISPLAY "Output file: " s-path(1:10) 
                   " - " CUST-STAT " #" REC-NUM "."
           END-IF.
           IF CUST-STAT NOT = "00"
               DISPLAY "Opened error: " CUST-STAT "."
               GOBACK
           END-IF.
           MOVE "Hello World" TO f-line.
           MOVE REC-NUM       TO f-line (20:4).
           WRITE f-line.
           IF CUST-STAT NOT = "00"
               DISPLAY "WRITE error: " CUST-STAT "."
           END-IF.
           CLOSE f.
           GOBACK.
       END PROGRAM TSTOPEN.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. TSTOPN.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT f ASSIGN b-path
           ORGANIZATION LINE SEQUENTIAL
           FILE STATUS IS IO-STS.
       
       DATA DIVISION.
       FILE SECTION.
       FD  f.
       01  f-line PIC X(80).
       
       WORKING-STORAGE SECTION.
       01  IO-STS   PIC X(2) VALUE "00".
       01  b-path   PIC X(80) BASED.

       LINKAGE SECTION.
       01  s-path   PIC X(80).
       
       PROCEDURE DIVISION USING s-path.
           SET ADDRESS OF b-path TO ADDRESS OF s-path
           OPEN OUTPUT f 
           IF IO-STS NOT = "00"
               DISPLAY "Opened error: " IO-STS "."
               GOBACK
           END-IF.
           DISPLAY "Opened file: " s-path(1:10) ".".
           MOVE "Hello World" TO f-line.
           WRITE f-line.
           CLOSE f.
           GOBACK.
       END PROGRAM TSTOPN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Opened error: 31.
Opened file: foyasg.txt.
Output file: fooasg.txt - 00 #0001.
Output file: foxasg.txt - 00 #0001.
Output file: foozzz.txt - 00 #0001.
Extend file: fooasg.txt - 00 #0002.
Extend file: foxasg.txt - 00 #0002.
], [])

AT_CLEANUP


AT_SETUP([INDEXED File Variable len record])
AT_KEYWORDS([runfile])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       Identification division.
       Program-id.  tb is initial program.
      *
       Environment division.
       Configuration section.
      *
       Source-computer.  GNU-Cobol.
       Object-computer.  GNU-Cobol.

       Special-names.
      *
      * Display x upon std-out, to get 1>file1.txt.
           console is std-out
      * Display x upon std-err, to get 2>file2.txt
           syserr  is std-err
           .

       Input-output section.
       File-control.
      *
           Select optional tbw
               assign to path-tbw
               organization is indexed
               access mode is dynamic
               record key is tbw-key
               alternate record key is tbw-alt
                   suppress when space
               sharing with no other
               file status is fs-file-status.
      *
       I-o-control.
      *
       Data division.
       File section.
      *
       FD  tbw
           record is varying in size
               from 107 to 362 characters
               depending on end-tbw-record
           .
       01  tbw-record.
           02 tbw-key                        pic x(100).
           02 tbw-alt.
               03 tbw-alt-1                  pic 9(02).
               03 tbw-alt-2                  pic 9(04).
           02 tbw-f1                         pic x(01).
           02 tbw-f2                         pic x(255).
      *
       Working-storage section.

       01  fs-file-status                 pic x(02).

       01  end-tbw-record                 pic 9(09) binary.

       01  flag-tbw                       pic x(01) value low-value.
           88 flag-tbw-open   value high-value.
           88 flag-tbw-closed value low-value.

       01  path-tbw                       pic x(255) value space.

       Procedure division.

      * Prepare.
           Move "tbw" to path-tbw.

      * First test.
           Perform tbw-delete-file thru tbw-exit.

           Perform tbw-open-i-o    thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move 122 to end-tbw-record.
           Move "aaaaa" to tbw-key.
           Move spaces to tbw-alt
                          tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move low-values to tbw-alt.
           Perform tbw-start-alternate thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

      * Second test.
           Perform tbw-close thru tbw-exit.

           Perform tbw-delete-file thru tbw-exit.

           Perform tbw-open-i-o thru tbw-exit.

           Move low-values to tbw-key.
           Perform tbw-start-primary-greater thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move 163 to end-tbw-record.
           Move "aaaaa" to tbw-key.
           Move 1 to tbw-alt-1
                     tbw-alt-2.
           Move spaces to tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move 122 to end-tbw-record.
           Move "aaaab" to tbw-key.
           Move spaces to tbw-alt
                          tbw-f1
                          tbw-f2.
           Perform tbw-write thru tbw-exit.

           Move low-values to tbw-alt.
           Perform tbw-start-alternate thru tbw-exit.

           Perform tbw-read-next thru tbw-exit.

           Move spaces to tbw-alt.
           Perform tbw-rewrite thru tbw-exit.

      * Finish.
           Perform tbw-close thru tbw-exit.
           Display "Test completed".
           Stop run.

      * I/O.
       tbw-Open-I-O.
           If flag-tbw-open
               Perform tbw-Close thru tbw-Close-exit
           end-if.
           Display "open".
           Open i-o tbw.
           Display "open".
           If fs-file-status is less than "10"
               Set flag-tbw-open to true
           end-if.
           Go to tbw-exit.
      *
       tbw-Start-Primary-Greater.
           Display "start > tbw-key".
           Start tbw
               key is greater than tbw-key
               invalid key Continue
           end-start.
           Display "start > tbw-key".
           Go to tbw-exit.
      *
       tbw-Start-Alternate.
           Display "start >= tbw-alt".
           Start tbw
               key is not less than tbw-alt
               invalid key Continue
           end-start.
           Display "start >= tbw-alt".
           Go to tbw-exit.
      *
       tbw-Read-Next.
           Display "read next".
           Read tbw
               next record
               at end Continue
           end-read.
           Display "read next done".
           Go to tbw-exit.
      *
       tbw-Write.
           Display "write".
           Write tbw-record
               invalid key Continue
           end-write.
           Display "write".
           Go to tbw-exit.
      *
       tbw-Rewrite.
           Display "rewrite".
           Rewrite tbw-record
               invalid key Continue
           end-rewrite.
           Display "rewrite " fs-file-status.
           Go to tbw-exit.
      *
       tbw-Delete-File.
           If flag-tbw-open
               Perform tbw-Close thru tbw-Close-exit
           end-if.
           Move "xx" to fs-file-status.
           Display "delete file".
           Delete file tbw
           end-delete.
           Display "delete file".
           Go to tbw-exit.
      *
       tbw-Close.
           If flag-tbw-open
               Display "close"
               Close tbw
               Display "close"
               Set flag-tbw-closed to true
           end-if.
       tbw-Close-exit.
           Exit.
       tbw-exit.
           Exit.
])

# CHECKME: do we need -std=mf here?
AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [delete file
delete file
open
open
start > tbw-key
start > tbw-key
read next
read next done
write
write
start >= tbw-alt
start >= tbw-alt
start > tbw-key
start > tbw-key
read next
read next done
read next
read next done
close
close
delete file
delete file
open
open
start > tbw-key
start > tbw-key
read next
read next done
write
write
write
write
start >= tbw-alt
start >= tbw-alt
read next
read next done
rewrite
rewrite 00
close
close
Test completed
], [])

AT_CLEANUP


AT_SETUP([GC LINE SEQUENTIAL Long-Record])
AT_KEYWORDS([runfile])

AT_DATA([inp_data],
[Record 1................................X.......
Record 2.....................X
Record 3................................X...
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INFILE     ASSIGN TO EXTERNAL INFILE
                ORGANIZATION IS LINE SEQUENTIAL
                FILE STATUS  IS INPUT-STATUS .
      
           SELECT OUTFILE   ASSIGN TO EXTERNAL OUTFILE
                ORGANIZATION IS LINE SEQUENTIAL
                FILE STATUS  IS INPUT-STATUS .
      
       DATA DIVISION.
       FILE SECTION.
       FD INFILE
             RECORD IS VARYING IN SIZE FROM 18 TO 40 CHARACTERS
             DEPENDING ON INPUT-LEN
            .
       01  INPUT-REC           PIC X(40).
      
       FD OUTFILE
             RECORD IS VARYING IN SIZE FROM 18 TO 40 CHARACTERS
             DEPENDING ON INPUT-LEN
            .
       01  OUTPUT-REC          PIC X(40).
      
       WORKING-STORAGE SECTION.
      
       01  OUTPUT-FILE         PIC X(19)     VALUE 'TEST-FILE'.
       01  INPUT-FILE          PIC X(19)     VALUE 'TEST-INP'.
       01  INPUT-STATUS        PIC XX.
       01  INPUT-LEN           PIC 999  VALUE 18 .
      
       PROCEDURE DIVISION.
       A000-BEGIN.
           OPEN INPUT INFILE.
           READ INFILE
           DISPLAY " Read 1: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           READ INFILE
           DISPLAY " Read 2: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           MOVE 0 TO INPUT-LEN
           READ INFILE
           DISPLAY " Read 3: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           MOVE SPACES TO INPUT-REC
           MOVE 0 TO INPUT-LEN
           READ INFILE
           DISPLAY " Read 4: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           IF INPUT-STATUS = "00"
               DISPLAY "       :" INPUT-REC ":" 
           END-IF
           CLOSE INFILE

           OPEN OUTPUT OUTFILE
           MOVE 9 TO INPUT-LEN
           MOVE "Record 1............." TO OUTPUT-REC
           WRITE OUTPUT-REC
           DISPLAY "Write 1: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
                             UPON CONSOLE
           MOVE 64 TO INPUT-LEN
           MOVE ALL '.' TO OUTPUT-REC
           MOVE "Record 2" TO OUTPUT-REC (1:8)
           WRITE OUTPUT-REC
           DISPLAY "Write 2: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
                             UPON CONSOLE
           CLOSE OUTFILE
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([export DD_INFILE=./inp_data
export OUTFILE=TEST-FILE
./prog], [0], [ Read 1: STATUS IS 00 LENGTH IS 040
       :Record 1................................:
 Read 2: STATUS IS 00 LENGTH IS 030
       :Record 2.....................X          :
 Read 3: STATUS IS 00 LENGTH IS 040
       :Record 3................................:
 Read 4: STATUS IS 10 LENGTH IS 000
Write 1: STATUS IS 00 LENGTH IS 009
Write 2: STATUS IS 00 LENGTH IS 064
], [])


AT_CAPTURE_FILE(./TEST-FILE)

AT_DATA([reference],
[Record 1.
Record 2................................
])

AT_CHECK([gcdiff reference TEST-FILE], [0], [], [])

AT_CLEANUP


AT_SETUP([MF LINE SEQUENTIAL Long-Record])
AT_KEYWORDS([runfile])

AT_DATA([inp_data],
[Record 1................................X.......
Record 2.....................X
Record 3................................X...
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INFILE     ASSIGN TO EXTERNAL INFILE
                ORGANIZATION IS LINE SEQUENTIAL
                FILE STATUS  IS INPUT-STATUS .
      
           SELECT OUTFILE   ASSIGN TO EXTERNAL OUTFILE
                ORGANIZATION IS LINE SEQUENTIAL
                FILE STATUS  IS INPUT-STATUS .
      
       DATA DIVISION.
       FILE SECTION.
       FD INFILE
             RECORD IS VARYING IN SIZE FROM 18 TO 40 CHARACTERS
             DEPENDING ON INPUT-LEN
            .
       01  INPUT-REC           PIC X(40).
      
       FD OUTFILE
             RECORD IS VARYING IN SIZE FROM 18 TO 40 CHARACTERS
             DEPENDING ON INPUT-LEN
            .
       01  OUTPUT-REC          PIC X(40).
      
       WORKING-STORAGE SECTION.
      
       01  OUTPUT-FILE         PIC X(19)     VALUE 'TEST-FILE'.
       01  INPUT-FILE          PIC X(19)     VALUE 'TEST-INP'.
       01  INPUT-STATUS        PIC XX.
       01  INPUT-LEN           PIC 999  VALUE 18 .
      
       PROCEDURE DIVISION.
       A000-BEGIN.
           OPEN INPUT INFILE.
           READ INFILE
           DISPLAY " Read 1: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           READ INFILE
           DISPLAY " Read 2: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           MOVE 0 TO INPUT-LEN
           READ INFILE
           DISPLAY " Read 3: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           DISPLAY "       :" INPUT-REC ":" 
           MOVE SPACES TO INPUT-REC
           MOVE 0 TO INPUT-LEN
           READ INFILE
           DISPLAY " Read 4: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
           IF INPUT-STATUS = "00"
               DISPLAY "       :" INPUT-REC ":" 
           END-IF
           CLOSE INFILE

           OPEN OUTPUT OUTFILE
           MOVE 9 TO INPUT-LEN
           MOVE "Record 1............." TO OUTPUT-REC
           WRITE OUTPUT-REC
           DISPLAY "Write 1: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
                             UPON CONSOLE
           MOVE 64 TO INPUT-LEN
           MOVE ALL '.' TO OUTPUT-REC
           MOVE "Record 2" TO OUTPUT-REC (1:8)
           WRITE OUTPUT-REC
           DISPLAY "Write 2: STATUS IS " INPUT-STATUS 
                   " LENGTH IS " INPUT-LEN
                             UPON CONSOLE
           CLOSE OUTFILE
           STOP RUN.
])

# FIXME: must work with -std=mf alone --> -fmf-files split and included as configuration options!
# AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])
AT_CHECK([$COMPILE -std=mf -fmf-files prog.cob], [0], [], [])

AT_CHECK([export DD_INFILE=./inp_data
export OUTFILE=TEST-FILE
$COBCRUN_DIRECT ./prog], [0],
[ Read 1: STATUS IS 00 LENGTH IS 040
       :Record 1................................:
 Read 2: STATUS IS 00 LENGTH IS 008
       :X.......                                :
 Read 3: STATUS IS 00 LENGTH IS 030
       :Record 2.....................X          :
 Read 4: STATUS IS 00 LENGTH IS 040
       :Record 3................................:
Write 1: STATUS IS 00 LENGTH IS 009
Write 2: STATUS IS 00 LENGTH IS 064
], [])


AT_CAPTURE_FILE(./TEST-FILE)

AT_DATA([reference],
[Record 1.
Record 2................................
])

AT_CHECK([gcdiff reference TEST-FILE], [0], [], [])

AT_CLEANUP


AT_SETUP([Indexed with FH--FCD])
AT_KEYWORDS([FH--FCD])

AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
      
       PROGRAM-ID. prog.
      
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
      
      $set fcdreg
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT TSPFILE 
           ASSIGN TO "mytstisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS PRIME-KEY
           SOURCE IS CM-CUST-NUM

           ALTERNATE RECORD KEY IS SPLIT-KEY2
           SOURCE IS CM-TELEPHONE,CM-MACHINE 
      *         WITH DUPLICATES

           ALTERNATE RECORD KEY IS SPLIT-KEY3
           SOURCE IS CM-DISK,CM-TAPE
      *         WITH DUPLICATES
      *         SUPPRESS WHEN ALL "*"
           FILE STATUS IS CUST-STAT
           .

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSPFL-RECORD.
           05  TSPFL-REC. 
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3). 
             15  CM-CUST-NNN                   PICTURE X(5). 
           10  CM-STATUS                       PICTURE X. 
           10  CM-COMPANY                      PICTURE X(25). 
           10  CM-ADDRESS-1                    PICTURE X(25). 
           10  CM-ADDRESS-2                    PICTURE X(25). 
           10  CM-ADDRESS-3                    PICTURE X(25). 
           10  CM-TELEPHONE                    PICTURE 9(10). 
           10  CM-DP-MGR                       PICTURE X(25). 
           10  CM-MACHINE                      PICTURE X(8). 
           10  CM-MEMORY                       PICTURE X(4). 
           10  CM-DISK                         PICTURE X(8). 
           10  CM-TAPE                         PICTURE X(8). 
           10  CM-NO-TERMINALS                 PICTURE 9(5). 
      
       WORKING-STORAGE SECTION.
       01  CUST-STAT.
           05  STAT-1 PICTURE 9(4) COMP SYNC.
           05  FILLER REDEFINES STAT-1.
               10  STAT-X1 PIC X COMP-X.
               10  STAT-X2 PIC X COMP-X.
       77  BYTE-1  PICTURE 9(3).
       77  BYTE-2  PICTURE 9(3).
       77  MAX-SUB           VALUE  16         PICTURE 9(2).
       77  IDX                                 PICTURE 9.
       77  IDX2                                PICTURE 9.
       77  OUT-FILE-NAME                       PICTURE X(9)
           VALUE "myextisam".
      
       01  TEST-DATA.
      
         02  DATA-CUST-NUM-TBL.
      
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".
      
         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.
      
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
      
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.
      
           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
      
         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.
      
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
      
         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.
      
           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".
      
         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.
      
           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.
      
         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.
      
           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
      
         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.
      
           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".
      
         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.
      
           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.
      
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(2) VALUE 0.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
               88  NULL-KEY                    VALUE 4 5 8 12 14.
      
           05  TSPFL-KEY                       PICTURE X(8).
           05  KC-PTR                          USAGE POINTER.
      
       LINKAGE SECTION.
      
       01  TSP-FCD.
           COPY "xfhfcd.cpy".

       01 key-def.
           03 kdb-len             pic 9(4) comp-x.
           03 filler              pic x(4).
           03 key-nkeys           pic 9(4) comp-x.
           03 filler              pic x(6).
           03 key-defs occurs 1 to 8 times depending on key-nkeys.
              05 key-count       pic 9(3) comp-x.
              05 key-offset      pic 9(3) comp-x.
              05 key-flags       pic X  comp-x.
              05 key-compression pic X  comp-x.
              05 key-sparse      pic x.
              05 filler          pic x(9).                 

       01 key-comp.
           03 kc-desc            pic X comp-x.
           03 kc-type            pic X comp-x.
           03 kc-pos             pic 9(9) comp-x.
           03 kc-len             pic 9(9) comp-x.

       01 TSP-FILENAME   PIC X(256).
       PROCEDURE DIVISION.
      
       MAINFILE.
           SET ADDRESS OF TSP-FCD TO ADDRESS OF FH--FCD OF TSPFILE.
           SET ADDRESS OF KEY-DEF TO ADDRESS OF FH--KEYDEF OF TSPFILE.
           DISPLAY "Other Flags " FCD-OTHER-FLAGS "."
           DISPLAY "File has " key-nkeys " keys."
           DISPLAY "Key def  " kdb-len " bytes."
           SET ADDRESS OF TSP-FILENAME TO FCD-FILENAME-ADDRESS.
           DISPLAY "File assigned is '" 
                   TSP-FILENAME (1:FCD-NAME-LENGTH) "'".
           SET FCD-FILENAME-ADDRESS TO ADDRESS OF OUT-FILE-NAME.
           MOVE LENGTH OF OUT-FILE-NAME TO FCD-NAME-LENGTH.
           DISPLAY "*** Dump FCD before changes"
           PERFORM DUMP-FCD.
           MOVE 64 TO KEY-FLAGS (2) 
           MOVE 66 TO KEY-FLAGS (3) 
           MOVE '*' TO KEY-SPARSE (3) 
           DISPLAY "*** Dump FCD after changes"
           PERFORM DUMP-FCD.
           PERFORM LOADFILE.
           PERFORM LISTFILE.
           STOP RUN.
      
       DUMP-FCD.
           PERFORM VARYING IDX FROM 1 BY 1
                     UNTIL IDX > key-nkeys
             IF key-sparse (idx) < ' '
               MOVE ' ' TO key-sparse (idx)
             END-IF
             DISPLAY "Key" IDX " has " key-count (idx) " parts,"
                     " Offset " key-offset (idx)
                     " Flags " key-flags (idx)
                     " Comp " key-compression (idx)
                     " Sparse " key-sparse (idx) "."
             SET KC-PTR TO ADDRESS OF KEY-DEF
             SET KC-PTR UP BY key-offset (idx)
             PERFORM VARYING IDX2 FROM 1 BY 1
                     UNTIL IDX2 > key-count (idx)
               SET ADDRESS OF KEY-COMP TO KC-PTR
               DISPLAY "      Pos " kc-pos " Len " kc-len
               SET KC-PTR UP BY LENGTH OF KEY-COMP
             END-PERFORM
           END-PERFORM.

       LOADFILE.
           OPEN OUTPUT TSPFILE
           SET ADDRESS OF TSP-FILENAME TO FCD-FILENAME-ADDRESS.
           DISPLAY "Loading sample file '"
                   TSP-FILENAME (1:FCD-NAME-LENGTH) "'"
                            UPON CONSOLE.
      
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "05"
               DISPLAY "Error " CUST-STAT " opening '"
                       TSP-FILENAME (1:FCD-NAME-LENGTH) "' file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
      
           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1 
                          UNTIL SUB > MAX-SUB.
      
           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.
      
      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*
      
       1000-LOAD-RECORD.
      
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
      
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK 
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.
           IF  NULL-KEY
               MOVE ALL "*"                  TO CM-DISK
               MOVE ALL "*"                  TO CM-TAPE.
           IF  SUB = 1 OR 6
               MOVE "2417"                   TO CM-DISK 
               MOVE "549  mmm"               TO CM-TAPE.
      
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "WRITE: " TSPFL-KEY ", Status: " 
                       CUST-STAT UPON CONSOLE
           END-IF. 
      
       LISTFILE.
           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           SET ADDRESS OF TSP-FILENAME TO FCD-FILENAME-ADDRESS.
           DISPLAY "List sample file '"
                   TSP-FILENAME (1:FCD-NAME-LENGTH) "'"
                            UPON CONSOLE.
           IF  CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               IF CUST-STAT (1:1) = "9"
                   DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
               END-IF
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > MAX-SUB
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           MOVE ALL 'Z'                      TO TSPFL-RECORD.
           START TSPFILE KEY LESS THAN PRIME-KEY
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > MAX-SUB
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE BY KEY3" UPON CONSOLE.
           MOVE ZERO                         TO REC-NUM
           MOVE SPACES                       TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN OR EQUAL TO SPLIT-KEY3
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF  CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL (CUST-STAT NOT = "00" 
                      AND CUST-STAT NOT = "02")
                      OR REC-NUM > MAX-SUB
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File after " REC-NUM UPON CONSOLE
           END-IF.
           CLOSE TSPFILE.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [Other Flags 000.
File has 0003 keys.
Key def  0320 bytes.
File assigned is 'mytstisam'
*** Dump FCD before changes
Key1 has 001 parts, Offset 062 Flags 000 Comp 000 Sparse  .
      Pos 000000000 Len 000000008
Key2 has 002 parts, Offset 072 Flags 000 Comp 000 Sparse  .
      Pos 000000109 Len 000000010
      Pos 000000144 Len 000000008
Key3 has 002 parts, Offset 092 Flags 000 Comp 000 Sparse  .
      Pos 000000156 Len 000000008
      Pos 000000164 Len 000000008
*** Dump FCD after changes
Key1 has 001 parts, Offset 062 Flags 000 Comp 000 Sparse  .
      Pos 000000000 Len 000000008
Key2 has 002 parts, Offset 072 Flags 064 Comp 000 Sparse  .
      Pos 000000109 Len 000000010
      Pos 000000144 Len 000000008
Key3 has 002 parts, Offset 092 Flags 066 Comp 000 Sparse *.
      Pos 000000156 Len 000000008
      Pos 000000164 Len 000000008
Loading sample file 'myextisam'
Sample data file load complete.
List sample file 'myextisam'
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********.
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=********.
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=********.
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    .
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    .
Hit End of File after 16
LIST SAMPLE FILE DESCENDING
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    .
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=********.
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=********.
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=********.
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=********.
Key: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=********.
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
Hit End of File after 16
LIST SAMPLE FILE BY KEY3
Key: ALP00000 is ALPHA ELECTRICAL CO. LTD. Disk=2417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=2417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: OLD00000 is OLD TYME PIZZA MFG. CO.   Disk=8470    .
Key: PRE00000 is PRESTIGE OFFICE FURNITURE Disk=8470    .
Hit End of File after 11
], [])

AT_CLEANUP

