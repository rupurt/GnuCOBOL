## Copyright (C) 2003-2012, 2015 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart
## 
## This file is part of GnuCOBOL.
## 
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
## 
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <http://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### ISO+IEC+1989-2002 13.16.36 OCCURS clause

## 13.16.36.2 Syntax rules


# 1) DONE

AT_SETUP([OCCURS with level 01, 66, 77, and 88])
AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-01          PIC X OCCURS 10.
       01 G             OCCURS 10.
         02 X-02        PIC X OCCURS 10.
         66 X-66        RENAMES X-02 OCCURS 10.
       77 X-77          PIC X OCCURS 10.
       88 X-88          VALUE "X" OCCURS 10.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob: 11: Error: Level 88 item 'X-88' can only have a VALUE clause
prog.cob: 6: Error: Level 01 item 'X-01' cannot have a OCCURS clause
prog.cob: 7: Error: Level 01 item 'G' cannot have a OCCURS clause
prog.cob: 9: Error: Level 66 item 'X-66' can only have a RENAMES clause
prog.cob: 10: Error: Level 77 item 'X-77' cannot have a OCCURS clause
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: 11: Error: Level 88 item 'X-88' can only have a VALUE clause
prog.cob: 9: Error: Level 66 item 'X-66' can only have a RENAMES clause
])


AT_CLEANUP

AT_SETUP([OCCURS with variable-occurrence data item])
AT_KEYWORDS([nested occurs depending extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 10.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC 9.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 G-2         OCCURS 1 TO 10 DEPENDING ON I.
           03 X         PIC X(10) OCCURS 1 TO 4 DEPENDING ON I.
       77 I             PIC 9.
       PROCEDURE        DIVISION.
           DISPLAY  X(I, I) END-DISPLAY
           DISPLAY  G-2 (I) END-DISPLAY
           DISPLAY  G-1     END-DISPLAY
           .

])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: 7: Error: 'G-2' cannot have the OCCURS clause due to 'X'
])
AT_CHECK([$COMPILE_ONLY -cb_conf=complex-odo:yes prog.cob], [0], [], [])

AT_CHECK([$COMPILE_ONLY -cb_conf=complex-odo:yes prog2.cob], [1], [],
[prog2.cob: 8: Error: 'X' cannot have nested OCCURS DEPENDING
])

AT_CLEANUP


# 2) TODO

# 3) TODO

# 4) TODO

# 5) TODO

# 6) TODO

# 7) TODO

# 8) TODO


# 9) DONE

AT_SETUP([Nested OCCURS clause])
AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
        02 G-2          OCCURS 2.
         03 G-3         OCCURS 2.
          04 G-4        OCCURS 2.
           05 G-5       OCCURS 2.
            06 G-6      OCCURS 2.
             07 G-7     OCCURS 2.
              08 G-8    OCCURS 2.
               09 X     PIC X.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0])

AT_CLEANUP


# 10) TODO

# 11) TODO

# 12) TODO

# 13) TODO

# 14) TODO

# 15) TODO
# in COBOL 2014 this is rule 16, not sure about COBOL 2002.

AT_SETUP([OCCURS DEPENDING with wrong size])
AT_KEYWORDS([occurs range])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 FILLER.
         02 G-1         PIC X OCCURS  1 TO 1 DEPENDING ON I.
       01 FILLER.
         02 G-2         PIC X OCCURS -1 TO 1 DEPENDING ON I.
       01 FILLER.
         02 G-3         PIC X OCCURS  0 TO 1 DEPENDING ON I.
       01 I             PIC 9.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], [],
[prog.cob: 7: Error: OCCURS max. must be greater than OCCURS min.
prog.cob: 9: Error: Integer value expected
])

AT_CLEANUP


# 16) TODO

# 17) TODO

# 18) TODO

# 19) TODO


# 20) DONE

AT_SETUP([OCCURS DEPENDING followed by another field])
AT_KEYWORDS([occurs extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G-1.
         02 X           PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 Y           PIC X.
       01 G-2.
         02 G-3         OCCURS 1 TO 3 DEPENDING ON I.
           03 X         PIC X.
         02 Y           PIC X.
       01 G-4.
         02 G-5.
           03 X         PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 Y           PIC X.
       01 I             PIC 9.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [1], ,
[prog.cob: 7: Error: 'X' cannot have OCCURS DEPENDING because of 'Y'
prog.cob: 10: Error: 'G-3' cannot have OCCURS DEPENDING because of 'Y'
prog.cob: 15: Error: 'X' cannot have OCCURS DEPENDING because of 'Y'
])

AT_CHECK([$COMPILE_ONLY -cb_conf=complex-odo:yes prog.cob], [0], [], [])

AT_CLEANUP


# 21) TODO

# 22) TODO

# 23) TODO

# 24) TODO

AT_SETUP([OCCURS DEPENDING without TO clause])
AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 Y             PIC 9.
       01 XX.
          03 X  PIC X OCCURS 10 DEPENDING ON Y.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob: 8: Error: ODO without TO clause does not conform to COBOL 2014
])
AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob: 8: Warning: ODO without TO clause used
])

AT_CLEANUP

AT_SETUP([OCCURS INDEXED ASCENDING ])
AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  DBI-RECORD-NAMEST.
           05  FILLER.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ACM            0315 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-MGL            0303 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZBL            0304 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZCC            0308 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZGL            0305 '.
       01  DBI-RECORD-NAMESR REDEFINES DBI-RECORD-NAMEST.
           05  DBI-RECORD-NAMES
                  OCCURS 5 TIMES
                  INDEXED BY REC-NAME-IDX
                  ASCENDING KEY IS DBI-RECORD-NAME
                  .
             10  DBI-RECORD-NAME PIC X(30).
             10  DBI-RECORD-CODE PIC 9(4).
             10  DBI-RECORD-DIR  PIC X.     
       01  REC-NAME   PIC X(30).
       01 G.
         02 X           PIC X OCCURS 10 INDEXED I.
       01 K.
         02 Y           PIC X OCCURS 10.
       01 TAB3.
          05 CNT3           PIC 9(9) COMP-5 VALUE 10.
          05 ROW3 OCCURS 1 TO 10 DEPENDING CNT3
                                  DESCENDING TAB3-NR
                                  ASCENDING TAB3-DATA.
             10 TAB3-NR     PIC 99.
             10 TAB3-DATA   PIC XXXX.

       PROCEDURE DIVISION.
       MAIN. 
           MOVE 2 TO TAB3-NR(1).
           MOVE "A" TO TAB3-DATA(1).
           MOVE 1 TO TAB3-NR(2).
           MOVE "B" TO TAB3-DATA(2).
           MOVE 'A-F-GEN-LEDGER-ZGL' TO REC-NAME. 
           PERFORM FINDIT.
           MOVE 'JUNK' TO REC-NAME. 
           PERFORM FINDIT.
           STOP RUN.

       FINDIT. 
           SEARCH DBI-RECORD-NAMES
           AT END
               DISPLAY 'A ' REC-NAME ' is invalid.' 
           WHEN REC-NAME = DBI-RECORD-NAME (REC-NAME-IDX)
               DISPLAY 'A ' REC-NAME ' is code ' 
                         DBI-RECORD-CODE (REC-NAME-IDX) '.'.

])

AT_CHECK([cobc -x -std=ibm -debug -Wall prog.cob ], [1], [], [prog.cob: 23: Error: INDEXED should follow ASCENDING/DESCENDING
])

AT_CLEANUP


AT_SETUP([OCCURS size check])
AT_KEYWORDS([occurs])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X1.
          03 X  PIC X OCCURS 1530001234 TIMES.
       01 X2.
          03 X  PIC X OCCURS 2147483648 TIMES.
       01 X3.
          03 X  PIC X OCCURS 9223372036854775808 TIMES.
])

# Don't check actual output here (will be extended with the merge of 2.0-branch)...
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [], ignore)
AT_CHECK([$COMPILE_ONLY prog.cob], [1], [], ignore)


AT_CLEANUP

AT_SETUP([ODO not Fixed Loc])
AT_KEYWORDS([ODO])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
      ******************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
      ******************************************************************
       WORKING-STORAGE SECTION.
       01 DAT.
           02 ODO-1 PIC 9.
           02 ODO-1-DATA OCCURS 1 TO 6 TIMES DEPENDING ON ODO-1
                PIC 9.
           02 ODO-2 PIC 9.
           02 ODO-2-DATA OCCURS 1 TO 6 TIMES DEPENDING ON ODO-2
                PIC 9.
           02 ODO-3 PIC XXX.     
          
      ******************************************************************
       PROCEDURE DIVISION.
           STOP RUN.

])

AT_CHECK([$COMPILE_ONLY -std=mf prog.cob ], [1], [],
[prog.cob: 13: Error: ODO-2 does not have a fixed location
])

AT_CLEANUP

