## Copyright (C) 2003-2012, 2014-2019 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch, Edward Hart,
## Ron Norman
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <http://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite


AT_SETUP([Comma separator without space])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           DISPLAY 1,1,1 NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [111])

AT_CLEANUP


## TODO: Check if the following DECIMAL-POINT tests are really all extensions.


AT_SETUP([DECIMAL-POINT is COMMA (1)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (2)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[03,00
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (3)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,, 1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[01,50
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (4)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           MOVE FUNCTION MIN (3,,,,,,1,5) TO X.
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00,10
])

AT_CLEANUP


AT_SETUP([DECIMAL-POINT is COMMA (5)])
AT_KEYWORDS([misc extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT    IS COMMA.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 99V99.
       PROCEDURE        DIVISION.
           COMPUTE X=1 + ,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           COMPUTE X=1*,1
           END-COMPUTE
           DISPLAY X
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[01,10
00,10
])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN])
AT_KEYWORDS([misc fundamental])

AT_DATA([prog.cob], [
       PROGRAM-ID.   prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CURRENCY SIGN IS "Y".

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  amount    pic Y(6)9.99.

       PROCEDURE DIVISION.
           Move 1512.34 to Amount
           Display "Amount is #" Amount '#' with no advancing.

           GOBACK
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Amount is #  Y1512.34#])

AT_CLEANUP


AT_SETUP([CURRENCY SIGN WITH PICTURE SYMBOL])
AT_KEYWORDS([misc fundamental])

# FIXME - see FR #246
AT_XFAIL_IF(true)

AT_DATA([prog.cob], [
       PROGRAM-ID.   prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           *> note the space after EUR / before ct.
           CURRENCY SIGN IS "EUR "      WITH PICTURE SYMBOL "U",
           CURRENCY SIGN IS " ct (EUR)" WITH PICTURE SYMBOL "c",
           Currency Sign is "$US" with Picture Symbol "$".

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  EUROS    PIC U99v99.
       77  cents    PIC c9,999.
       77  DOLLARS  Pic $$,$$9.99.

       PROCEDURE DIVISION.
           MOVE 12.34 TO EUROS
           MULTIPLY euros BY 1000 GIVING cents.
           DISPLAY "#" EUROS "# equal #" cents '#'.
           Move 1500 to Invoice-Amount
           Display "Invoice amount #1 is " Invoice-Amount '.'.
           Move 12.34 to Invoice-Amount
           Display "Invoice amount #2 is " Invoice-Amount '.'.

           GOBACK
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[#EUR 12.34# equal #1,234 ct (EUR)#
Invoice amount #1 is  $US1,500.00.
Invoice amount #2 is     $US12.34.
])

AT_CLEANUP


AT_SETUP([LOCAL-STORAGE (1)])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-X         PIC XXX VALUE "abc".
       LOCAL-STORAGE    SECTION.
       01 LCL-X         PIC XXX VALUE "abc".
       PROCEDURE        DIVISION.
           DISPLAY WRK-X LCL-X NO ADVANCING
           END-DISPLAY.
           MOVE ZERO TO WRK-X LCL-X.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abcabc000abc], [])

AT_CLEANUP


AT_SETUP([LOCAL-STORAGE (2)])
AT_KEYWORDS([runmisc])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 LNK-X         PIC XXX.
       PROCEDURE        DIVISION USING LNK-X.
           DISPLAY LNK-X NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LOCAL-STORAGE    SECTION.
       01 LCL-X.
          05 FILLER     PIC XXX VALUE "abc".
       PROCEDURE        DIVISION.
           CALL "callee2" USING LCL-X
           END-CALL.
           MOVE ZERO TO LCL-X.
           CALL "callee2" USING LCL-X
           END-CALL.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abc000], [])

AT_CLEANUP


AT_SETUP([EXTERNAL data item])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           IF EXT-VAR NOT = "Hello"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Hello" TO EXT-VAR.
           CALL "callee"
           END-CALL.
           IF EXT-VAR NOT = "World"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([EXTERNAL AS data item])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 PRG-VAR       PIC X(5) EXTERNAL AS "WRK-VAR".
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           IF PRG-VAR NOT = "Extrn"
              DISPLAY PRG-VAR
              END-DISPLAY
           END-IF.
           IF EXT-VAR NOT = "Hello"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYVAR         PIC X(5) EXTERNAL AS "EXT-VAR".
       01 WRK-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR.
           MOVE "Hello" TO MYVAR.
           CALL "callee"
           END-CALL.
           IF MYVAR NOT = "World"
              DISPLAY MYVAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([EXTERNAL data item size mismatch])
AT_KEYWORDS([runmisc])

# FIXME - see Bug #445
AT_XFAIL_IF(true)

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 PRG-VAR       PIC X(8) EXTERNAL AS "WRK-VAR".
       01 COB-VAR       PIC X(8) EXTERNAL.
       01 EXT-VAR       PIC X(8) EXTERNAL.
       PROCEDURE        DIVISION.
           IF PRG-VAR NOT = "Extrn"
              DISPLAY PRG-VAR
              END-DISPLAY
           END-IF.
           IF EXT-VAR NOT = "Hello"
              DISPLAY EXT-VAR
              END-DISPLAY
           END-IF.
           MOVE "World" TO EXT-VAR.
           EXIT PROGRAM.
])

AT_DATA([bigger.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      error.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYVAR         PIC X(10) EXTERNAL AS "COB-VAR".
       01 WRK-VAR       PIC X(10) EXTERNAL.
       01 EXT-VAR       PIC X(10) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR.
           MOVE "Hello" TO MYVAR.
           CALL "callee"
           END-CALL.
           IF MYVAR NOT = "World"
              DISPLAY MYVAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_DATA([smaller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      error.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYVAR         PIC X(5) EXTERNAL AS "COB-VAR".
       01 WRK-VAR       PIC X(5) EXTERNAL.
       01 EXT-VAR       PIC X(5) EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE "Extrn" TO WRK-VAR.
           MOVE "Hello" TO MYVAR.
           CALL "callee"
           END-CALL.
           IF MYVAR NOT = "World"
              DISPLAY MYVAR
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE bigger.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./bigger], [0], [],
[libcob: callee.cob:6: warning: EXTERNAL item 'WRK-VAR' previously allocated with size 10, requested size is 8
libcob: callee.cob:7: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
libcob: callee.cob:8: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
])

AT_CHECK([$COMPILE smaller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./smaller], [1], [],
[libcob: callee.cob:6: EXTERNAL item 'WRK-VAR' previously allocated with size 5, requested size is 8
])

AT_CLEANUP


## MOVE statement

AT_SETUP([MOVE to itself])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 99 VALUE 12.
       PROCEDURE        DIVISION.
           MOVE X TO X.
           IF X NOT = 12
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:8: warning: overlapping MOVE may produce unpredictable results
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with refmod])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4) VALUE 0.
       PROCEDURE        DIVISION.
           MOVE "1" TO X(1:1).
           IF X NOT = 1000
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with refmod (variable)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "1234".
       01 Y             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 1.
       PROCEDURE        DIVISION.
           MOVE X(1:I) TO Y.
           IF Y NOT = "1   "
              DISPLAY Y NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE with group refmod])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC 9999 VALUE 1234.
       PROCEDURE        DIVISION.
           MOVE "99" TO G(3:2).
           IF G NOT = "1299"
              DISPLAY G NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE indexes])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10 INDEXED I.
       PROCEDURE        DIVISION.
           SET I TO ZERO.
           MOVE I TO X(1).
           IF X(1) NOT = "0"
              DISPLAY X(1) NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([MOVE X'00'])
AT_KEYWORDS([runmisc])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  printf ("%02x%02x%02x", data[[0]], data[[1]], data[[2]]);
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"000102" TO X.
           CALL "dump" USING X
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [000102])

AT_CLEANUP


AT_SETUP([MOVE Z'literal'])
AT_KEYWORDS([runmisc literal])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC XXXX.
       01  XRED REDEFINES X.
           03  XBYTE1   PIC X.
           03  XBYTE2   PIC X.
           03  XBYTE3   PIC X.
           03  XBYTE4   PIC X.
       PROCEDURE        DIVISION.
           MOVE Z"012" TO X.
           IF XBYTE1 = "0" AND
              XBYTE2 = "1" AND
              XBYTE3 = "2" AND
              XBYTE4 = LOW-VALUE
              DISPLAY "OK" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY "X = " X (1:3) NO ADVANCING
              END-DISPLAY
              IF XBYTE4 = LOW-VALUE
                 DISPLAY " WITH LOW-VALUE"
                 END-DISPLAY
              ELSE
                 DISPLAY " WITHOUT LOW-VALUE BUT '" XBYTE4 "'"
                 END-DISPLAY
              END-IF
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Floating continuation indicator])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           DISPLAY "OK"-
            "OK"
             NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])

AT_CLEANUP


AT_SETUP([Fixed continuation indicator])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(333) VALUE
           '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
      -    'YZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUV
      -    'WXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST
      -    'UVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR
      -    'STUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
      -             'QRSTUVWXYZ'.
       PROCEDURE        DIVISION.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           DISPLAY '_'
           END-DISPLAY.
           MOVE
           "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567
      -    "89abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345
      -    "6789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123
      -    "456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01
      -     "23456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY
      -                                                               "Z
      -             "0123456789" TO X.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           DISPLAY '_'
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ                       _
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789                       _
])

AT_CLEANUP


AT_SETUP([Concatenation operator])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77 STR           PIC X(05).
       PROCEDURE        DIVISION.
           MOVE "OK" & " "
            & "OK"
             TO STR
           DISPLAY STR NO ADVANCING
           END-DISPLAY
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK OK])

AT_CLEANUP


AT_SETUP([SOURCE FIXED/FREE directives])
AT_KEYWORDS([runmisc SOURCEFORMAT FIXED FREE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       >>SOURCE FREE
   DATA             DIVISION.
   WORKING-STORAGE  SECTION.
   >>SOURCE FIXED
       PROCEDURE        DIVISION.                                       FIXED
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY.
       >>SOURCE FREE
                                                                        DISPLAY
   "OK"
 NO ADVANCING
   END-DISPLAY.
   >>SET SOURCEFORMAT "FIXED"
             DISPLAY "OK" NO ADVANCING                                  FIXED
             END-DISPLAY.
       >>SET SOURCEFORMAT "FREE"
                                                                        DISPLAY
   "OK"
 NO ADVANCING
   END-DISPLAY.
             STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[OKOKOKOK])

AT_CLEANUP

## OCCURS clause

AT_SETUP([Level 01 subscripts])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X OCCURS 10.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
[prog.cob:6: error: level 01 item 'X' cannot have a OCCURS clause
])

AT_CLEANUP


## Expressions

AT_SETUP([Class check with reference modification])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(6) VALUE "123   ".
       PROCEDURE        DIVISION.
           IF X(1:3) NUMERIC
              STOP RUN
           END-IF.
           DISPLAY "NG" NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Index and parenthesized expression])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 1 INDEXED BY I.
       PROCEDURE        DIVISION.
         IF I < (I + 2)
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
         END-IF.
         STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Alphanumeric and binary numeric])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-X           PIC XXXX VALUE "0001".
       01 X-9           PIC 9999 COMP VALUE 1.
       PROCEDURE        DIVISION.
         IF X-X = X-9
            STOP RUN
         END-IF.
         DISPLAY "NG" NO ADVANCING
         END-DISPLAY
         STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Non-numeric data in numeric items])

AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X.
          03 X-NUM      PIC 9(06) VALUE 123.
       77 NUM           PIC 9(06).
       PROCEDURE        DIVISION.
           MOVE x"0000" TO X (2:2)
           IF X-NUM NUMERIC
              DISPLAY "low-value is numeric" UPON SYSERR
              END-DISPLAY
           END-IF
           MOVE x"01" TO X (3:1)
           IF X-NUM NUMERIC
              DISPLAY "SOH is numeric" UPON SYSERR
              END-DISPLAY
           END-IF
           MOVE X-NUM TO NUM
           DISPLAY "test over"
           END-DISPLAY
      *
           GOBACK.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X.
          03 X-NUM      PIC 9(06) PACKED-DECIMAL VALUE 123.
       77 NUM           PIC 9(06).
       PROCEDURE        DIVISION.
           MOVE x"0A" TO X (2:1)
           IF X-NUM NUMERIC
              DISPLAY "bad prog"
              END-DISPLAY
           END-IF
           MOVE X-NUM TO NUM
           DISPLAY "test over"
           END-DISPLAY
      *
           GOBACK.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBC -x -o unchecked_prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog], [0],
[test over
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:20: 'X-NUM' (Type: NUMERIC DISPLAY) not numeric: '0\000\001123'
])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([$COBC -x -o unchecked_prog2 prog2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog2], [0],
[test over
], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:15: 'X-NUM' (Type: PACKED-DECIMAL) not numeric: '0x000a123f'
])

AT_CLEANUP


## CALL statement

AT_SETUP([Dynamic call with static linking])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE -o prog2 caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])

AT_CLEANUP


AT_SETUP([Static call with static linking])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL STATIC "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CHECK([$COMPILE -o prog2 -static caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
AT_CHECK([$COMPILE -o prog3 caller.cob callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog3], [0], [], [])

AT_CLEANUP


AT_SETUP([Dynamic CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee1" ON EXCEPTION
              CALL "callee2" ON EXCEPTION
                  DISPLAY "neither calee1 nor callee2 found"
              END-CALL
           END-CALL
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           DISPLAY "this is callee2" NO ADVANCING
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0],
[this is callee2], [])

AT_CLEANUP


AT_SETUP([Static CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee1" ON EXCEPTION
              CALL "callee2" ON EXCEPTION
                  DISPLAY "neither calee1 nor callee2 found"
              END-CALL
           END-CALL
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           DISPLAY "this is callee2" NO ADVANCING
           GOBACK.
])


AT_CHECK([$COMPILE_MODULE -c callee2.cob], [0], [], [])
AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee2.$COB_OBJECT_EXT], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[this is callee2], [])
AT_CHECK([$COMPILE -o prog2 -static caller.cob callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[this is callee2], [])
AT_CHECK([$COMPILE -o prog3 caller.cob callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog3], [0],
[this is callee2], [])

AT_CLEANUP


AT_SETUP([CALL m1. CALL m2. CALL m1.])
AT_KEYWORDS([runmisc])

AT_DATA([m1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m1.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 1 + 2
           END-COMPUTE.
           IF X NOT = 3
              DISPLAY X
              END-DISPLAY
           END-IF.
])

AT_DATA([m2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 3 + 4
           END-COMPUTE.
           IF X NOT = 7
              DISPLAY X
              END-DISPLAY
           END-IF.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "m1"
           END-CALL.
           CALL "m2"
           END-CALL.
           CALL "m1"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE m1.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE m2.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([Recursive CALL of RECURSIVE program])
AT_KEYWORDS([runmisc CANCEL EXTERNAL])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller IS RECURSIVE.
       ENVIRONMENT      DIVISION.
       CONFIGURATION    SECTION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee"
           DISPLAY 'OK' NO ADVANCING END-DISPLAY
           CANCEL "callee" , "callee2"
           DISPLAY ' + FINE' NO ADVANCING END-DISPLAY
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS RECURSIVE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 9
              MOVE -1 TO STOPPER
           ELSE
              ADD   1 TO STOPPER
              CALL "callee2"
           END-IF
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2 IS RECURSIVE.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC S9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER NOT EQUAL -1
             CALL "callee"
           END-IF
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK + FINE], [])

AT_CLEANUP


AT_SETUP([Recursive CALL of INITIAL program])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 1
              DISPLAY 'INITIAL prog was called RECURSIVE'
              END-DISPLAY
              STOP RUN RETURNING 1
           ELSE
              MOVE 1 TO STOPPER
              CALL "callee2" END-CALL
           END-IF.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee" END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: callee2.cob:5: recursive CALL from callee2 to callee which is NOT RECURSIVE
])

AT_CLEANUP


AT_SETUP([Recursive CALL with RECURSIVE assumed])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 9
              DISPLAY 'OK' NO ADVANCING END-DISPLAY
              STOP RUN
           ELSE
              ADD  1 TO STOPPER END-ADD
              CALL "callee2" END-CALL
           END-IF.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee" END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Recursive CALL with ON EXCEPTION])

AT_KEYWORDS([runmisc EXCEPTION-STATUS])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           MOVE 0 TO STOPPER
           CALL "callee" END-CALL.
           GOBACK.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       77  STOPPER      PIC 9 EXTERNAL.
       PROCEDURE        DIVISION.
           IF STOPPER = 1
              DISPLAY 'INITIAL prog was called RECURSIVE'
              END-DISPLAY
              STOP RUN RETURNING 1
           ELSE
              MOVE 1 TO STOPPER
              CALL "callee2" END-CALL
           END-IF.
           GOBACK.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           CALL "callee"
           ON EXCEPTION
              DISPLAY "Exception " FUNCTION EXCEPTION-STATUS ";"
                 UPON SYSERR
              STOP RUN RETURNING 1
           END-CALL.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[Exception EC-PROGRAM-RECURSIVE-CALL      ;
])

AT_CLEANUP


AT_SETUP([Multiple calls of INITIAL program])
AT_KEYWORDS([runmisc CALL])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  PARAM1       PIC X(08).
       01  PARAM2       PIC 9999 COMP VALUE 08.
       PROCEDURE        DIVISION.
           MOVE ' PARAM 1' TO PARAM1
           PERFORM 10 TIMES
              CALL "callee" USING PARAM1 PARAM2 END-CALL
           END-PERFORM
           DISPLAY 'PARAM1 = ' PARAM1
           END-DISPLAY
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee IS INITIAL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  COUNTER      PIC 999 VALUE ZERO.
       01  LPARAM       PIC 9(8) COMP.
       LINKAGE SECTION.
       01  PARAM1       PIC X(08).
       01  PARAM2       PIC 9999 COMP.
       PROCEDURE        DIVISION USING PARAM1 PARAM2.
           ADD 1 TO COUNTER END-ADD
           CALL 'C$PARAMSIZE' USING 1 GIVING LPARAM END-CALL
           DISPLAY 'COUNTER = ' COUNTER ' LPARAM1 = ' LPARAM
                   ' PARAM1 = ' PARAM1
           END-DISPLAY
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
PARAM1 =  PARAM 1
])

AT_CLEANUP


AT_SETUP([CALL binary literal parameter/LENGTH OF])
AT_KEYWORDS([runmisc])

AT_DATA([dump.c], [
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (int *p)
{
  if ( *p == 0 ) p++;
  if ( *p == 0 ) p++;	/* Skip leading bytes for BIG Endian value */
  if ( *p == 0 ) p++;
  printf ("%8.8d\n", *p);
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYOCC        PIC 9(8) COMP.
       01  MYTAB.
           03  MYBYTE   PIC X OCCURS 1 TO 20
                        DEPENDING ON MYOCC.
       PROCEDURE        DIVISION.
           MOVE 9 TO MYOCC.
           CALL "dump" USING BY CONTENT 1
           END-CALL.
           CALL "dump" USING BY CONTENT LENGTH OF MYTAB
           END-CALL.
           CALL "dump" USING BY CONTENT LENGTH OF MYOCC
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[00000001
00000009
00000004
])
AT_CHECK([$COMPILE -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[00000001
00000009
00000004
])

AT_CLEANUP


AT_SETUP([CALL binary literal])
AT_KEYWORDS([CALL])

AT_DATA([prog.cob], [       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       
       PROCEDURE DIVISION.
           CALL "SUB" USING 1280 BY VALUE 15.
           CALL "SUB" USING 2560 BY VALUE 16.
           STOP RUN.
        END PROGRAM prog.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. "SUB".
       
       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC 9(9) COMP.
       01  y  PIC 9(9) COMP-5.
       
       PROCEDURE DIVISION USING x, VALUE y.
            DISPLAY "COBOL: X is " x " and Y is " y.
       END PROGRAM "SUB".
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0],
[COBOL: X is 000001280 and Y is 000000015
COBOL: X is 000002560 and Y is 000000016
], [])

AT_CLEANUP


## INSPECT

AT_SETUP([INSPECT REPLACING LEADING ZEROS BY SPACES])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "0001".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING LEADING ZEROS BY SPACES.
           IF X NOT = "   1"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT No repeat conversion check])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "ABC" TO "BCD".
           IF X NOT = "CDB"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING alphabet])
AT_KEYWORDS([runmisc ASCII EBCDIC])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. charset.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET ALPHA IS ASCII.
           ALPHABET BETA  IS EBCDIC.

       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01 TESTHEX PIC X(10) VALUE X'C17BD6F2F0F1F8404040'.

       procedure division.
       sample-main.

           INSPECT testhex CONVERTING BETA TO ALPHA
           DISPLAY 'Converted: "' TESTHEX '"' WITH NO ADVANCING
           
           GOBACK.
       END PROGRAM charset.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Converted: "A#O2018   "], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO figurative constant])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "ABC" TO SPACES.
           IF X NOT = SPACES
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING NULL])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE LOW-VALUES.
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING NULL TO "A".
           IF X NOT = "AAA"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT CONVERTING TO NULL])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "AAA".
       PROCEDURE        DIVISION.
           INSPECT X CONVERTING "A" TO NULL.
           IF X NOT = LOW-VALUES
              DISPLAY "NG" NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING figurative constant])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(3) VALUE "BCA".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING ALL "BC" BY SPACE.
           IF X NOT = "  A"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING BEFORE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "ABC ".
       01 TAL           PIC 999 VALUE 0.
       PROCEDURE        DIVISION.
           MOVE 0 TO TAL.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     BEFORE INITIAL " ".
           IF TAL NOT = 3
              DISPLAY TAL NO ADVANCING
              END-DISPLAY
           END-IF.
           MOVE 0 TO TAL.
           MOVE " ABC" TO X.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     BEFORE INITIAL " ".
           IF TAL NOT = 0
              DISPLAY TAL NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT TALLYING AFTER])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "ABC ".
       01 TAL           PIC 999 VALUE 0.
       PROCEDURE        DIVISION.
           MOVE 0 TO TAL.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     AFTER INITIAL " ".
           IF TAL NOT = 0
              DISPLAY TAL NO ADVANCING
              END-DISPLAY
           END-IF.
           MOVE 0 TO TAL.
           MOVE " ABC" TO X.
           INSPECT X TALLYING TAL FOR CHARACTERS
                     AFTER INITIAL " ".
           IF TAL NOT = 3
              DISPLAY TAL NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING TRAILING ZEROS BY SPACES])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "1000".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING TRAILING ZEROS BY SPACES.
           IF X NOT = "1   "
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([INSPECT REPLACING complex])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(12) VALUE "AAABBCDCCCCC".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING
             ALL      "A" BY "Z"
                      "B" BY "Y"
             TRAILING "C" BY "X".
           IF X NOT = "ZZZYYCDXXXXX"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([SWITCHES (environment COB_SWITCH_n and SET)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           SWITCH-1 IS SWIT1
             ON  IS SWIT1-ON
             OFF IS SWIT1-OFF
           SWITCH-2 IS SWIT2
             ON  IS SWIT2-ON
             OFF IS SWIT2-OFF
           SWITCH-3
             ON  IS SWIT3-ON
             OFF IS SWIT3-OFF
           SWITCH-4 IS SWIT4
             OFF IS SWIT4-OFF
           SWITCH-31
             ON  IS SWIT31-ON
           SWITCH-36 IS SWIT36
             OFF IS SWIT36-OFF.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           IF SWIT1-ON
              DISPLAY "ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY "OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           IF SWIT2-ON
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           IF SWIT3-ON
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           IF NOT SWIT4-OFF
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           SET SWIT1 TO OFF.
           SET SWIT2 TO ON.
           IF SWIT1-ON
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           IF SWIT2-ON
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF
           IF SWIT31-ON
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           IF NOT SWIT36-OFF
              DISPLAY " ON" NO ADVANCING
              END-DISPLAY
           ELSE
              DISPLAY " OFF" NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_SWITCH_1=1 COB_SWITCH_2=0 COB_SWITCH_3=OFF COB_SWITCH_4=ON COB_SWITCH_36=ON ./prog], [0],
[ON OFF OFF ON OFF ON OFF ON])

AT_CLEANUP


## PERFORM

AT_SETUP([Nested PERFORM])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "X" NO ADVANCING
             END-DISPLAY
             PERFORM 2 TIMES
               DISPLAY "Y" NO ADVANCING
               END-DISPLAY
             END-PERFORM
           END-PERFORM.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XYYXYY])

AT_CLEANUP


AT_SETUP([PERFORM VARYING BY -0.2])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
	   77 X             PIC 9v9.
       PROCEDURE        DIVISION.
           PERFORM VARYING X FROM 0.8 BY -0.2
                   UNTIL   X < 0.4
             DISPLAY "X" NO ADVANCING
             END-DISPLAY
           END-PERFORM.
		   IF X NOT = 0.2
		     DISPLAY "WRONG X: " X END-DISPLAY
		   END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])

AT_CLEANUP


AT_SETUP([PERFORM VARYING BY phrase omitted])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
	   77 X             PIC 9.
       PROCEDURE        DIVISION.
           PERFORM VARYING X FROM 4
                   UNTIL   X > 6
             DISPLAY "X" NO ADVANCING
           END-PERFORM.
		   IF X NOT = 7
		     DISPLAY "WRONG X: " X
		   END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
[prog.cob:9: error: PERFORM VARYING without BY phrase does not conform to COBOL 85
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])

AT_CLEANUP


## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5

AT_SETUP([EXIT PERFORM])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY
             EXIT PERFORM
             DISPLAY "NOT OK"
             END-DISPLAY
           END-PERFORM
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])

AT_CLEANUP


## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5

AT_SETUP([EXIT PERFORM CYCLE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY
             EXIT PERFORM CYCLE
             DISPLAY "NOT OK"
             END-DISPLAY
           END-PERFORM
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])

AT_CLEANUP


## EXIT PARAGRAPH  see ISO/IEC 1989:2002(E) 14.8.13 Format 6

AT_SETUP([EXIT PARAGRAPH])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 INDVAL        PIC 9(4).
       PROCEDURE        DIVISION.
       A01.
           PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
            IF INDVAL > 2
               EXIT PARAGRAPH
            END-IF
           END-PERFORM.
       A02.
           IF INDVAL NOT = 3
              DISPLAY INDVAL NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


## EXIT SECTION  see ISO/IEC 1989:2002(E) 14.8.13 Format 6

AT_SETUP([EXIT SECTION])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 INDVAL        PIC 9(4).
       PROCEDURE        DIVISION.
       A01 SECTION.
       A011.
           PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
            IF INDVAL > 2
               EXIT SECTION
            END-IF
           END-PERFORM.
       A012.
           DISPLAY INDVAL NO ADVANCING
           END-DISPLAY.
       A02 SECTION.
           IF INDVAL NOT = 3
              DISPLAY INDVAL NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM FOREVER / PERFORM UNTIL EXIT])
AT_KEYWORDS([runmisc extension])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
       A01.
           MOVE 0 TO INDVAL
           PERFORM UNTIL EXIT
            ADD 1 TO INDVAL
            IF INDVAL > 2
               EXIT PERFORM
            END-IF
           END-PERFORM
           IF INDVAL NOT = 3
              DISPLAY "1: " INDVAL
              END-DISPLAY
           END-IF
           PERFORM FOREVER
            ADD 1 TO INDVAL
            IF INDVAL > 4
               EXIT PERFORM
            END-IF
           END-PERFORM
           IF INDVAL NOT = 5
              DISPLAY "2: " INDVAL
              END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM inline (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
           PERFORM VARYING INDVAL FROM 1
            BY 1 UNTIL INDVAL > 2
           END-PERFORM
           IF INDVAL NOT = 3
              DISPLAY INDVAL NO ADVANCING
              END-DISPLAY
           END-IF
           STOP RUN
           .
])

AT_CHECK([$COMPILE -fmissing-statement=ok prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM inline (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  INDVAL       PIC 9(4).
       PROCEDURE        DIVISION.
           PERFORM VARYING INDVAL FROM 1
            BY 1 UNTIL INDVAL > 2.
           IF INDVAL NOT = 3
              DISPLAY INDVAL NO ADVANCING
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE -frelax-syntax-checks -w prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Non-overflow after overflow])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC 9(2) VALUE 0.
       01  Y            PIC 9(2) VALUE 0.
       PROCEDURE        DIVISION.
           COMPUTE X = 100
           END-COMPUTE.
           COMPUTE Y = 99
           END-COMPUTE.
           IF Y NOT = 99
              DISPLAY Y NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


## PERFORM statement

AT_SETUP([PERFORM ... CONTINUE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           PERFORM 2 TIMES
             CONTINUE
           END-PERFORM.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING with subscript reference])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  G.
           02 X         PIC X(3) OCCURS 3.
       PROCEDURE        DIVISION.
           MOVE   SPACES TO G.
           STRING "abc" INTO X(2)
           END-STRING.
           IF G NOT = "   abc   "
              DISPLAY X(1) NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STRING / UNSTRING [NOT] ON OVERFLOW])
AT_KEYWORDS([runmisc exceptions])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.
       data division.
       working-storage section.
       77 simple-str     pic x(20).
       77 err-str        pic x(50).
      *-----------------------------------------------------------------
       procedure division.
      *    STRING test
           move spaces to simple-str
           string 'data'
             delimited by size
             into simple-str
             on overflow
               move spaces to err-str
               string 'STRING OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
               display '1 failed'
               end-display
             not on overflow
               display '1 passed'
               end-display
           end-string
           if simple-str not = 'data'
             display 'STRING ERROR (1): "' simple-str '"'
             end-display
           end-if
      *
           move spaces to simple-str
           string 'data is too big here...'
             delimited by size
             into simple-str
             on overflow
               display '2 passed'
               end-display
             not on overflow
               display '2 failed'
               end-display
               move spaces to err-str
               string 'missing OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
           end-string
           if simple-str not = 'data is too big here'
             display 'STRING ERROR (2): "' simple-str '"'
             end-display
           end-if
      *
      *    UNSTRING test
           move spaces to simple-str
           unstring 'data'
             into simple-str
             on overflow
               move spaces to err-str
               unstring 'UNSTRING OVERFLOW'
                  into err-str
               end-unstring
               display err-str upon syserr
               end-display
               display '3 failed'
               end-display
             not on overflow
               display '3 passed'
               end-display
           end-unstring
           if simple-str not = 'data'
             display 'UNSTRING ERROR (1): "' simple-str '"'
             end-display
           end-if
      *
           move spaces to simple-str
           unstring 'data is too big here...'
             into simple-str
             on overflow
               display '4 passed'
               end-display
             not on overflow
               display '4 failed'
               end-display
               move spaces to err-str
               string 'missing OVERFLOW'
                  delimited by size
                  into err-str
               end-string
               display err-str upon syserr
               end-display
           end-unstring
           if simple-str not = 'data is too big here'
             display 'UNSTRING ERROR (2): "' simple-str '"'
             end-display
           end-if
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[1 passed
2 passed
3 passed
4 passed
], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL LOW-VALUE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  G.
           03 FILLER    PIC XXX VALUE "ABC".
           03 FILLER    PIC XX  VALUE LOW-VALUES.
           03 FILLER    PIC XXX VALUE "DEF".
       01  A            PIC XXX.
       01  B            PIC XXX.
       PROCEDURE        DIVISION.
           UNSTRING G DELIMITED BY ALL LOW-VALUES
                      INTO A B
           END-UNSTRING.
           IF A NOT = "ABC"
              DISPLAY A
              END-DISPLAY
           END-IF.
           IF B NOT = "DEF"
              DISPLAY B
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED ALL SPACE-2])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       ENVIRONMENT     DIVISION.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-RECORD.
           02 VALUE SPACE           PIC X(04).
           02 VALUE "ABC AND DE"    PIC X(10).
           02 VALUE SPACE           PIC X(07).
           02 VALUE "FG AND HIJ"    PIC X(10).
           02 VALUE SPACE           PIC X(08).
       01  SPACE-2                  PIC X(02) VALUE SPACE.
       01  WS-DUMMY                 PIC X(15).
       01  WS-POINTER               PIC 99.
       PROCEDURE       DIVISION.
           MOVE 1 TO WS-POINTER.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = SPACE
              DISPLAY "Expected space - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 5
              DISPLAY "Expected 5 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = "ABC AND DE"
              DISPLAY "Expected ABC AND DE - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 21
              DISPLAY "Expected 21 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
      *
           PERFORM 0001-SUB.
           IF WS-DUMMY NOT = " FG AND HIJ"
              DISPLAY "Expected  FG AND HIJ - Got " WS-DUMMY
              END-DISPLAY
           END-IF.
           IF WS-POINTER NOT = 40
              DISPLAY "Expected 40 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           STOP RUN.
       0001-SUB.
           UNSTRING WS-RECORD
                    DELIMITED BY ALL SPACE-2
              INTO WS-DUMMY
              POINTER WS-POINTER
           END-UNSTRING.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITED POINTER])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       ENVIRONMENT     DIVISION.
       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-LAY-RECORD            PIC X(66).
       01  WS-DUMMY                 PIC X(50).
       01  WS-KEYWORD               PIC X(32).
       01  WS-POINTER               PIC 99.
       PROCEDURE       DIVISION.
           MOVE
       '        10  AF-RECORD-TYPE-SEQUENCE-04     PIC   9(05) COMP-3.'
                  TO WS-LAY-RECORD.
           MOVE 1 TO WS-POINTER.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 48
              DISPLAY "Expected 48 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           ADD 7  TO WS-POINTER
           END-ADD.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 62
              DISPLAY "Expected 62 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           PERFORM 0001-SUB.
           IF WS-POINTER NOT = 63
              DISPLAY "Expected 63 - Got " WS-POINTER
              END-DISPLAY
           END-IF.
           STOP RUN.
       0001-SUB.
           UNSTRING WS-LAY-RECORD
                    DELIMITED
                    BY ' PIC '
                    OR ' COMP-3'
                    OR '.'
              INTO WS-DUMMY
              DELIMITER WS-KEYWORD
              POINTER WS-POINTER
           END-UNSTRING.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING DELIMITER IN])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  WK-CMD       PIC X(8) VALUE "WWADDBCC".
       01  FILLER.
        02 WK-SIGNS     PIC XX   VALUE "AB".
        02 WKS REDEFINES WK-SIGNS.
           03 WK-SIGN   PIC X OCCURS 2.
        02 WK-DELIM     PIC X OCCURS 2.
        02 WK-DATA      PIC X(2) OCCURS 3.
       PROCEDURE        DIVISION.
           UNSTRING WK-CMD DELIMITED BY WK-SIGN(1) OR WK-SIGN(2)
           INTO WK-DATA(1) DELIMITER IN WK-DELIM(1)
                WK-DATA(2) DELIMITER IN WK-DELIM(2)
                WK-DATA(3)
           END-UNSTRING
           IF  WK-DATA(1)   NOT = "WW"
            OR WK-DATA(2)   NOT = "DD"
            OR WK-DATA(3)   NOT = "CC"
            OR WK-DELIM(1)  NOT = "A"
            OR WK-DELIM(2)  NOT = "B"
               DISPLAY WK-DATA(1)
                       WK-DATA(2)
                       WK-DATA(3)
                       WK-DELIM(1)
                       WK-DELIM(2)
               END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -ftop-level-occurs-clause=ok prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([UNSTRING with FUNCTION / literal])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  FILLER.
         05  TSTUNS PIC X(479).
         05  PRM    PIC X(16) OCCURS 4 TIMES.
       PROCEDURE DIVISION.
           MOVE "The,Quick,Brown,Fox" TO TSTUNS.
           UNSTRING TSTUNS DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING FUNCTION UPPER-CASE(TSTUNS) DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using UPPER-CASE"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING "Daddy,was,a,Rolling stone" DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using Literal"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           UNSTRING FUNCTION LOWER-CASE("Daddy,was,a,Rolling stone")
                DELIMITED BY ','
              INTO  PRM(1), PRM(2), PRM(3), PRM(4).
           DISPLAY "Now using Literal + LOWER-CASE"
           DISPLAY "PRM(1) is " PRM(1) ":".
           DISPLAY "PRM(2) is " PRM(2) ":".
           DISPLAY "PRM(3) is " PRM(3) ":".
           DISPLAY "PRM(4) is " PRM(4) ":".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[PRM(1) is The             :
PRM(2) is Quick           :
PRM(3) is Brown           :
PRM(4) is Fox             :
Now using UPPER-CASE
PRM(1) is THE             :
PRM(2) is QUICK           :
PRM(3) is BROWN           :
PRM(4) is FOX             :
Now using Literal
PRM(1) is Daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is Rolling stone   :
Now using Literal + LOWER-CASE
PRM(1) is daddy           :
PRM(2) is was             :
PRM(3) is a               :
PRM(4) is rolling stone   :
], [])

AT_CLEANUP


AT_SETUP([PICTURE COMP-X])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TST.
           05 BVAL  PIC 9999 BINARY VALUE 512.
           05 XVAL  PIC XX COMP-X VALUE 512.
              88 XLOW  VALUE   0 THRU 256.
              88 XHIGH VALUE 257 THRU 65536.
           05 VAL9  PIC 99999 COMP-X VALUE 1024.
              88 LOW9  VALUE   0 THRU 256.
              88 HIGH9 VALUE 257 THRU 65536.
           05 XVAL2 PIC XX COMP-X VALUE 16706.
           05 XVALX REDEFINES XVAL2 PIC XX.
           05 YVALX PIC XX VALUE 'A '.
           05 YVAL2 REDEFINES YVALX PIC XX COMP-X.

       PROCEDURE DIVISION.
           DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
           DISPLAY " VAL9 is " VAL9 ";  Length is " LENGTH OF VAL9.
           MOVE 10240 TO XVAL.
           DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
           DISPLAY "XVAL2 is " XVAL2 "; Length is " LENGTH OF XVAL2.
           DISPLAY "XVALX is " XVALX "; Length is " LENGTH OF XVALX.
           ADD 1 TO XVAL2.
           DISPLAY "XVALX is " XVALX " after +1;".
           COMPUTE XVAL2 = XVAL2 / 256 + 8192.
           DISPLAY "XVALX is " XVALX " after / 256 + 8192;".
           MOVE 'DE'       TO XVALX.
           DISPLAY "Numeric: " XVAL2 " is char " XVALX.
           MOVE ZERO       TO YVAL2.
           MOVE 'D'        TO YVALX (1:1)
           MOVE LOW-VALUES TO YVALX (2:1)
           SUBTRACT YVAL2 FROM XVAL2.
           MOVE ' '        TO YVALX (1:1)
           MOVE LOW-VALUES TO YVALX (2:1)
           ADD YVAL2 TO XVAL2.
           DISPLAY "Numeric: " XVAL2 " is char " XVALX.
           MOVE 0 TO XVAL.
           ADD 10240 TO XVAL.
           IF XVAL = 10240
               DISPLAY "XVAL is " XVAL
           ELSE
               DISPLAY "XVAL is not 10240 but " XVAL
           END-IF.
           MOVE 0 TO BVAL.
           ADD 10240 TO BVAL.
           IF BVAL = 0240
               DISPLAY "BVAL is " BVAL
           ELSE
               DISPLAY "BVAL is not 0240 but " BVAL
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [ XVAL is 00512;  Length is 2
 VAL9 is 01024;  Length is 3
 XVAL is 10240;  Length is 2
XVAL2 is 16706; Length is 2
XVALX is AB; Length is 2
XVALX is AC after +1;
XVALX is  A after / 256 + 8192;
Numeric: 17477 is char DE
Numeric: 08261 is char  E
XVAL is 10240
BVAL is 0240
], [])

AT_CLEANUP


AT_SETUP([SORT: table sort])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G             VALUE "d4b2e1a3c5".
         02 TBL         OCCURS 5.
           03 X         PIC X.
           03 Y         PIC 9.
       PROCEDURE        DIVISION.
           SORT TBL ASCENDING KEY X.
           IF G NOT = "a3b2c5d4e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL DESCENDING KEY Y.
           IF G NOT = "c5d4a3b2e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL ASCENDING KEY TBL.
           IF G NOT = "a3b2c5d4e1"
              DISPLAY G
              END-DISPLAY
           END-IF.
           SORT TBL DESCENDING KEY.
           IF G NOT = "e1d4c5b2a3"
              DISPLAY G
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([SORT: table sort (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 K                 PIC 9(2).

       01 CNT1              PIC 9(9) COMP-5 VALUE 4.
       01 TAB1.
          05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
                                 DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99.

       01 TAB2.
          05 CNT2           PIC 9(9) COMP-5 VALUE 4.
          05 ROW2 OCCURS 1 TO 4 DEPENDING CNT2
                                 DESCENDING TAB2-NR.
             10 TAB2-NR PIC 99.

       01 TAB3.
          05 CNT3           PIC 9(9) COMP-5 VALUE 10.
          05 ROW3 OCCURS 1 TO 10 DEPENDING CNT3
                                  DESCENDING TAB3-NR
                                  ASCENDING TAB3-DATA.
             10 TAB3-NR     PIC 99.
             10 FILLER      PIC X(2).
             10 TAB3-DATA   PIC X(5).
             10 FILLER      PIC X(2).
             10 TAB3-DATA2  PIC X(5).


       PROCEDURE DIVISION.
       A.
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             MOVE K TO TAB1-NR(K), TAB2-NR(K)
           END-PERFORM

           MOVE 1 TO TAB3-NR(1).
           MOVE 1 TO TAB3-NR(8).
           MOVE 1 TO TAB3-NR(4).
           MOVE 6 TO TAB3-NR(2).
           MOVE 5 TO TAB3-NR(3).
           MOVE 5 TO TAB3-NR(9).
           MOVE 2 TO TAB3-NR(5).
           MOVE 2 TO TAB3-NR(10).
           MOVE 4 TO TAB3-NR(6).
           MOVE 3 TO TAB3-NR(7).

           MOVE "abcde" TO TAB3-DATA(1).
           MOVE "AbCde" TO TAB3-DATA(2).
           MOVE "abcde" TO TAB3-DATA(3).
           MOVE "zyx" TO TAB3-DATA(4).
           MOVE "12345" TO TAB3-DATA(5).
           MOVE "zyx" TO TAB3-DATA(6).
           MOVE "abcde" TO TAB3-DATA(7).
           MOVE "AbCde" TO TAB3-DATA(8).
           MOVE "abc" TO TAB3-DATA(9).
           MOVE "12346" TO TAB3-DATA(10).

           MOVE "day" TO TAB3-DATA2(1).
           MOVE "The" TO TAB3-DATA2(2).
           MOVE "eats" TO TAB3-DATA2(3).
           MOVE "." TO TAB3-DATA2(4).
           MOVE "mooos" TO TAB3-DATA2(5).
           MOVE "grass" TO TAB3-DATA2(6).
           MOVE "and" TO TAB3-DATA2(7).
           MOVE "whole" TO TAB3-DATA2(8).
           MOVE "cow" TO TAB3-DATA2(9).
           MOVE "the" TO TAB3-DATA2(10).

           SORT ROW1 DESCENDING TAB1-NR
           SORT ROW2 DESCENDING TAB2-NR

           DISPLAY "SINGLE TABLE" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY  FUNCTION TRIM(TAB1-NR(K)) END-DISPLAY
           END-PERFORM

           DISPLAY "LOWER LEVEL TABLE" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY  FUNCTION TRIM(TAB2-NR(K)) END-DISPLAY
           END-PERFORM

           SORT ROW3 DESCENDING TAB3-NR ASCENDING TAB3-DATA

           DISPLAY "MULTY KEY SORT" END-DISPLAY
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 10
             DISPLAY  FUNCTION TRIM(ROW3(K))
             END-DISPLAY
           END-PERFORM

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [SINGLE TABLE
04
03
02
01
LOWER LEVEL TABLE
04
03
02
01
MULTY KEY SORT
06  AbCde  The
05  abc    cow
05  abcde  eats
04  zyx    grass
03  abcde  and
02  12345  mooos
02  12346  the
01  AbCde  whole
01  abcde  day
01  zyx    .
], [])

AT_CLEANUP


AT_SETUP([SORT: table sort (3)])
AT_SKIP_IF(true)

AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 K                 PIC 9(2).

       01 CNT1              PIC 9(9) COMP-5 VALUE 4.
       01 TAB1.
          05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
                                  DESCENDING TAB1-NR.
             10 TAB1-NR     PIC 99.
             10 TAB-DATA    PIC X(5).

       PROCEDURE DIVISION.
       A.
           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             MOVE K TO TAB1-NR(K)
             MOVE 'BLA' TO TAB-DATA(K)
           END-PERFORM

           SORT ROW1.

           PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
             DISPLAY TAB1-NR(K) NO ADVANCING END-DISPLAY
           END-PERFORM

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [04030201], [])

AT_CLEANUP


AT_SETUP([SORT: EBCDIC table sort])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET ALPHA IS EBCDIC.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 Z  PIC X(10)  VALUE "d4b2e1a3c5".
       01 G.
         02 TBL         OCCURS 10.
           03 X         PIC X.
       PROCEDURE        DIVISION.
           MOVE Z TO G.
           SORT TBL ASCENDING KEY X SEQUENCE ALPHA.
           IF G NOT = "abcde12345"
              DISPLAY G
              END-DISPLAY
           END-IF.
           MOVE Z TO G.
           SORT TBL DESCENDING KEY X SEQUENCE ALPHA.
           IF G NOT = "54321edcba"
              DISPLAY G
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PIC ZZZ-, ZZZ+])
AT_KEYWORDS([runmisc editing])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X-ZZZN                    PIC ZZZ-.
       01  XZN-RED REDEFINES X-ZZZN  PIC X(4).
       01  X-ZZZP                    PIC ZZZ+.
       01  XZP-RED REDEFINES X-ZZZP  PIC X(4).
       PROCEDURE        DIVISION.
           MOVE -1 TO X-ZZZN.
           IF XZN-RED NOT = "  1-"
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.
           MOVE  0 TO X-ZZZN.
           IF XZN-RED NOT = "    "
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.
           MOVE +1 TO X-ZZZN.
           IF XZN-RED NOT = "  1 "
              DISPLAY "(" X-ZZZN ")"
              END-DISPLAY
           END-IF.

           MOVE -1 TO X-ZZZP.
           IF XZP-RED NOT = "  1-"
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           MOVE  0 TO X-ZZZP.
           IF XZP-RED NOT = "    "
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           MOVE +1 TO X-ZZZP.
           IF XZP-RED NOT = "  1+"
              DISPLAY "(" X-ZZZP ")"
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([PERFORM type OSVS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYOCC        PIC 9(8) COMP VALUE 0.
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           PERFORM BTEST.
           IF MYOCC NOT = 2
              DISPLAY MYOCC
              END-DISPLAY
           END-IF.
           STOP RUN.
       BTEST SECTION.
       B01.
           PERFORM B02 VARYING MYOCC FROM 1 BY 1
                   UNTIL MYOCC > 5.
           GO TO B99.
       B02.
           IF MYOCC > 1
              GO TO B99
           END-IF.
       B99.
           EXIT.
])

AT_CHECK([$COMPILE -fperform-osvs prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Sticky LINKAGE])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       01 P3            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 = "A"
              SET ADDRESS OF P3 TO ADDRESS OF P2
           ELSE
              IF P3 NOT = "OKOKOK"
                 DISPLAY P3
                 END-DISPLAY
              END-IF
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X    VALUE "A".
       01 P2            PIC X(6) VALUE "NOT OK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1 P2
           END-CALL.
           MOVE "B"      TO P1.
           MOVE "OKOKOK" TO P2.
           CALL "callee" USING P1
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE -fsticky-linkage callee.cob], [0], [], [])
AT_CHECK([$COMPILE -fsticky-linkage caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([COB_PRE_LOAD])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee2"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([COB_PRE_LOAD=callee ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([COB_PRE_LOAD with entry points])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 VAR1 PIC X(5) VALUE '12abc'.
        01 VAR2 PIC X(2) VALUE '11'.

        PROCEDURE DIVISION.

        ENTRY 'ent1'.
        DISPLAY VAR1 END-DISPLAY
        GOBACK.

        ENTRY 'ent2'.
        DISPLAY VAR2 END-DISPLAY
        GOBACK.
])

AT_DATA([prog1.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. prog1.

        DATA DIVISION.
        WORKING-STORAGE SECTION.

        01 VAR2 PIC X(2) VALUE '55'.
        01 VAR3 PIC X(5) VALUE 'xxxxx'.

        PROCEDURE DIVISION.

        ENTRY 'ent2'.
        DISPLAY VAR2 END-DISPLAY
        GOBACK.

        ENTRY 'ent3'.
        DISPLAY VAR3 END-DISPLAY
        GOBACK.
])

AT_DATA([main-prog.cob], [
        IDENTIFICATION DIVISION.
        PROGRAM-ID. main-prog.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        PROCEDURE DIVISION.

        CALL 'ent1' END-CALL
        CALL 'ent2' END-CALL
        CALL 'ent3' END-CALL

        STOP RUN.
])

AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE prog1.cob], [0], [], [])
AT_CHECK([$COMPILE main-prog.cob], [0], [], [])
AT_CHECK([COB_PRE_LOAD="prog"$PATHSEP"prog1" $COBCRUN_DIRECT ./main-prog], [0],
[12abc
11
xxxxx
], [])

AT_CLEANUP


AT_SETUP([Lookup ENTRY from main executable])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-LINK         USAGE PROGRAM-POINTER.

       PROCEDURE DIVISION.
       SET PROGRAM-LINK TO ENTRY "subprogram"
       IF PROGRAM-LINK EQUAL NULL THEN
           DISPLAY "error: no subprogram linkage" UPON SYSERR
           END-DISPLAY
       ELSE
           CALL PROGRAM-LINK
               ON EXCEPTION
                   DISPLAY "hard error: unable to invoke subprogram"
                      UPON SYSERR
                   END-DISPLAY
           END-CALL
           DISPLAY RETURN-CODE WITH NO ADVANCING
           END-DISPLAY
       END-IF
       GOBACK.

       ENTRY "subprogram".
           DISPLAY "subprogram" WITH NO ADVANCING
           END-DISPLAY
           SET RETURN-CODE TO 42
       .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [42], [subprogram+000000042], [])

AT_CLEANUP


AT_SETUP([COB_LOAD_CASE=UPPER test])
AT_KEYWORDS([runmisc])

AT_DATA([CALLEE.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE CALLEE.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([COB_LOAD_CASE=UPPER ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE / FREE with BASED item (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01  MYFLD        PIC X(6) BASED VALUE "ABCDEF".
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           ALLOCATE MYFLD INITIALIZED.
           IF MYFLD NOT = "ABCDEF"
              DISPLAY MYFLD
              END-DISPLAY
           END-IF.
           FREE ADDRESS OF MYFLD.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE / FREE with BASED item (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 MYFLD         BASED.
             03 MYFLDX  PIC X.
             03 MYFLD9  PIC 9.
       PROCEDURE        DIVISION.
           IF ADDRESS OF MYFLD NOT = NULL
              DISPLAY "BASED ITEM WITH ADDRESS ON START"
              END-DISPLAY
           END-IF.
           FREE MYFLD.
           ALLOCATE MYFLD.
           IF ADDRESS OF MYFLD = NULL
              DISPLAY "BASED ITEM WITHOUT ADDRESS AFTER ALLOCATE"
              END-DISPLAY
           END-IF.
           INITIALIZE MYFLD.
           IF MYFLD NOT = " 0"
              DISPLAY "BASED ITEM INITIALIZED WRONG: "
                 WITH NO ADVANCING
              END-DISPLAY
              DISPLAY MYFLD
              END-DISPLAY
           END-IF.

           FREE ADDRESS OF MYFLD.
           IF ADDRESS OF MYFLD NOT = NULL
              DISPLAY "BASED ITEM WITH ADDRESS AFTER FREE"
              END-DISPLAY
           END-IF.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
# Run both executable and module as we have a different code generation here
AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ALLOCATE CHARACTERS INITIALIZED TO])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYPTR        USAGE POINTER.
       LINKAGE          SECTION.
       01  MYFLD        PIC X(4).
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           ALLOCATE 4 CHARACTERS
                    INITIALIZED TO "ABCD"
                    RETURNING MYPTR.
           SET ADDRESS OF MYFLD TO MYPTR.
           IF MYFLD NOT = "ABCD"
              DISPLAY MYFLD
              END-DISPLAY
           END-IF.
           FREE MYPTR.
           ALLOCATE 4 CHARACTERS
                    INITIALIZED TO ALL "Z"
                    RETURNING MYPTR.
           SET ADDRESS OF MYFLD TO MYPTR.
           IF MYFLD NOT = "ZZZZ"
              DISPLAY MYFLD
              END-DISPLAY
           END-IF.
           FREE MYPTR.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Initialized value with defaultbyte])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYFLD        PIC X(6).
       PROCEDURE        DIVISION.
       ASTART SECTION.
       A01.
           IF MYFLD NOT = "AAAAAA"
              DISPLAY MYFLD
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -fdefaultbyte=A prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL with OMITTED parameter])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY P2
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X    VALUE "A".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           END-CALL.
           CALL "callee" USING P1 OMITTED
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL in from C, cob_call_params explicitly set])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 OPTIONAL P2.
           IF P2 NOT OMITTED
              DISPLAY 'UNEXPECTED P2: ' P2
              END-DISPLAY
           END-IF
           DISPLAY 'P1: ' P1 WITH NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.c], [[
#include <libcob.h>

int callee (char *, char *);

#ifndef NULL
#define NULL (void*)0
#endif

int
main (int argc, char **argv)
{
   cob_global *cobol_global;
   /* for storing COBOL return code */
   int cob_ret;

   /* initialize parameters */
   char *p1 = "A";

   /* initialize the COBOL run-time library */
   cob_init(argc, argv);

   /* setup for COBOL parameter handling */
   cobol_global = cob_get_global_ptr ();
   cobol_global->cob_call_params = 1;

   /* call COBOL program */
   cob_ret = callee (p1, NULL);

   /* Clean up and terminate - This does not return */
   cob_stop_run (cob_ret);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [P1: A], [])

AT_CLEANUP


AT_SETUP([CALL in from C, cob_call_params unknown])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 NOT EQUAL "A"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           IF P2 NOT EQUAL "FROM C"
              DISPLAY P2
              END-DISPLAY
           ELSE
              DISPLAY "OK" WITH NO ADVANCING
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.c], [[
#include <libcob.h>

int callee (char *, char *);

int
main (int argc, char **argv)
{
   /* for storing COBOL return code */
   int cob_ret;

   /* initialize parameters */
   char *p1 = "A";
   char *p2 = "FROM C";

   /* initialize the COBOL run-time library */
   cob_init (argc, argv);

   /* call COBOL program */
   cob_ret = callee (p1, p2);

   /* Clean up and terminate - This does not return */
   cob_stop_run (cob_ret);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CALL C with callback, PROCEDURE DIVISION EXTERN])
AT_KEYWORDS([runmisc extensions call-convention])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           CALL-CONVENTION 0 IS EXTERN.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION EXTERN USING
                        BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_DATA([cprog.c], [[
#include <libcob.h>

COB_EXT_EXPORT int
cprog (void *cb)
{
   char *p1;
   int  p2 = 42;
   char *p3 = "CALLBACK";

   p1 = p3;
   ((int (*)(char *, int, char *))cb)(p1, p2, p3);
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL C with callback, ENTRY-CONVENTION EXTERN])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       OPTIONS.
           ENTRY-CONVENTION COBOL.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 CB            USAGE PROGRAM-POINTER.
       PROCEDURE        DIVISION.
           SET CB TO ENTRY "callback"
           CALL STATIC "cprog" USING BY VALUE CB
           END-CALL
           EXIT PROGRAM.
       END PROGRAM prog.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callback.
       OPTIONS.
           ENTRY-CONVENTION EXTERN.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            USAGE POINTER.
       01 P2            USAGE BINARY-LONG.
       01 P3            PIC X(8).
       PROCEDURE        DIVISION USING
                        BY VALUE P1 P2 BY REFERENCE P3.
           IF P1 NOT EQUAL ADDRESS OF P3
              DISPLAY P1
              END-DISPLAY
           END-IF
           IF P2 NOT EQUAL 42
              DISPLAY P2
              END-DISPLAY
           END-IF
           IF P3 NOT EQUAL "CALLBACK"
              DISPLAY P3
              END-DISPLAY
           END-IF
           EXIT PROGRAM.
])

AT_DATA([cprog.c], [[
#include <libcob.h>

COB_EXT_EXPORT int
cprog (void *cb)
{
   char *p1;
   int  p2 = 42;
   char *p3 = "CALLBACK";

   p1 = p3;
   ((int (*)(char *, int, char *))cb)(p1, p2, p3);
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL in from C with init missing / implicit])
AT_KEYWORDS([runmisc implicit-init])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 P1            PIC X.
       01 P2            PIC X(6).
       PROCEDURE        DIVISION USING P1 P2.
           IF P1 NOT EQUAL "A"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           IF P2 NOT EQUAL "FROM C"
              DISPLAY P2
              END-DISPLAY
           ELSE
              DISPLAY "OK" WITH NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_DATA([caller.c], [[
int callee (char *, char *);

int
main (int argc, char **argv)
{
   /* initialize parameters */
   char *p1 = "A";
   char *p2 = "FROM C";

   /* call COBOL program (initialization missing)
      note: COBOL program terminates the program by STOP RUN */
   (void)callee (p1, p2);
}
]])

AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: cob_init() has not been called
])

AT_CHECK([$COMPILE -fimplicit-init -o caller caller.c callee.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([CALL STATIC C from COBOL])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X VALUE "A".
       01 P2            PIC X(7).
       77 P2-COB        PIC X(7).
       PROCEDURE        DIVISION.
           CALL STATIC 'callee' USING P1 P2
           IF P1 NOT EQUAL "B"
              DISPLAY 'NOT A: ' P1
              END-DISPLAY
           END-IF
           UNSTRING P2 DELIMITED BY LOW-VALUE
              INTO P2-COB
           END-UNSTRING
           EVALUATE TRUE
              WHEN P2-COB NOT EQUAL "FROM C"
                 DISPLAY P2-COB '-' P2
                 END-DISPLAY
              WHEN RETURN-CODE NOT = 3
                 DISPLAY RETURN-CODE
                 END-DISPLAY
              WHEN OTHER
                 DISPLAY 'OK'  WITH NO ADVANCING
                 END-DISPLAY
                 MOVE 0  TO RETURN-CODE
           END-EVALUATE
           EXIT PROGRAM.
])

AT_DATA([callee.c], [[
#include <string.h>

int
callee (char *p1, char *p2)
{
   if (p1[0] == 'A') {
      p1[0] = 'B';
   }
   memcpy (p2, "FROM C", 6);

   return 3;
}
]])

AT_CHECK([$COMPILE -o caller caller.cob callee.c], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (1)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P2            PIC 99.
       LINKAGE          SECTION.
       01 P1            PIC X ANY LENGTH.
       PROCEDURE        DIVISION USING P1.
           MOVE LENGTH OF P1 TO P2.
           IF P2 NOT = 6
              DISPLAY P2
              END-DISPLAY
           END-IF.
           IF P1 NOT = "OKOKOK"
              DISPLAY P1
              END-DISPLAY
           END-IF.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X(6) VALUE "OKOKOK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (2)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P2            PIC XXX.
       LINKAGE          SECTION.
       01 P1            PIC X ANY LENGTH.
       PROCEDURE        DIVISION USING P1.
           MOVE P1 TO P2.
           IF P2 NOT = "OK "
              DISPLAY P2
              END-DISPLAY
           END-IF.
           MOVE SPACE TO P1.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 P1            PIC X(2) VALUE "OK".
       PROCEDURE        DIVISION.
           CALL "callee" USING P1
           END-CALL.
           IF P1 NOT = SPACE
              DISPLAY P1
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])

AT_CLEANUP


AT_SETUP([ANY LENGTH (3)])
AT_KEYWORDS([runmisc CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 str PIC X(20) VALUE ALL "X".

       PROCEDURE DIVISION.
           CALL "subprog" USING str
           .
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str.
           MOVE "abcd" TO str
           DISPLAY FUNCTION TRIM (str)
           MOVE "abcd" TO str (5:)
           DISPLAY FUNCTION TRIM (str)
           MOVE ALL "a" TO str
           DISPLAY FUNCTION TRIM (str)
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[abcd
abcdabcd
aaaaaaaaaaaaaaaaaaaa
])
AT_CLEANUP


AT_SETUP([ANY LENGTH (4)])
AT_KEYWORDS([runmisc IF CALL])

# comparision of any length was done only for first character - see bug 511

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 str PIC X(20) VALUE ALL "X".

       PROCEDURE DIVISION.
           CALL "subprog" USING str
           move '   45'   to str
           CALL "subprog" USING str
           .
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str.
           IF str = 'X'
             DISPLAY 'X is X'
           END-IF
           IF str = space
             DISPLAY 'X is space'
           END-IF
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([ANY LENGTH (5)])
AT_KEYWORDS([runmisc])

# any length variables resulted in SIGSEGV when module was first program called

AT_DATA([subprog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. subprog.

       DATA DIVISION.
       LINKAGE SECTION.
       01 str1 PIC X ANY LENGTH.
       01 str2 PIC X ANY LENGTH.

       PROCEDURE DIVISION USING str1 str2.
           DISPLAY 'IN' WITH NO ADVANCING
           .
       END PROGRAM subprog.
])

AT_CHECK([$COMPILE_MODULE subprog.cob], [0], [], [])
AT_CHECK([$COBCRUN subprog some test stuff], [0], [IN], [])
AT_CLEANUP


AT_SETUP([access to BASED item without allocation])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) BASED.
       PROCEDURE        DIVISION.
           DISPLAY X NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             BASED.
          05 Y          PIC X(4).
       PROCEDURE        DIVISION.
           DISPLAY Y NO ADVANCING
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COMPILE prog2.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:8: BASED/LINKAGE item 'X' has NULL address
])
AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
[libcob: prog2.cob:9: BASED/LINKAGE item 'X' (accessed by 'Y') has NULL address
])

AT_CLEANUP


AT_SETUP([access to OPTIONAL LINKAGE item not passed])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE '9876'.
       PROCEDURE        DIVISION.
           CALL 'callee' USING X
           END-CALL
           CALL 'callee' USING OMITTED
           END-CALL
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 X.
          05 Y          PIC X(4).
       PROCEDURE        DIVISION USING OPTIONAL X.
           IF Y NOT = '9876'
              DISPLAY Y NO ADVANCING
              END-DISPLAY
           END-IF.
           GOBACK.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
[libcob: callee.cob:9: LINKAGE item 'X' (accessed by 'Y') not passed by caller
])

AT_CLEANUP


AT_SETUP([STOP RUN WITH NORMAL STATUS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           STOP RUN WITH NORMAL STATUS.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([STOP RUN WITH ERROR STATUS])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
           STOP RUN WITH ERROR STATUS.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1])

AT_CLEANUP


AT_SETUP([SYMBOLIC clause])
AT_KEYWORDS([runmisc ALPHABET])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           ALPHABET A-EBC IS EBCDIC
           ALPHABET A-ASC IS ASCII
           SYMBOLIC Z-EBC IS 241 IN A-EBC
           SYMBOLIC Z-ASC IS  49 IN A-ASC
           .
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  Z            PIC X.
       PROCEDURE        DIVISION.
           MOVE Z-ASC   TO Z.
           IF Z NOT = "0"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           MOVE Z-EBC   TO Z.
           IF Z NOT = "0"
              DISPLAY Z
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([OCCURS clause with 1 entry])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  D1.
           03  FILLER   OCCURS 1.
               05 D1-ENTRY   PIC X(03) value '123'.
       01  D2.
           03  D2-ENTRY   PIC X(03)  value 'ABC'  OCCURS 1.
       01  D1TOR.
           03  FILLER   PIC X(03) value '456'.
       01  D1-R         REDEFINES D1TOR.
           03  FILLER   OCCURS 1.
               05 D1-R-ENTRY   PIC X(03).
       01  D2TOR.
           03  FILLER   PIC X(03) value 'DEF'.
       01  D2-R         REDEFINES D2TOR.
           03  D2-R-ENTRY   PIC X(03)   OCCURS 1.

       PROCEDURE        DIVISION.
           IF D1-ENTRY (1) NOT = "123"
              DISPLAY D1-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D2-ENTRY (1) NOT = "ABC"
              DISPLAY D2-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D1-R-ENTRY (1) NOT = "456"
              DISPLAY D1-R-ENTRY (1)
              END-DISPLAY
           END-IF.
           IF D2-R-ENTRY (1) NOT = "DEF"
              DISPLAY D2-R-ENTRY (1)
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Computing of different USAGEs w/o decimal point])
AT_KEYWORDS([runmisc
BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-X COMP-N
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

      *
       77  BCL-A           BINARY-C-LONG    VALUE 1.
       77  BCL-B           BINARY-C-LONG    VALUE 10.
       77  BCL-RES         BINARY-C-LONG.
      *
       77  BC-A            BINARY-CHAR      VALUE 1.
       77  BC-B            BINARY-CHAR      VALUE 10.
       77  BC-RES          BINARY-CHAR.
      *
       77  BD-A            BINARY-DOUBLE    VALUE 1.
       77  BD-B            BINARY-DOUBLE    VALUE 10.
       77  BD-RES          BINARY-DOUBLE.
      *
       77  BL-A            BINARY-LONG      VALUE 1.
       77  BL-B            BINARY-LONG      VALUE 10.
       77  BL-RES          BINARY-LONG.
      *
       77  C-A     PIC S99 COMP             VALUE 1.
       77  C-B     PIC S99 COMP             VALUE 10.
       77  C-RES   PIC S99 COMP.
      *
       77  C1-A            COMP-1           VALUE 1.
       77  C1-B            COMP-1           VALUE 10.
       77  C1-RES          COMP-1.
      *
       77  C2-A            COMP-2           VALUE 1.
       77  C2-B            COMP-2           VALUE 10.
       77  C2-RES          COMP-2.
      *
       77  C3-A    PIC S99 COMP-3           VALUE 1.
       77  C3-B    PIC S99 COMP-3           VALUE 10.
       77  C3-RES  PIC S99 COMP-3.
      *
       77  C5-A    PIC S99 COMP-5           VALUE 1.
       77  C5-B    PIC S99 COMP-5           VALUE 10.
       77  C5-RES  PIC S99 COMP-5.
      *
       77  C6-A    PIC  99 COMP-6           VALUE 1.
       77  C6-B    PIC  99 COMP-6           VALUE 10.
       77  C6-RES  PIC  99 COMP-6.
      *
       77  CN9-A   PIC  99 COMP-N           VALUE 1.
       77  CN9-B   PIC  99 COMP-N           VALUE 10.
       77  CN9-RES PIC  99 COMP-N.
      *
       77  CNX-A   PIC  X  COMP-N           VALUE 1.
       77  CNX-B   PIC  X  COMP-N           VALUE 10.
       77  CNX-RES PIC  X  COMP-N.
      *
       77  CX9-A   PIC  99 COMP-X           VALUE 1.
       77  CX9-B   PIC  99 COMP-X           VALUE 10.
       77  CX9-RES PIC  99 COMP-X.
      *
       77  CXX-A   PIC  X  COMP-X           VALUE 1.
       77  CXX-B   PIC  X  COMP-X           VALUE 10.
       77  CXX-RES PIC  X  COMP-X.
      *
       77  D-A     PIC  S99                 VALUE 1.
       77  D-B     PIC  S99                 VALUE 10.
       77  D-RES   PIC  S99.
      *
       77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.
       77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.
       77  FD16-RES        FLOAT-DECIMAL-16.
      *
       77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.
       77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.
       77  FD34-RES        FLOAT-DECIMAL-34.
      *
       77  FL-A            FLOAT-LONG       VALUE 1.
       77  FL-B            FLOAT-LONG       VALUE 10.
       77  FL-RES          FLOAT-LONG.
      *
       77  FS-A            FLOAT-SHORT      VALUE 1.
       77  FS-B            FLOAT-SHORT      VALUE 10.
       77  FS-RES          FLOAT-SHORT.
      *
       PROCEDURE DIVISION.
      *
           ADD  BCL-B  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11
              DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BCL-A.
           ADD  10    TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11
              DISPLAY 'ERROR BINARY-C-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BCL-A.
           SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1
              DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BCL-A.
           SUBTRACT 10   FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1
              DISPLAY 'ERROR BINARY-C-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BC-B  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11
              DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BC-A.
           ADD  10    TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11
              DISPLAY 'ERROR BINARY-CHAR + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BC-A.
           SUBTRACT BC-B FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1
              DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BC-A.
           SUBTRACT 10   FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1
              DISPLAY 'ERROR BINARY-CHAR - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BD-B  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11
              DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BD-A.
           ADD  10    TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11
              DISPLAY 'ERROR BINARY-DOUBLE + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BD-A.
           SUBTRACT BD-B FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1
              DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BD-A.
           SUBTRACT 10   FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1
              DISPLAY 'ERROR BINARY-DOUBLE - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BL-B  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11
              DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO BL-A.
           ADD  10    TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11
              DISPLAY 'ERROR BINARY-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BL-A.
           SUBTRACT BL-B FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1
              DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO BL-A.
           SUBTRACT 10   FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1
              DISPLAY 'ERROR BINARY-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C-B  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11
              DISPLAY 'ERROR COMP + COMP'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C-A.
           ADD  10    TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11
              DISPLAY 'ERROR COMP + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C-A.
           SUBTRACT C-B FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1
              DISPLAY 'ERROR COMP - COMP'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C-A.
           SUBTRACT 10   FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1
              DISPLAY 'ERROR COMP - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C1-B  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11
              DISPLAY 'ERROR COMP-1 + COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C1-A.
           ADD  10    TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11
              DISPLAY 'ERROR COMP-1 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C1-A.
           SUBTRACT C1-B FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1
              DISPLAY 'ERROR COMP-1 - COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C1-A.
           SUBTRACT 10   FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1
              DISPLAY 'ERROR COMP-1 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C2-B  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11
              DISPLAY 'ERROR COMP-2 + COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C2-A.
           ADD  10    TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11
              DISPLAY 'ERROR COMP-2 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C2-A.
           SUBTRACT C2-B FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1
              DISPLAY 'ERROR COMP-2 - COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C2-A.
           SUBTRACT 10   FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1
              DISPLAY 'ERROR COMP-2 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C3-B  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11
              DISPLAY 'ERROR COMP-3 + COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C3-A.
           ADD  10    TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11
              DISPLAY 'ERROR COMP-3 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C3-A.
           SUBTRACT C3-B FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1
              DISPLAY 'ERROR COMP-3 - COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C3-A.
           SUBTRACT 10   FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1
              DISPLAY 'ERROR COMP-3 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C5-B  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11
              DISPLAY 'ERROR COMP-5 + COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C5-A.
           ADD  10    TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11
              DISPLAY 'ERROR COMP-5 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C5-A.
           SUBTRACT C5-B FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1
              DISPLAY 'ERROR COMP-5 - COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C5-A.
           SUBTRACT 10   FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1
              DISPLAY 'ERROR COMP-5 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C6-B  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11
              DISPLAY 'ERROR COMP-6 + COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 1     TO C6-A.
           ADD  10    TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11
              DISPLAY 'ERROR COMP-6 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C6-A.
           SUBTRACT C6-B FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1
              DISPLAY 'ERROR COMP-6 - COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 11    TO C6-A.
           SUBTRACT 10   FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1
              DISPLAY 'ERROR COMP-6 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CN9-B  TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CN9-A.
           ADD  10    TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CN9-A.
           SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CN9-A.
           SUBTRACT 10   FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CNX-B  TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CNX-A.
           ADD  10    TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CNX-A.
           SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CNX-A.
           SUBTRACT 10   FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CX9-B  TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CX9-A.
           ADD  10    TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CX9-A.
           SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CX9-A.
           SUBTRACT 10   FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CXX-B  TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1     TO CXX-A.
           ADD  10    TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CXX-A.
           SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11    TO CXX-A.
           SUBTRACT 10   FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  D-B  TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11
              DISPLAY 'ERROR DISPLAY + DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 1     TO D-A.
           ADD  10    TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11
              DISPLAY 'ERROR DISPLAY + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO D-A.
           SUBTRACT D-B FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1
              DISPLAY 'ERROR DISPLAY - DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 11    TO D-A.
           SUBTRACT 10   FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1
              DISPLAY 'ERROR DISPLAY - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD16-B  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FD16-A.
           ADD  10    TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD16-A.
           SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD16-A.
           SUBTRACT 10   FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD34-B  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FD34-A.
           ADD  10    TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD34-A.
           SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FD34-A.
           SUBTRACT 10   FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FL-B  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11
              DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FL-A.
           ADD  10    TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11
              DISPLAY 'ERROR FLOAT-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FL-A.
           SUBTRACT FL-B FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1
              DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FL-A.
           SUBTRACT 10   FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1
              DISPLAY 'ERROR FLOAT-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FS-B  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11
              DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 1     TO FS-A.
           ADD  10    TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11
              DISPLAY 'ERROR FLOAT-SHORT + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FS-A.
           SUBTRACT FS-B FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1
              DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 11    TO FS-A.
           SUBTRACT 10   FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1
              DISPLAY 'ERROR FLOAT-SHORT - NUM'
              END-DISPLAY
           END-IF.
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Computing of different USAGEs w/- decimal point])
AT_KEYWORDS([runmisc
BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-N COMP-X
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'prog'.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
      *
       77  BCL-A           BINARY-C-LONG    VALUE 1.0.
       77  BCL-B           BINARY-C-LONG    VALUE 10.0.
       77  BCL-RES         BINARY-C-LONG.
      *
       77  BC-A            BINARY-CHAR      VALUE 1.0.
       77  BC-B            BINARY-CHAR      VALUE 10.0.
       77  BC-RES          BINARY-CHAR.
      *
       77  BD-A            BINARY-DOUBLE    VALUE 1.0.
       77  BD-B            BINARY-DOUBLE    VALUE 10.0.
       77  BD-RES          BINARY-DOUBLE.
      *
       77  BL-A            BINARY-LONG      VALUE 1.0.
       77  BL-B            BINARY-LONG      VALUE 10.0.
       77  BL-RES          BINARY-LONG.
      *
       77  C-A     PIC S99 COMP             VALUE 1.0.
       77  C-B     PIC S99 COMP             VALUE 10.0.
       77  C-RES   PIC S99 COMP.
      *
       77  C1-A            COMP-1           VALUE 1.0.
       77  C1-B            COMP-1           VALUE 10.0.
       77  C1-RES          COMP-1.
      *
       77  C2-A            COMP-2           VALUE 1.0.
       77  C2-B            COMP-2           VALUE 10.0.
       77  C2-RES          COMP-2.
      *
       77  C3-A    PIC S99 COMP-3           VALUE 1.0.
       77  C3-B    PIC S99 COMP-3           VALUE 10.0.
       77  C3-RES  PIC S99 COMP-3.
      *
       77  C5-A    PIC S99 COMP-5           VALUE 1.0.
       77  C5-B    PIC S99 COMP-5           VALUE 10.0.
       77  C5-RES  PIC S99 COMP-5.
      *
       77  C6-A    PIC  99 COMP-6           VALUE 1.0.
       77  C6-B    PIC  99 COMP-6           VALUE 10.0.
       77  C6-RES  PIC  99 COMP-6.
      *
       77  CN9-A   PIC  99 COMP-N           VALUE 1.
       77  CN9-B   PIC  99 COMP-N           VALUE 10.
       77  CN9-RES PIC  99 COMP-N.
      *
       77  CNX-A   PIC  X  COMP-N           VALUE 1.
       77  CNX-B   PIC  X  COMP-N           VALUE 10.
       77  CNX-RES PIC  X  COMP-N.
      *
       77  CX9-A   PIC  99 COMP-X           VALUE 1.
       77  CX9-B   PIC  99 COMP-X           VALUE 10.
       77  CX9-RES PIC  99 COMP-X.
      *
       77  CXX-A   PIC  X  COMP-X           VALUE 1.
       77  CXX-B   PIC  X  COMP-X           VALUE 10.
       77  CXX-RES PIC  X  COMP-X.
      *
       77  D-A     PIC  S99                 VALUE 1.0.
       77  D-B     PIC  S99                 VALUE 10.0.
       77  D-RES   PIC  S99.
      *
       77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.0.
       77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.0.
       77  FD16-RES        FLOAT-DECIMAL-16.
      *
       77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.0.
       77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.0.
       77  FD34-RES        FLOAT-DECIMAL-34.
      *
       77  FL-A            FLOAT-LONG       VALUE 1.0.
       77  FL-B            FLOAT-LONG       VALUE 10.0.
       77  FL-RES          FLOAT-LONG.
      *
       77  FS-A            FLOAT-SHORT      VALUE 1.0.
       77  FS-B            FLOAT-SHORT      VALUE 10.0.
       77  FS-RES          FLOAT-SHORT.
      *
       PROCEDURE DIVISION.
      *
           ADD  BCL-B  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BCL-A.
           ADD  10.0  TO BCL-A END-ADD.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-C-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BCL-A.
           SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BCL-A.
           SUBTRACT 10.0 FROM BCL-A END-SUBTRACT.
           MOVE BCL-A  TO BCL-RES.
           IF BCL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-C-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BC-B  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BC-A.
           ADD  10.0  TO BC-A END-ADD.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-CHAR + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BC-A.
           SUBTRACT BC-B FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BC-A.
           SUBTRACT 10.0 FROM BC-A END-SUBTRACT.
           MOVE BC-A  TO BC-RES.
           IF BC-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-CHAR - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BD-B  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BD-A.
           ADD  10.0  TO BD-A END-ADD.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-DOUBLE + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BD-A.
           SUBTRACT BD-B FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BD-A.
           SUBTRACT 10.0 FROM BD-A END-SUBTRACT.
           MOVE BD-A  TO BD-RES.
           IF BD-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-DOUBLE - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  BL-B  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO BL-A.
           ADD  10.0  TO BL-A END-ADD.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 11.0
              DISPLAY 'ERROR BINARY-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BL-A.
           SUBTRACT BL-B FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO BL-A.
           SUBTRACT 10.0 FROM BL-A END-SUBTRACT.
           MOVE BL-A  TO BL-RES.
           IF BL-RES NOT = 1.0
              DISPLAY 'ERROR BINARY-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C-B  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11.0
              DISPLAY 'ERROR COMP + COMP'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C-A.
           ADD  10.0  TO C-A END-ADD.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 11.0
              DISPLAY 'ERROR COMP + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C-A.
           SUBTRACT C-B FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1.0
              DISPLAY 'ERROR COMP - COMP'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C-A.
           SUBTRACT 10.0 FROM C-A END-SUBTRACT.
           MOVE C-A  TO C-RES.
           IF C-RES NOT = 1.0
              DISPLAY 'ERROR COMP - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C1-B  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11.0
              DISPLAY 'ERROR COMP-1 + COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C1-A.
           ADD  10.0  TO C1-A END-ADD.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 11.0
              DISPLAY 'ERROR COMP-1 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C1-A.
           SUBTRACT C1-B FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1.0
              DISPLAY 'ERROR COMP-1 - COMP-1'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C1-A.
           SUBTRACT 10.0 FROM C1-A END-SUBTRACT.
           MOVE C1-A  TO C1-RES.
           IF C1-RES NOT = 1.0
              DISPLAY 'ERROR COMP-1 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C2-B  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11.0
              DISPLAY 'ERROR COMP-2 + COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C2-A.
           ADD  10.0  TO C2-A END-ADD.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 11.0
              DISPLAY 'ERROR COMP-2 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C2-A.
           SUBTRACT C2-B FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1.0
              DISPLAY 'ERROR COMP-2 - COMP-2'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C2-A.
           SUBTRACT 10.0 FROM C2-A END-SUBTRACT.
           MOVE C2-A  TO C2-RES.
           IF C2-RES NOT = 1.0
              DISPLAY 'ERROR COMP-2 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C3-B  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11.0
              DISPLAY 'ERROR COMP-3 + COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C3-A.
           ADD  10.0  TO C3-A END-ADD.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 11.0
              DISPLAY 'ERROR COMP-3 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C3-A.
           SUBTRACT C3-B FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1.0
              DISPLAY 'ERROR COMP-3 - COMP-3'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C3-A.
           SUBTRACT 10.0 FROM C3-A END-SUBTRACT.
           MOVE C3-A  TO C3-RES.
           IF C3-RES NOT = 1.0
              DISPLAY 'ERROR COMP-3 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C5-B  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11.0
              DISPLAY 'ERROR COMP-5 + COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C5-A.
           ADD  10.0  TO C5-A END-ADD.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 11.0
              DISPLAY 'ERROR COMP-5 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C5-A.
           SUBTRACT C5-B FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1.0
              DISPLAY 'ERROR COMP-5 - COMP-5'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C5-A.
           SUBTRACT 10.0 FROM C5-A END-SUBTRACT.
           MOVE C5-A  TO C5-RES.
           IF C5-RES NOT = 1.0
              DISPLAY 'ERROR COMP-5 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  C6-B  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11.0
              DISPLAY 'ERROR COMP-6 + COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO C6-A.
           ADD  10.0  TO C6-A END-ADD.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 11.0
              DISPLAY 'ERROR COMP-6 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C6-A.
           SUBTRACT C6-B FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1.0
              DISPLAY 'ERROR COMP-6 - COMP-6'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO C6-A.
           SUBTRACT 10.0 FROM C6-A END-SUBTRACT.
           MOVE C6-A  TO C6-RES.
           IF C6-RES NOT = 1.0
              DISPLAY 'ERROR COMP-6 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CN9-B  TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CN9-A.
           ADD  10.0   TO CN9-A END-ADD.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CN9-A.
           SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CN9-A.
           SUBTRACT 10.0  FROM CN9-A END-SUBTRACT.
           MOVE CN9-A  TO CN9-RES.
           IF CN9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CNX-B  TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CNX-A.
           ADD  10.0   TO CNX-A END-ADD.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-N + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CNX-A.
           SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - COMP-N'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CNX-A.
           SUBTRACT 10.0 FROM CNX-A END-SUBTRACT.
           MOVE CNX-A  TO CNX-RES.
           IF CNX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-N - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CX9-B  TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CX9-A.
           ADD  10.0   TO CX9-A END-ADD.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CX9-A.
           SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CX9-A.
           SUBTRACT 10.0 FROM CX9-A END-SUBTRACT.
           MOVE CX9-A  TO CX9-RES.
           IF CX9-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  CXX-B  TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 1.0    TO CXX-A.
           ADD  10.0   TO CXX-A END-ADD.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 11.0
              DISPLAY 'ERROR COMP-X + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0    TO CXX-A.
           SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - COMP-X'
              END-DISPLAY
           END-IF.
           MOVE 11.0   TO CXX-A.
           SUBTRACT 10.0 FROM CXX-A END-SUBTRACT.
           MOVE CXX-A  TO CXX-RES.
           IF CXX-RES NOT = 1.0
              DISPLAY 'ERROR COMP-X - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  D-B  TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11.0
              DISPLAY 'ERROR DISPLAY + DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 1.0  TO D-A.
           ADD  10.0 TO D-A END-ADD.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 11.0
              DISPLAY 'ERROR DISPLAY + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0 TO D-A.
           SUBTRACT D-B FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1.0
              DISPLAY 'ERROR DISPLAY - DISPLAY'
              END-DISPLAY
           END-IF.
           MOVE 11.0 TO D-A.
           SUBTRACT 10.0 FROM D-A END-SUBTRACT.
           MOVE D-A  TO D-RES.
           IF D-RES NOT = 1.0
              DISPLAY 'ERROR DISPLAY - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD16-B  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FD16-A.
           ADD  10.0  TO FD16-A END-ADD.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD16-A.
           SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD16-A.
           SUBTRACT 10.0 FROM FD16-A END-SUBTRACT.
           MOVE FD16-A  TO FD16-RES.
           IF FD16-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FD34-B  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FD34-A.
           ADD  10.0  TO FD34-A END-ADD.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD34-A.
           SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FD34-A.
           SUBTRACT 10.0 FROM FD34-A END-SUBTRACT.
           MOVE FD34-A  TO FD34-RES.
           IF FD34-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FL-B  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FL-A.
           ADD  10.0  TO FL-A END-ADD.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-LONG + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FL-A.
           SUBTRACT FL-B FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FL-A.
           SUBTRACT 10.0 FROM FL-A END-SUBTRACT.
           MOVE FL-A  TO FL-RES.
           IF FL-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-LONG - NUM'
              END-DISPLAY
           END-IF.
      *
           ADD  FS-B  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 1.0   TO FS-A.
           ADD  10.0  TO FS-A END-ADD.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 11.0
              DISPLAY 'ERROR FLOAT-SHORT + NUM'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FS-A.
           SUBTRACT FS-B FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
              END-DISPLAY
           END-IF.
           MOVE 11.0  TO FS-A.
           SUBTRACT 10.0 FROM FS-A END-SUBTRACT.
           MOVE FS-A  TO FS-RES.
           IF FS-RES NOT = 1.0
              DISPLAY 'ERROR FLOAT-SHORT - NUM'
              END-DISPLAY
           END-IF.
      *
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([C/C++ reserved words/predefined identifiers])
AT_KEYWORDS([runmisc])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
      *
      * Reserved Words in C (that aren't reserved in COBOL)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  const                       PIC X VALUE "A".
       77  double                      PIC X VALUE "B".
       77  float                       PIC X VALUE "C".
       77  int                         PIC X VALUE "D".
       77  short                       PIC X VALUE "E".
       77  struct                      PIC X VALUE "F".
       77  break                       PIC X VALUE "G".
       77  long                        PIC X VALUE "H".
       77  switch                      PIC X VALUE "I".
       77  void                        PIC X VALUE "J".
       77  case                        PIC X VALUE "K".
       77  enum                        PIC X VALUE "L".
       77  goto                        PIC X VALUE "M".
       77  register                    PIC X VALUE "N".
       77  sizeof                      PIC X VALUE "O".
       77  volatile                    PIC X VALUE "P".
       77  char                        PIC X VALUE "Q".
       77  do                          PIC X VALUE "R".
       77  extern                      PIC X VALUE "S".
       77  static                      PIC X VALUE "T".
       77  union                       PIC X VALUE "U".
       77  while                       PIC X VALUE "V".
      *
      * More Reserved Words in C++
      * var names MUST BE IN LOWER CASE (!)
      *
       77  asm                         PIC X VALUE "W".
       77  dynamic_cast                PIC X VALUE "X".
       77  namespace                   PIC X VALUE "Y".
       77  reinterpret_cast            PIC X VALUE "Z".
       77  try                         PIC X VALUE "a".
       77  bool                        PIC X VALUE "b".
       77  explicit                    PIC X VALUE "c".
      *77  new                         PIC X VALUE "d".
       77  static_cast                 PIC X VALUE "e".
       77  typeid                      PIC X VALUE "f".
       77  catch                       PIC X VALUE "g".
       77  operator                    PIC X VALUE "h".
       77  template                    PIC X VALUE "i".
       77  typename                    PIC X VALUE "j".
       77  friend                      PIC X VALUE "k".
       77  private                     PIC X VALUE "l".
       77  this                        PIC X VALUE "m".
       77  const_cast                  PIC X VALUE "n".
       77  inline                      PIC X VALUE "o".
       77  public                      PIC X VALUE "p".
       77  throw                       PIC X VALUE "q".
       77  virtual                     PIC X VALUE "r".
       77  mutable                     PIC X VALUE "s".
       77  protected                   PIC X VALUE "t".
       77  wchar_t                     PIC X VALUE "u".
      *
      * More Reserved Words in C++ (not essential)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  bitand                      PIC X VALUE "v".
       77  compl                       PIC X VALUE "w".
       77  not_eq                      PIC X VALUE "x".
       77  or_eq                       PIC X VALUE "y".
       77  xor_eq                      PIC X VALUE "z".
       77  and_eq                      PIC X VALUE "0".
       77  bitor                       PIC X VALUE "1".
       77  xor                         PIC X VALUE "2".
      *
       PROCEDURE        DIVISION.
           CALL "callee" USING   const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                 *>extern
                                 *>static
                                 union
                                 while
           END-CALL.
           CALL "callee2" USING  asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
      *                          new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
           END-CALL.
           MOVE x'00' TO         const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                 extern
                                 static
                                 union
                                 while
                                 asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
      *                          new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           STOP RUN.
])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE SECTION.
      *
      * Reserved Words in C (that aren't reserved in COBOL)
      * var names MUST BE IN LOWER CASE (!)
      *
       77  const                       PIC X.
       77  double                      PIC X.
       77  float                       PIC X.
       77  int                         PIC X.
       77  short                       PIC X.
       77  struct                      PIC X.
       77  break                       PIC X.
       77  long                        PIC X.
       77  switch                      PIC X.
       77  void                        PIC X.
       77  case                        PIC X.
       77  enum                        PIC X.
       77  goto                        PIC X.
       77  register                    PIC X.
       77  sizeof                      PIC X.
       77  volatile                    PIC X.
       77  char                        PIC X.
       77  do                          PIC X.
      *77  extern                      PIC X.
      *77  static                      PIC X.
       77  union                       PIC X.
       77  while                       PIC X.
       PROCEDURE        DIVISION USING
                                 const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                                *>extern
                                *>static
                                 union
                                 while
                                 .
           IF (const                       NOT = "A") OR
              (double                      NOT = "B") OR
              (float                       NOT = "C") OR
              (int                         NOT = "D") OR
              (short                       NOT = "E") OR
              (struct                      NOT = "F") OR
              (break                       NOT = "G") OR
              (long                        NOT = "H") OR
              (switch                      NOT = "I") OR
              (void                        NOT = "J") OR
              (case                        NOT = "K") OR
              (enum                        NOT = "L") OR
              (goto                        NOT = "M") OR
              (register                    NOT = "N") OR
              (sizeof                      NOT = "O") OR
              (volatile                    NOT = "P") OR
              (char                        NOT = "Q") OR
              (do                          NOT = "R") OR
            *>(extern                      NOT = "S") OR
            *>(static                      NOT = "T") OR
              (union                       NOT = "U") OR
              (while                       NOT = "V")
              DISPLAY "At least one var has wrong content!"
              END-DISPLAY
           END-IF.
           MOVE x'FF' TO         const
                                 double
                                 float
                                 int
                                 short
                                 struct
                                 break
                                 long
                                 switch
                                 void
                                 case
                                 enum
                                 goto
                                 register
                                 sizeof
                                 volatile
                                 char
                                 do
                               *>extern
                               *>static
                                 union
                                 while
                                 .
           EXIT PROGRAM.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       DATA             DIVISION.
       LINKAGE SECTION.
      *
      * More Reserved Words in C++
      * var names MUST BE IN LOWER CASE (!)
      *
       77  asm                         PIC X.
       77  dynamic_cast                PIC X.
       77  namespace                   PIC X.
       77  reinterpret_cast            PIC X.
       77  try                         PIC X.
       77  bool                        PIC X.
       77  explicit                    PIC X.
      *77  new                         PIC X.
       77  static_cast                 PIC X.
       77  typeid                      PIC X.
       77  catch                       PIC X.
       77  operator                    PIC X.
       77  template                    PIC X.
       77  typename                    PIC X.
       77  friend                      PIC X.
       77  private                     PIC X.
       77  this                        PIC X.
       77  const_cast                  PIC X.
       77  inline                      PIC X.
       77  public                      PIC X.
       77  throw                       PIC X.
       77  virtual                     PIC X.
       77  mutable                     PIC X.
       77  protected                   PIC X.
       77  wchar_t                     PIC X.
      *
      * More Reserved Words in C++ (not essential)
      *
       77  bitand                      PIC X.
       77  compl                       PIC X.
       77  not_eq                      PIC X.
       77  or_eq                       PIC X.
       77  xor_eq                      PIC X.
       77  and_eq                      PIC X.
       77  bitor                       PIC X.
       77  xor                         PIC X.
       PROCEDURE        DIVISION USING
                                 asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
      *                          new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           IF (asm                         NOT = "W") OR
              (dynamic_cast                NOT = "X") OR
              (namespace                   NOT = "Y") OR
              (reinterpret_cast            NOT = "Z") OR
              (try                         NOT = "a") OR
              (bool                        NOT = "b") OR
              (explicit                    NOT = "c") OR
      *       (new                         NOT = "d") OR
              (static_cast                 NOT = "e") OR
              (typeid                      NOT = "f") OR
              (catch                       NOT = "g") OR
              (operator                    NOT = "h") OR
              (template                    NOT = "i") OR
              (typename                    NOT = "j") OR
              (friend                      NOT = "k") OR
              (private                     NOT = "l") OR
              (this                        NOT = "m") OR
              (const_cast                  NOT = "n") OR
              (inline                      NOT = "o") OR
              (public                      NOT = "p") OR
              (throw                       NOT = "q") OR
              (virtual                     NOT = "r") OR
              (mutable                     NOT = "s") OR
              (protected                   NOT = "t") OR
              (wchar_t                     NOT = "u") OR
              (bitand                      NOT = "v") OR
              (compl                       NOT = "w") OR
              (not_eq                      NOT = "x") OR
              (or_eq                       NOT = "y") OR
              (xor_eq                      NOT = "z") OR
              (and_eq                      NOT = "0") OR
              (bitor                       NOT = "1") OR
              (xor                         NOT = "2")
              DISPLAY "At least one var has wrong content!"
              END-DISPLAY
           END-IF.
           MOVE x'FF' TO         asm
                                 dynamic_cast
                                 namespace
                                 reinterpret_cast
                                 try
                                 bool
                                 explicit
      *                          new
                                 static_cast
                                 typeid
                                 catch
                                 operator
                                 template
                                 typename
                                 friend
                                 private
                                 this
                                 const_cast
                                 inline
                                 public
                                 throw
                                 virtual
                                 mutable
                                 protected
                                 wchar_t
                                 bitand
                                 compl
                                 not_eq
                                 or_eq
                                 xor_eq
                                 and_eq
                                 bitor
                                 xor
                                 .
           EXIT PROGRAM.
])

AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile callee.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile callee2.cob], [0], [], [])
AT_CHECK([$COMPILE -fnot-reserved=double,float,new,volatile -o prog caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([ON EXCEPTION clause of DISPLAY])
AT_KEYWORDS([runmisc exceptions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       PROCEDURE DIVISION.
           DISPLAY "hello" AT COLUMN 500
               ON EXCEPTION
                   GOBACK RETURNING 0
               NOT ON EXCEPTION
                   GOBACK RETURNING 1
           END-DISPLAY
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([EC-SCREEN-LINE-NUMBER and -STARTING-COLUMN])
AT_KEYWORDS([runmisc exceptions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.

       DATA           DIVISION.
       SCREEN         SECTION.
       01  invalid-line.
           03  a      VALUE "a" LINE 99999999.
       01  invalid-col.
           03  c      VALUE "c" COLUMN 99999999.

       PROCEDURE      DIVISION.
           DISPLAY invalid-line END-DISPLAY
           IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-LINE-NUMBER"
               CONTINUE
           ELSE
               GOBACK RETURNING 1
           END-IF

           DISPLAY invalid-col END-DISPLAY
           IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-STARTING-COLUMN"
               CONTINUE
           ELSE
               GOBACK RETURNING 2
           END-IF

           GOBACK RETURNING 0
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([LINE/COLUMN 0 exceptions])
AT_KEYWORDS([LINE COLUMN runmisc exceptions extensions screen])

AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  zero-var PIC 9 VALUE 0.

       SCREEN SECTION.
       01  scr.
           03  VALUE "a".

       PROCEDURE DIVISION.
           DISPLAY scr AT LINE zero-var
           IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-LINE-NUMBER"
               GOBACK RETURNING 1
           END-IF

           DISPLAY scr AT COLUMN zero-var
           IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-STARTING-COLUMN"
               GOBACK RETURNING 2
           END-IF

           GOBACK RETURNING 0
           .
])

AT_CHECK([$COMPILE  -faccept-display-extensions=error prog.cob], [0], [], [])
AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])

AT_CLEANUP


AT_SETUP([SET LAST EXCEPTION TO OFF])
AT_KEYWORDS([runmisc exceptions EXCEPTION-STATUS EXCEPTION-LOCATION])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9.

       PROCEDURE DIVISION.
           COMPUTE x = 10
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           SET LAST EXCEPTION TO OFF
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[EC-SIZE-OVERFLOW
prog; ; 10
EC-SIZE-OVERFLOW
prog; ; 10


])
AT_CLEANUP


# PROCEDURE DIVISION RETURNING OMITTED
AT_SETUP([void PROCEDURE])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       PROCEDURE        DIVISION RETURNING OMITTED.
           MOVE 42 TO RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee" RETURNING OMITTED
           END-CALL.
           DISPLAY RETURN-CODE WITH NO ADVANCING
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [+000000000], [])

AT_CLEANUP


AT_SETUP([Figurative constants to numeric field])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  NUM9    PIC 9(6).
       PROCEDURE DIVISION.
           MOVE SPACES TO NUM9
           DISPLAY "NUM9 value SPACES is " NUM9 "." UPON SYSOUT
           MOVE LOW-VALUES TO NUM9
           IF NUM9 = LOW-VALUES
              DISPLAY "9(6) tests OK for LOW-VALUES" UPON SYSOUT
           ELSE
              DISPLAY "9(6) Does NOT test OK for LOW-VALUES"
                 UPON SYSOUT
              IF NUM9 = ZERO
                 DISPLAY "9(6) tests as ZERO instead of LOW-VALUES"
                    UPON SYSOUT
              END-IF
           END-IF.
           MOVE HIGH-VALUES TO NUM9
           IF NUM9 = HIGH-VALUES
              DISPLAY "9(6) tests OK for HIGH-VALUES" UPON SYSOUT
           ELSE
              DISPLAY "9(6) Does NOT test OK for HIGH-VALUES"
                 UPON SYSOUT
              IF NUM9 = ZERO  
                 DISPLAY "9(6) tests as ZERO instead of HIGH-VALUES"
                    UPON SYSOUT
              END-IF
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [],
[prog.cob:8: warning: source is non-numeric - substituting zero
prog.cob:10: warning: source is non-numeric - substituting zero
prog.cob:21: warning: source is non-numeric - substituting zero
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[NUM9 value SPACES is 000000.
9(6) Does NOT test OK for LOW-VALUES
9(6) tests as ZERO instead of LOW-VALUES
9(6) Does NOT test OK for HIGH-VALUES
9(6) tests as ZERO instead of HIGH-VALUES
], [])

AT_CHECK([$COMPILE -std=acu prog.cob -o aprog], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./aprog], [0],
[NUM9 value SPACES is       .
9(6) tests OK for LOW-VALUES
9(6) tests OK for HIGH-VALUES
], [])

AT_CLEANUP


AT_SETUP([MF FIGURATIVE to NUMERIC])
AT_KEYWORDS([MOVE])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  MYFLD        PIC 9(4) VALUE 96.
       01  BIGFLT       COMP-1 VALUE 543.12345E10.
       PROCEDURE        DIVISION.
       MAIN-1.
           DISPLAY "Initial value"
           PERFORM SHOW-IT.
           DISPLAY "MOVE BIGFLT"
           MOVE BIGFLT TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE SPACES"
           MOVE SPACES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE LOW-VALUES"
           MOVE LOW-VALUES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE HIGH-VALUES"
           MOVE HIGH-VALUES TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE QUOTE"
           MOVE QUOTE TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL *"
           MOVE ALL '*' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL 0"
           MOVE ALL '0' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL 'A1'"
           MOVE ALL 'A1' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE ALL '21'"
           MOVE ALL '21' TO MYFLD.
           PERFORM SHOW-IT.
           DISPLAY "MOVE HIGH-VALUES TO (1:)"
           MOVE HIGH-VALUES TO MYFLD (1:).
           PERFORM SHOW-IT.

           DISPLAY "MOVE HIGH-VALUES TO BIGFLT"
           MOVE HIGH-VALUES TO BIGFLT.
           PERFORM SHOW-BIG.
           DISPLAY "MOVE QUOTE TO BIGFLT"
           MOVE QUOTE TO BIGFLT.
           PERFORM SHOW-BIG.
           DISPLAY "MOVE ALL * TO BIGFLT"
           MOVE ALL '*' TO BIGFLT.
           PERFORM SHOW-BIG.
           DISPLAY "MOVE ALL '21' TO BIGFLT"
           MOVE ALL '21' TO BIGFLT.
           PERFORM SHOW-BIG.
           STOP RUN.
       SHOW-IT.
           CALL "dump" USING MYFLD.
       SHOW-BIG.
           DISPLAY "BIGFLT is " BIGFLT.
           CALL "dump" USING BIGFLT.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <libcob.h>

COB_EXT_EXPORT int
dump (unsigned char *data)
{
  int i;
  for (i = 0; i < 4; i++)
    printf ("%02X", data[i]);
  puts (" .");
  return 0;
}
]])

AT_CHECK([$COMPILE -std=mf -fno-move-non-numeric-lit-to-numeric-is-zero prog.cob cmod.c], [0], [],
[prog.cob: in paragraph 'MAIN-1':
prog.cob:28: warning: numeric value is expected
prog.cob:6: warning: 'MYFLD' defined here as PIC 9(4)
prog.cob:34: warning: numeric value is expected
prog.cob:6: warning: 'MYFLD' defined here as PIC 9(4)
prog.cob:50: warning: numeric value is expected
prog.cob:7: warning: 'BIGFLT' defined here as USAGE FLOAT
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Initial value
30303936 .
MOVE BIGFLT
38333034 .
MOVE SPACES
20202020 .
MOVE LOW-VALUES
00000000 .
MOVE HIGH-VALUES
FFFFFFFF .
MOVE QUOTE
22222222 .
MOVE ALL *
2A2A2A2A .
MOVE ALL 0
30303030 .
MOVE ALL 'A1'
41314131 .
MOVE ALL '21'
32313231 .
MOVE HIGH-VALUES TO (1:)
FFFFFFFF .
MOVE HIGH-VALUES TO BIGFLT
BIGFLT is NaN
FFFFFFFF .
MOVE QUOTE TO BIGFLT
BIGFLT is 2.1973164E-18
22222222 .
MOVE ALL * TO BIGFLT
BIGFLT is 5.4312347E+12
DA119E54 .
MOVE ALL '21' TO BIGFLT
BIGFLT is 2.1212121E+37
E5547F7D .
], [])

AT_CLEANUP


# PROCEDURE DIVISION RETURNING OMITTED, CALL RETURNING NOTHING
AT_SETUP([void PROCEDURE, NOTHING return])
AT_KEYWORDS([runmisc])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       PROCEDURE        DIVISION RETURNING OMITTED.
           MOVE 42 TO RETURN-CODE
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           MOVE 42 TO RETURN-CODE
           CALL "callee" RETURNING NOTHING
           END-CALL.
           DISPLAY RETURN-CODE WITH NO ADVANCING
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./caller], [42], [+000000042], [])

AT_CLEANUP


# Checks both -ftrace(all), which needs to be manually set
# and    -fsource-location, which is implied by -debug/g
AT_SETUP([READY TRACE / RESET TRACE])
AT_KEYWORDS([runmisc -ftrace -ftraceall -fsource-location
COB_PHYSICAL_CANCEL COB_PRE_LOAD physical_cancel pre_load])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
      *
       PROCEDURE        DIVISION.
           READY TRACE
           MOVE 1 TO RETURN-CODE
           RESET TRACE
           CALL "callee1"
           END-CALL
           READY TRACE
           MOVE 2 TO RETURN-CODE
           CALL "callee1"
           END-CALL
           CALL "callee1"
           END-CALL
           CANCEL "callee1"
           MOVE 0 TO RETURN-CODE
           STOP RUN.
])

AT_DATA([callee1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee1.
       PROCEDURE        DIVISION.
           ADD 1 TO RETURN-CODE
             NOT ON SIZE ERROR
               IF RETURN-CODE = 1
                 CONTINUE
               ELSE IF RETURN-CODE = 2
                 CONTINUE
               ELSE
                 CONTINUE
           .
           EVALUATE RETURN-CODE
           WHEN 1
             CONTINUE
           WHEN 2
           WHEN 3
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE
           EVALUATE TRUE
           WHEN RETURN-CODE = 1
             CONTINUE
           WHEN RETURN-CODE = 2
           WHEN RETURN-CODE = 3
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE
           CALL "callee2"  END-CALL
           CANCEL "callee2"  CALL "callee2b" END-CALL  CANCEL "callee2b"
           SUBTRACT 1 FROM RETURN-CODE END-SUBTRACT
           EXIT PROGRAM.
])

AT_DATA([callee2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2.
       PROCEDURE        DIVISION.
           COMPUTE RETURN-CODE
                 = 1 + 1
              ON SIZE ERROR
                 MOVE -1 TO RETURN-CODE
              NOT ON SIZE ERROR
                 COMPUTE RETURN-CODE
                       = 1 + 1
                 END-COMPUTE
           END-COMPUTE.
           CALL "callee2c" END-CALL
           CANCEL "callee2c"
           MOVE 0 TO RETURN-CODE.
           EXIT PROGRAM.
])

AT_DATA([preload.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2b.
       PROCEDURE        DIVISION.
       SOME-SEC SECTION.
       SOME-PAR.
           PERFORM OTHER-SEC
           MOVE 0 TO RETURN-CODE.
       ENTRY "LEAVE-ME".  
       END-PAR.
           EXIT PROGRAM.
       OTHER-SEC SECTION.
           COMPUTE RETURN-CODE = 1 + 2 END-COMPUTE.
       EX. EXIT.
])

AT_DATA([callee2c.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee2c.
       PROCEDURE        DIVISION.
       SOME-SEC SECTION.
       SOME-PAR.
           PERFORM OTHER-SEC
           MOVE 0 TO RETURN-CODE.
       END-PAR.
           EXIT PROGRAM.
       OTHER-SEC SECTION.
           COMPUTE RETURN-CODE = 1 + 2 END-COMPUTE.
       EX. EXIT.
])

AT_CHECK([COB_OLD_TRACE=y \
$COBC -ftraceall callee1.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC callee2.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -ftrace preload.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -fsource-location callee2c.cob], [0], [], [])
AT_CHECK([COB_OLD_TRACE=y \
$COBC -x -o prog -ftraceall caller.cob], [0], [], [])
AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD=preload ./prog], [0], [],
[Source :    'caller.cob'
Program-Id: caller           Statement: MOVE                   Line: 7
Program-Id: caller           Statement: RESET TRACE            Line: 8
Program-Id: caller           Statement: MOVE                   Line: 12
Program-Id: caller           Statement: CALL                   Line: 13
Source:     'callee1.cob'
Program-Id: callee1          Entry:     callee1                Line: 4
Program-Id: callee1          Section:   (None)                 Line: 5
Program-Id: callee1          Paragraph: (None)                 Line: 5
Program-Id: callee1          Statement: ADD                    Line: 5
Program-Id: callee1          Statement: IF                     Line: 7
Program-Id: callee1          Statement: IF                     Line: 9
Program-Id: callee1          Statement: CONTINUE               Line: 12
Program-Id: callee1          Statement: EVALUATE               Line: 14
Program-Id: callee1          Statement: WHEN                   Line: 15
Program-Id: callee1          Statement: CONTINUE               Line: 21
Program-Id: callee1          Statement: EVALUATE               Line: 23
Program-Id: callee1          Statement: WHEN                   Line: 24
Program-Id: callee1          Statement: WHEN                   Line: 27
Program-Id: callee1          Statement: CONTINUE               Line: 30
Program-Id: callee1          Statement: CALL                   Line: 32
Source :    'callee2c.cob'
Program-Id: callee2c         Statement: PERFORM                Line: 7
Program-Id: callee2c         Statement: COMPUTE                Line: 12
Program-Id: callee2c         Statement: EXIT                   Line: 13
Program-Id: callee2c         Statement: MOVE                   Line: 8
Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: CALL                   Line: 33
Source:     'preload.cob'
Program-Id: callee2b         Entry:     callee2b               Line: 4
Program-Id: callee2b         Section:   SOME-SEC               Line: 5
Program-Id: callee2b         Paragraph: SOME-PAR               Line: 6
Program-Id: callee2b         Section:   OTHER-SEC              Line: 12
Program-Id: callee2b         Paragraph: (None)                 Line: 12
Program-Id: callee2b         Paragraph: EX                     Line: 14
Program-Id: callee2b         Entry:     LEAVE-ME               Line: 9
Program-Id: callee2b         Paragraph: END-PAR                Line: 10
Program-Id: callee2b         Exit:      callee2b
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: SUBTRACT               Line: 34
Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
Program-Id: callee1          Exit:      callee1
Source :    'caller.cob'
Program-Id: caller           Statement: CALL                   Line: 15
Source:     'callee1.cob'
Program-Id: callee1          Entry:     callee1                Line: 4
Program-Id: callee1          Section:   (None)                 Line: 5
Program-Id: callee1          Paragraph: (None)                 Line: 5
Program-Id: callee1          Statement: ADD                    Line: 5
Program-Id: callee1          Statement: IF                     Line: 7
Program-Id: callee1          Statement: IF                     Line: 9
Program-Id: callee1          Statement: CONTINUE               Line: 12
Program-Id: callee1          Statement: EVALUATE               Line: 14
Program-Id: callee1          Statement: WHEN                   Line: 15
Program-Id: callee1          Statement: CONTINUE               Line: 21
Program-Id: callee1          Statement: EVALUATE               Line: 23
Program-Id: callee1          Statement: WHEN                   Line: 24
Program-Id: callee1          Statement: WHEN                   Line: 27
Program-Id: callee1          Statement: CONTINUE               Line: 30
Program-Id: callee1          Statement: CALL                   Line: 32
Source :    'callee2c.cob'
Program-Id: callee2c         Statement: PERFORM                Line: 7
Program-Id: callee2c         Statement: COMPUTE                Line: 12
Program-Id: callee2c         Statement: EXIT                   Line: 13
Program-Id: callee2c         Statement: MOVE                   Line: 8
Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: CALL                   Line: 33
Source:     'preload.cob'
Program-Id: callee2b         Entry:     callee2b               Line: 4
Program-Id: callee2b         Section:   SOME-SEC               Line: 5
Program-Id: callee2b         Paragraph: SOME-PAR               Line: 6
Program-Id: callee2b         Section:   OTHER-SEC              Line: 12
Program-Id: callee2b         Paragraph: (None)                 Line: 12
Program-Id: callee2b         Paragraph: EX                     Line: 14
Program-Id: callee2b         Entry:     LEAVE-ME               Line: 9
Program-Id: callee2b         Paragraph: END-PAR                Line: 10
Program-Id: callee2b         Exit:      callee2b
Source :    'callee1.cob'
Program-Id: callee1          Statement: CANCEL                 Line: 33
Program-Id: callee1          Statement: SUBTRACT               Line: 34
Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
Program-Id: callee1          Exit:      callee1
Source :    'caller.cob'
Program-Id: caller           Statement: CANCEL                 Line: 17
Program-Id: caller           Statement: MOVE                   Line: 18
Program-Id: caller           Statement: STOP RUN               Line: 19
])

AT_CHECK([$COBC -ftraceall callee1.cob], [0], [], [])
AT_CHECK([$COBC callee2.cob], [0], [], [])
AT_CHECK([$COBC -ftrace preload.cob], [0], [], [])
AT_CHECK([$COBC -fsource-location callee2c.cob], [0], [], [])
AT_CHECK([$COBC -x -o prog -ftraceall caller.cob], [0], [], [])
AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD=preload ./prog], [0], [],
[Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      MOVE                            Line:      7
Program-Id:  caller                      RESET TRACE                     Line:      8
Program-Id:  caller                      MOVE                            Line:     12
Program-Id:  caller                      CALL                            Line:     13
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1              Entry: callee1                         Line:      4
Program-Id:  callee1                     ADD                             Line:      5
Program-Id:  callee1                     IF                              Line:      7
Program-Id:  callee1                     IF                              Line:      9
Program-Id:  callee1                     CONTINUE                        Line:     12
Program-Id:  callee1                     EVALUATE                        Line:     14
Program-Id:  callee1                     WHEN                            Line:     15
Program-Id:  callee1                     CONTINUE                        Line:     21
Program-Id:  callee1                     EVALUATE                        Line:     23
Program-Id:  callee1                     WHEN                            Line:     24
Program-Id:  callee1                     WHEN                            Line:     27
Program-Id:  callee1                     CONTINUE                        Line:     30
Program-Id:  callee1                     CALL                            Line:     32
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     CALL                            Line:     33
Source: 'preload.cob'
Program-Id:  callee2b
Program-Id:  callee2b             Entry: callee2b                        Line:      4
Program-Id:  callee2b           Section: SOME-SEC                        Line:      5
Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:      6
Program-Id:  callee2b           Section: OTHER-SEC                       Line:     12
Program-Id:  callee2b         Paragraph: EX                              Line:     14
Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     14
Program-Id:  callee2b         Paragraph: END-PAR                         Line:     10
Program-Id:  callee2b              Exit: callee2b                        Line:     10
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     SUBTRACT                        Line:     34
Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
Program-Id:  callee1               Exit: callee1                         Line:     35
Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      CALL                            Line:     15
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1              Entry: callee1                         Line:      4
Program-Id:  callee1                     ADD                             Line:      5
Program-Id:  callee1                     IF                              Line:      7
Program-Id:  callee1                     IF                              Line:      9
Program-Id:  callee1                     CONTINUE                        Line:     12
Program-Id:  callee1                     EVALUATE                        Line:     14
Program-Id:  callee1                     WHEN                            Line:     15
Program-Id:  callee1                     CONTINUE                        Line:     21
Program-Id:  callee1                     EVALUATE                        Line:     23
Program-Id:  callee1                     WHEN                            Line:     24
Program-Id:  callee1                     WHEN                            Line:     27
Program-Id:  callee1                     CONTINUE                        Line:     30
Program-Id:  callee1                     CALL                            Line:     32
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     CALL                            Line:     33
Source: 'preload.cob'
Program-Id:  callee2b
Program-Id:  callee2b             Entry: callee2b                        Line:      4
Program-Id:  callee2b           Section: SOME-SEC                        Line:      5
Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:      6
Program-Id:  callee2b           Section: OTHER-SEC                       Line:     12
Program-Id:  callee2b         Paragraph: EX                              Line:     14
Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     14
Program-Id:  callee2b         Paragraph: END-PAR                         Line:     10
Program-Id:  callee2b              Exit: callee2b                        Line:     10
Source: 'callee1.cob'
Program-Id:  callee1
Program-Id:  callee1                     CANCEL                          Line:     33
Program-Id:  callee1                     SUBTRACT                        Line:     34
Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
Program-Id:  callee1               Exit: callee1                         Line:     35
Source: 'caller.cob'
Program-Id:  caller
Program-Id:  caller                      CANCEL                          Line:     17
Program-Id:  caller                      MOVE                            Line:     18
Program-Id:  caller                      STOP RUN                        Line:     19
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 4
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 21
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 7
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 17
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 7
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 13
libcob: warning: cob_put_s64_param: attempt to over-write constant param 1 with 7
])

AT_CLEANUP


AT_SETUP([Trace feature with subroutine])
AT_KEYWORDS([Trace])

# FIXME: check if the one above is enough and either
#        remove this test or exchange by a non-IDX version
AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])

AT_DATA([callsub.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. callsub.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A     PIC 9(3) VALUE 399.
       01 NUM-B     PIC 9(3) VALUE 211.
       01 RSLT      PIC 9(5)V99.

       LINKAGE SECTION.
       01  n PIC 99.

       PROCEDURE DIVISION USING n.
       MAIN-10.
           ADD 1 TO n.
           COMPUTE RSLT = ((NUM-A / (100.55 + -0.550))
                         -  (NUM-B / (10.11 * 10 - 1.1)))
                             * (220 / 2.2) * n.
       END PROGRAM callsub.
])

AT_CHECK([$COMPILE_MODULE callsub.cob], [0], [], [])



AT_CAPTURE_FILE(./tstdump.txt)

AT_DATA([reference], [Module dump due to Signal SIGSEGV
 Last statement of sub1 was Line 3 of cpyabrt
 Last statement of prog was Line 116 of prog.cob

Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS

WORKING-STORAGE
**********************
01        ZRO                             000000000
01        HEXV                            013
01        IDX                             000000000
01        TSTREC.                       
  05      TSTDEP                         'XXX'
  05      TSTX.                         
       15 TSTG-1 (1)                      01
       15 TSTX-2 (1,1)                   'A'
       15 TSTX-2 (1,2)                   'XX'
       15 TSTX-2 (1,3)                   ALL SPACES
       15 TSTX-2 (1,4)                   'xx'
       15 TSTG-1 (2)                      02
       15 TSTX-2 (2,1)                   'B'
       15 TSTX-2 (2,2)                   'XX'
       15 TSTX-2 (2,3)                   ALL LOW-VALUES
       15 TSTX-2 (2,4)                   'yy'
       15 TSTG-1 (3)                      03
       15 TSTX-2 (3,1)                   'C'
       15 TSTX-2 (3,2)                   'XX'
       15 TSTX-2 (3,3)                   ALL HIGH-VALUES
       15 TSTX-2 (3,4)                   'zz'
       15 TSTG-1 (4)                     ALL HIGH-VALUES
       15 TSTX-2 (4,1)                   ALL HIGH-VALUES
       15 TSTX-2 (4,2)                   ALL HIGH-VALUES
       15 TSTX-2 (4,3)                   ALL HIGH-VALUES
       15 TSTX-2 (4,4)                   ALL HIGH-VALUES
  05      TSTTAIL1                        X  
                                     1 x 5811
  05      TSTCOMP3                        58585
  05      TSTLONG                        'Quick brown fox jumped over the dog              Quick br'
                                         'own fox jumped over the dog'
  05      TSTHEX                          Q u i c  k e r    g r e y    f o x    j u m  p e d   
                                     1 x 51756963 6B657220 67726579 20666F78 206A756D 70656420 
                                          t h e    c o u g  a r   X  X X   X  X X X X  X X   X 
                                    25 x 74686520 636F7567 61722058 58581158 58585858 58580758 
                                          X X X X  X X X X  X X   X  X X X X  X X X X  X X X X 
                                    49 x 58585858 58585858 58580D58 58585858 58585858 58585858 
                                          X X X X  X X X X  X X X X  X X X X  X X X X  X X X X 
                                    73 x 58585858 58585858 58585858 58585858 58585858 58585858 
                                          X X X X
                                    97 x 58585858
  05      TSTHEX2                        XXXXXXXXX\0XXXXXXXXXXXXXXXXXXXXX\\XXXXXX\0XXXXXXX\tXXXXXX
                                    54 : AXXXX\rX
  05      TSTTAILX                       'Quick brown fox jumped over the dog     '
                                  trailing LOW-VALUES

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.                   <NULL> address

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

FD FLATFILE
**********************
   File is OPEN
   FILE STATUS  '00'
01        TSPFL-RECORD.                 
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010

WORKING-STORAGE
**********************
77        MAX-SUB                         0006
77        CUST-STAT                      '00'
77        REC-NUM                         0001
01        BIN                             000000001
01        TEST-DATA.                    
 02       DATA-CUST-NUM-TBL.            
  05      FILLER                         'ALP00000'
  05      FILLER                         'BET00000'
  05      FILLER                         'DEL00000'
  05      FILLER                         'EPS00000'
  05      FILLER                         'FOR00000'
  05      FILLER                         'GAM00000'
 02       DATA-COMPANY-TBL.             
  05      FILLER                         'ALPHA ELECTRICAL CO. LTD.'
  05      FILLER                         'BETA SHOE MFG. INC.'
  05      FILLER                         'DELTA LUGGAGE REPAIRS'
  05      FILLER                         'EPSILON EQUIPMENT SUPPLY'
  05      FILLER                         'FORTUNE COOKIE COMPANY'
  05      FILLER                         'GAMMA X-RAY TECHNOLOGY'
 02       DATA-ADDRESS-2-TBL.           
  05      FILLER                         'ATLANTA'
  05      FILLER                         'CALGARY'
  05      FILLER                         'NEW YORK'
  05      FILLER                         'TORONTO'
  05      FILLER                         'WASHINGTON'
  05      FILLER                         'WHITEPLAIN'
 02       DATA-NO-TERMINALS-TBL.        
  05      FILLER                          010
  05      FILLER                          013
  05      FILLER                          075
  05      FILLER                          010
  05      FILLER                          090
  05      FILLER                          254
01        WORK-AREA.                    
  05      SUB                             0007

])

AT_CHECK([gcdiff reference tstdump.txt], [0], [], [])

AT_CLEANUP

AT_SETUP([Trace feature])
AT_KEYWORDS([Trace])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL TSPFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS CM-CUST-NUM
           ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT TSTFILE
           ASSIGN TO "testisam"
           ORGANIZATION INDEXED ACCESS DYNAMIC
           RECORD KEY IS TS-CUST-NUM
           ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
           ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
           FILE STATUS IS CUST-STAT.

           SELECT FLATFILE
           ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  TSPFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           05  TSPFL-REC.
           10  CM-CUST-NUM.
             15  CM-CUST-PRE                   PICTURE X(3).
             15  CM-CUST-NNN                   PICTURE X(5).
           10  CM-STATUS                       PICTURE X.
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-ADDRESS-1                    PICTURE X(25).
           10  CM-ADDRESS-2                    PICTURE X(25).
           10  CM-ADDRESS-3                    PICTURE X(25).
           10  CM-TELEPHONE                    PICTURE 9(10).
           10  CM-DP-MGR                       PICTURE X(25).
           10  CM-MACHINE                      PICTURE X(8).
           10  CM-MEMORY                       PICTURE X(4).
           10  CM-DISK                         PICTURE X(8).
           10  CM-TAPE                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(5).

       FD  TSTFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSTFL-RECORD.
           05  TSTFL-REC.
           10  TS-CUST-NUM                     PICTURE X(8).
           10  TS-STATUS                       PICTURE X.
           10  TS-COMPANY                      PICTURE X(25).
           10  TS-ADDRESS-1                    PICTURE X(25).
           10  TS-ADDRESS-2                    PICTURE X(25).
           10  TS-ADDRESS-3                    PICTURE X(25).
           10  TS-TELEPHONE                    PICTURE 9(10).
           10  TS-DP-MGR                       PICTURE X(25).
           10  TS-MACHINE                      PICTURE X(8).
           10  TS-MEMORY                       PICTURE X(4).
           10  TS-DISK                         PICTURE X(8).
           10  TS-TAPE                         PICTURE X(8).

       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8).
           10  C2-COMPANY                      PICTURE X(25).
           10  C2-DISK                         PICTURE X(8).
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4.
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       01  TSP2-RECORD.
           10  C2-CUST-NUM                     PICTURE X(8). 
           10  C2-COMPANY                      PICTURE X(25). 
           10  C2-DISK                         PICTURE X(8). 
           10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4. 
           10  C2-PK-DATE                      PICTURE S9(14) COMP-3.

       WORKING-STORAGE SECTION.

       01  CUST-STAT.
           05  FILLER PICTURE XX.
       77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
       77  CALL-NUM          VALUE  00         PICTURE 99.

       01  TEST-DATA.

         02  DATA-CUST-NUM-TBL.

           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "GAM00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GIB00000".
           05  FILLER PIC X(8) VALUE "H&J00000".
           05  FILLER PIC X(8) VALUE "INC00000".
           05  FILLER PIC X(8) VALUE "JOH00000".
           05  FILLER PIC X(8) VALUE "KON00000".
           05  FILLER PIC X(8) VALUE "LEW00000".
           05  FILLER PIC X(8) VALUE "MOR00000".
           05  FILLER PIC X(8) VALUE "NEW00000".
           05  FILLER PIC X(8) VALUE "OLD00000".
           05  FILLER PIC X(8) VALUE "PRE00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-COMPANY-TBL.

           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
           05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
           05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
           05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
           05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
           05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
           05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
           05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
           05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
           05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".

         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-1-TBL.

           05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
           05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
           05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
           05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
           05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
           05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
           05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
           05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
           05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
           05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
           05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
           05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
           05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
           05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
           05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
           05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".

         02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
                                       PIC X(25) OCCURS 16.
         02  DATA-ADDRESS-2-TBL.

           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "SAN DIEGO ".
           05  FILLER PIC X(10) VALUE "LOS RIOS  ".
           05  FILLER PIC X(10) VALUE "MADISON   ".
           05  FILLER PIC X(10) VALUE "WILBUR    ".
           05  FILLER PIC X(10) VALUE "TOPEKA    ".
           05  FILLER PIC X(10) VALUE "SEATTLE   ".
           05  FILLER PIC X(10) VALUE "NEW JERSEY".
           05  FILLER PIC X(10) VALUE "FORT WAYNE".
           05  FILLER PIC X(10) VALUE "COLUMBUS  ".
           05  FILLER PIC X(10) VALUE "RICHMOND  ".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".

         02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-ADDRESS-3-TBL.

           05  FILLER PIC X(10) VALUE "N.Y.      ".
           05  FILLER PIC X(10) VALUE "GEORGIA   ".
           05  FILLER PIC X(10) VALUE "D.C.      ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CANADA    ".
           05  FILLER PIC X(10) VALUE "CALIFORNIA".
           05  FILLER PIC X(10) VALUE "NEW MEXICO".
           05  FILLER PIC X(10) VALUE "WISCONSIN ".
           05  FILLER PIC X(10) VALUE "DELAWARE  ".
           05  FILLER PIC X(10) VALUE "KANSAS    ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "N.J.      ".
           05  FILLER PIC X(10) VALUE "COLORADO  ".
           05  FILLER PIC X(10) VALUE "OHIO      ".
           05  FILLER PIC X(10) VALUE "VIRGINIA  ".
           05  FILLER PIC X(10) VALUE "N.Y.      ".

         02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
                                       PIC X(10) OCCURS 16.
         02  DATA-TELEPHONE-TBL.

           05  FILLER PIC 9(10) VALUE 3131234432.
           05  FILLER PIC 9(10) VALUE 4082938498.
           05  FILLER PIC 9(10) VALUE 8372487274.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 5292398745.
           05  FILLER PIC 9(10) VALUE 8009329492.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 6546456333.
           05  FILLER PIC 9(10) VALUE 3455445444.
           05  FILLER PIC 9(10) VALUE 6456445643.
           05  FILLER PIC 9(10) VALUE 7456434355.
           05  FILLER PIC 9(10) VALUE 6554456433.
           05  FILLER PIC 9(10) VALUE 4169898509.
           05  FILLER PIC 9(10) VALUE 7534587453.
           05  FILLER PIC 9(10) VALUE 8787458374.
           05  FILLER PIC 9(10) VALUE 4169898509.

         02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
                                       PIC 9(10) OCCURS 16.
         02  DATA-DP-MGR-TBL.

           05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
           05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
           05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
           05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
           05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
           05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
           05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
           05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
           05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
           05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
           05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
           05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
           05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
           05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
           05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
           05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".

         02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
                                       PIC X(20) OCCURS 16.
         02  DATA-MACHINE-TBL.

           05  FILLER PIC X(8) VALUE "UNI-9030".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-80/3".
           05  FILLER PIC X(8) VALUE "UNI-80/5".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/6".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-80/8".
           05  FILLER PIC X(8) VALUE "UNI-9040".
           05  FILLER PIC X(8) VALUE "UNI-9040".

         02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
                                       PIC X(8) OCCURS 16.
         02  DATA-NO-TERMINALS-TBL.

           05  FILLER PIC 9(3) COMP-3 VALUE 85.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 45.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 107.
           05  FILLER PIC 9(3) COMP-3 VALUE 67.
           05  FILLER PIC 9(3) COMP-3 VALUE 32.
           05  FILLER PIC 9(3) COMP-3 VALUE 16.
           05  FILLER PIC 9(3) COMP-3 VALUE 34.
           05  FILLER PIC 9(3) COMP-3 VALUE 128.
           05  FILLER PIC 9(3) COMP-3 VALUE 64.
           05  FILLER PIC 9(3) COMP-3 VALUE 110.
           05  FILLER PIC 9(3) COMP-3 VALUE 324.
           05  FILLER PIC 9(3) COMP-3 VALUE 124.
           05  FILLER PIC 9(3) COMP-3 VALUE 86.

         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 16.

       01  WORK-AREA.
           05  REC-NUM                         PICTURE 9(6) VALUE 0.
           05  REC-MAX                         PICTURE 9(6) VALUE 10.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.

           05  TSPFL-KEY                       PICTURE X(8).

       PROCEDURE DIVISION.

       MAINFILE.
           OPEN OUTPUT TSPFILE
           CLOSE TSPFILE.

           OPEN I-O TSPFILE
           MOVE '99' TO CUST-STAT
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "10"
               DISPLAY "Error " CUST-STAT " on read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE LOW-VALUES                     TO TSPFL-RECORD.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " starting empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "46"
               DISPLAY "Error " CUST-STAT " start/read of empty file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           DISPLAY "OK: Operations on empty file"
           CLOSE TSPFILE.

           PERFORM LOADFILE.
           PERFORM LISTFILE.
           OPEN INPUT TSTFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "Expected ERROR " CUST-STAT
                       " opening TSTFILE, Record size different"
                       UPON CONSOLE
           ELSE
               DISPLAY "Un-Expected open TSTFILE, Record size different"
                       UPON CONSOLE
               CLOSE TSTFILE
           END-IF.
           PERFORM LOADFLAT.
           STOP RUN.

       LOADFILE.
           DISPLAY "Loading sample data file."
                            UPON CONSOLE.

           OPEN OUTPUT TSPFILE
           IF NOT (CUST-STAT = "00" or "05") *> the file may exist
               DISPLAY "Error " CUST-STAT
               " opening 'testisam' file" UPON CONSOLE
               STOP RUN
           END-IF.

           PERFORM 1000-LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           DISPLAY "Sample data file load complete."
                            UPON CONSOLE.
           CLOSE TSPFILE.

      *---------------------------------------------------------------*
      *         LOAD A RECORD FROM DATA TABLES                        *
      *---------------------------------------------------------------*

       1000-LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE CM-CUST-NUM                  TO TSPFL-KEY.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
           MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
           MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
           MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
           MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
           MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.

           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
               MOVE "1600 BPI"               TO CM-TAPE
               MOVE "1MEG"                   TO CM-MEMORY
           ELSE
               MOVE "8470"                   TO CM-DISK
               MOVE "6250 BPI"               TO CM-TAPE
               MOVE "3MEG"                   TO CM-MEMORY.

           WRITE TSPFL-RECORD.
           IF CUST-STAT NOT = "00"
           AND CUST-STAT NOT = "02"
               DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
                                 UPON CONSOLE.

       LISTFILE.
           DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
           OPEN INPUT TSTFILE
           MOVE SPACES                       TO TSTFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
           READ  TSTFILE NEXT RECORD
           READ  TSTFILE NEXT RECORD
           CLOSE TSTFILE.

           MOVE ZERO TO REC-NUM
           OPEN INPUT TSPFILE
           IF CUST-STAT NOT = "00"
               DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
                                             UPON CONSOLE
               STOP RUN
           END-IF.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "PRE00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
           READ  TSPFILE NEXT RECORD
           READ  TSPFILE NEXT RECORD

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE "DEL00000" TO CM-CUST-NUM.
           START TSPFILE KEY GREATER THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE NEXT RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               CALL "callsub" USING CALL-NUM
               READ TSPFILE NEXT RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM
           IF CUST-STAT = "99"
               DISPLAY "Hit End of File: " CALL-NUM UPON CONSOLE
           ELSE
               DISPLAY "Stop read after: " CALL-NUM UPON CONSOLE
           END-IF.

           DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
           MOVE ZERO TO REC-NUM
           START TSPFILE KEY LESS THAN CM-CUST-NUM
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " starting file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
           IF CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on 1st read of file"
                                UPON CONSOLE
               STOP RUN
           END-IF.
           PERFORM UNTIL CUST-STAT NOT = "00"
                      OR REC-NUM > REC-MAX
               DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
               READ TSPFILE PREVIOUS RECORD
                    AT END
                        MOVE "99" TO CUST-STAT
                END-READ
                ADD 1 TO REC-NUM
           END-PERFORM.

           CLOSE TSPFILE.

           OPEN I-O TSPFILE.
           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE 'X'                          TO CM-CUST-NUM (5:1).
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "23"
               DISPLAY "Error " CUST-STAT " instead of 23."
                                UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on primary read ."
                                UPON CONSOLE
           ELSE
               DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           READ TSPFILE NEXT RECORD
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " on next read"
                                UPON CONSOLE
           ELSE
               DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
                        " Disk=" CM-DISK "."
                         UPON CONSOLE
           END-IF.
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           READ TSPFILE KEY IS CM-TELEPHONE
           IF  CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 23"
                                UPON CONSOLE
           ELSE
               DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
                        " Mach=" CM-MACHINE "."
                         UPON CONSOLE
           END-IF.
           WRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "22"
               DISPLAY "Error " CUST-STAT " instead of 22"
                                UPON CONSOLE
           ELSE
               DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           ADD 5 TO CM-NO-TERMINALS
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE

               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                       CUST-STAT " as expected "
                       CM-NO-TERMINALS " terminals"
                       UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           DISPLAY "   Read: " CM-CUST-NUM " got "
                         CUST-STAT " as expected "
                         CM-NO-TERMINALS " terminals"
                         UPON CONSOLE.
           MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
           READ TSPFILE KEY IS CM-CUST-NUM
           MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
           MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
           REWRITE TSPFL-RECORD
           IF  CUST-STAT NOT = "02"
           AND CUST-STAT NOT = "00"
               DISPLAY "Error " CUST-STAT " instead of 00/02"
                                UPON CONSOLE
           ELSE
               DISPLAY "ReWrite: " CM-CUST-NUM " got 00/02"
                         " as expected"
                         UPON CONSOLE
           END-IF.
           DELETE TSPFILE.
           CLOSE TSPFILE.

       LOADFLAT.
           OPEN OUTPUT FLATFILE.
           PERFORM FLAT-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB
                             OR SUB > 5.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           MOVE 3 TO REC-NUM
           READ FLATFILE
           MOVE 999 TO REC-NUM
           READ FLATFILE
           CLOSE FLATFILE.

       FLAT-RECORD.

           MOVE SPACES                       TO TSP2-RECORD.
           MOVE SUB                          TO REC-NUM.
           MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
           MOVE 20070319                     TO C2-PK-DATE.
           IF  ODD-RECORD
               MOVE "8417"                   TO C2-DISK
           ELSE
               MOVE "8470"                   TO C2-DISK.
           WRITE TSP2-RECORD.
])

AT_DATA([cmod.c], [[
/******************************************************************************
*     2017, Ron Norman                                                        *
*  Source for a Micro Focus COBOL External File Handler.                      *
*                                                                             *
* For GnuCOBOL add  -fcallfh=TSTFH              as a compile option           *
*                                                                             *
* This is a sample module for GnuCOBOL, but it does not do very much          *
******************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <libcob.h>

#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif
#define MIN(a,b) (a < b ? a : b)

static char *txtOpCode(int opCode);

/*************************************************************************
   Replace filename with environment variable value, then open the file
   This is required as MF Cobol seems to have pre-read the ENV Variables 
*************************************************************************/
static int
doOpenFile(
   unsigned char  *opCodep, 
   FCD3  *fcd,
   char  *opmsg) 
{
   int      sts,oldlen,j,k;
   char  *oldFptr,*env,wrk[64];
   unsigned char  svOther;
   unsigned int   opCode;

   oldFptr = fcd->fnamePtr;            /* Save values */
   oldlen  = LDCOMPX2(fcd->fnameLen); 
   fcd->otherFlags &= ~OTH_DOLSREAD;
   svOther = fcd->otherFlags;

   return EXTFH( opCodep, fcd );          /* No DD_, so use normal MF File Open */
}

/*********************************************************
 *  TSTFH - External File Handler entry point.
*********************************************************/
int   
TSTFH( unsigned char *opCodep, FCD3 *fcd) 
{
   unsigned int   opCode;
   char  *fname;
   int      sts, ky, j, k;

   if(*opCodep == 0xfa)
      opCode = 0xfa00 + opCodep[1];
   else
      opCode = opCodep[1];

   if(fcd->fileOrg == ORG_LINE_SEQ
   || fcd->fileOrg == ORG_SEQ
   || fcd->fileOrg == ORG_INDEXED
   || fcd->fileOrg == ORG_RELATIVE) {
      switch (opCode) {
      case OP_OPEN_OUTPUT:
      case OP_OPEN_IO:
      case OP_OPEN_EXTEND:
      case OP_OPEN_OUTPUT_NOREWIND:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      case OP_OPEN_INPUT:
      case OP_OPEN_INPUT_NOREWIND:
      case OP_OPEN_INPUT_REVERSED:
         return doOpenFile( opCodep, fcd, txtOpCode(opCode));
         break;

      default:
         break;
      }

   }

   if(opCode == OP_CLOSE
   && (fcd->openMode & OPEN_NOT_OPEN) ) {
      return 0;
   }

   sts = EXTFH( opCodep, fcd );
   return sts;
}

static char *           /* Return Text name of function */
txtOpCode(int opCode)
{
   static char tmp[32];
   switch (opCode) {
   case OP_OPEN_INPUT:     return "OPEN_IN";
   case OP_OPEN_OUTPUT:       return "OPEN_OUT";
   case OP_OPEN_IO:     return "OPEN_IO";
   case OP_OPEN_EXTEND:       return "OPEN_EXT";
   case OP_OPEN_INPUT_NOREWIND:  return "OPEN_IN_NOREW";
   case OP_OPEN_OUTPUT_NOREWIND: return "OPEN_OUT_NOREW";
   case OP_OPEN_INPUT_REVERSED:  return "OPEN_IN_REV";
   case OP_CLOSE:          return "CLOSE";
   case OP_CLOSE_LOCK:     return "CLOSE_LOCK";
   case OP_CLOSE_NOREWIND:    return "CLOSE_NORED";
   case OP_CLOSE_REEL:     return "CLOSE_REEL";
   case OP_CLOSE_REMOVE:      return "CLOSE_REMOVE";
   case OP_CLOSE_NO_REWIND:   return "CLOSE_NO_REW";
   case OP_START_EQ:       return "START_EQ";
   case OP_START_EQ_ANY:      return "START_EQ_ANY";
   case OP_START_GT:       return "START_GT";
   case OP_START_GE:       return "START_GE";
   case OP_START_LT:       return "START_LT";
   case OP_START_LE:       return "START_LE";
   case OP_READ_SEQ_NO_LOCK:  return "READ_SEQ_NO_LK";
   case OP_READ_SEQ:       return "READ_SEQ";
   case OP_READ_SEQ_LOCK:     return "READ_SEQ_LK";
   case OP_READ_SEQ_KEPT_LOCK:   return "READ_SEQ_KEPT_LK";
   case OP_READ_PREV_NO_LOCK:    return "READ_PREV_NO_LK";
   case OP_READ_PREV:      return "READ_PREV";
   case OP_READ_PREV_LOCK:    return "READ_PREV_LK";
   case OP_READ_PREV_KEPT_LOCK:  return "READ_PREV_KEPT_LK";
   case OP_READ_RAN:       return "READ_RAN";
   case OP_READ_RAN_NO_LOCK:  return "READ_RAN_NO_LK";
   case OP_READ_RAN_KEPT_LOCK:   return "READ_RAN_KEPT_LK";
   case OP_READ_RAN_LOCK:     return "READ_RAN_LK";
   case OP_READ_DIR:       return "READ_DIR";
   case OP_READ_DIR_NO_LOCK:  return "READ_DIR_NO_LK";
   case OP_READ_DIR_KEPT_LOCK:   return "READ_DIR_KEPT_LK";
   case OP_READ_DIR_LOCK:     return "READ_DIR_LK";
   case OP_READ_POSITION:     return "READ_POSITION";
   case OP_WRITE:          return "WRITE";
   case OP_REWRITE:     return "REWRITE";
   case OP_DELETE:      return "DELETE";
   case OP_DELETE_FILE:       return "DELETE_FILE";
   case OP_UNLOCK:      return "UNLOCK";
   case OP_ROLLBACK:       return "ROLLBACK";
   case OP_COMMIT:      return "COMMIT";
   case OP_WRITE_BEFORE:      return "WRITE_BEFORE";
   case OP_WRITE_BEFORE_TAB:  return "WRITE_BEFORE_TAB";
   case OP_WRITE_BEFORE_PAGE:    return "WRITE_BEFORE_PAGE";
   case OP_WRITE_AFTER:       return "WRITE_AFTER";
   case OP_WRITE_AFTER_TAB:   return "WRITE_AFTER_TAB";
   case OP_WRITE_AFTER_PAGE:  return "WRITE_AFTER_PAGE";
   }
   sprintf(tmp,"Func 0x%02X:",opCode);
   return tmp;
}
]])

AT_CHECK([$COMPILE -fcallfh=TSTFH -ftraceall prog.cob cmod.c], [0], [], [])

# first run without runtime tracing
#### superseded by 1418: AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
AT_CHECK([export COB_TRACE_FILE=trace.txt
export COB_TRACE_IO=Y
export COB_SET_TRACE=Y
export COB_TRACE_FORMAT=%L%S
export IO_TSPFILE=trace
export IO_TSTFILE=no-trace
./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00/02 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
Expected ERROR 39 opening TSTFILE, Record size different
], [])

# not merged yet:
#export COB_TRACE_IO=Y
#export IO_TSPFILE=trace
#export IO_TSTFILE=no-trace

AT_CHECK([COB_TRACE_FILE=trace.txt \
COB_SET_TRACE=Y \
COB_TRACE_FORMAT="Line: %L %S" \
$COBCRUN_DIRECT ./prog], [0],
[OK: Operations on empty file
Loading sample data file.
Sample data file load complete.
LIST SAMPLE FILE
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Stop read after: 11
LIST SAMPLE FILE DESCENDING
Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
  Write: GIB00000 got 22 as expected
   Read: GAM00000 got 00 as expected 00075 terminals
ReWrite: GAM00000 got 00 as expected 00080 terminals
   Read: BET00000 got 00 as expected 00034 terminals
ReWrite: GAM00000 got 00/02 as expected
ReWrite: FOR00000 got 00/02 as expected
], [])


AT_CAPTURE_FILE(./trace.txt)

AT_DATA([reference],
[Source: 'prog.cob'
Program-Id: prog            
 Line:    290     Entry: prog                            
 Line:    290 Paragraph: MAINFILE                        
 Line:    291             OPEN                           
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    292             CLOSE                          
            CLOSE TSPFILE Status: 00
 Line:    294             OPEN                           
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    295             MOVE                           
 Line:    296             READ                           
            READ Sequential TSPFILE Status: 10
 Line:    297             IF                             
 Line:    302             MOVE                           
 Line:    303             START                          
            START TSPFILE Status: 23
            Key : ALL LOW-VALUES
 Line:    304             IF                             
 Line:    309             READ                           
            READ Sequential TSPFILE Status: 46
 Line:    310             IF                             
 Line:    315             DISPLAY                        
 Line:    316             CLOSE                          
            CLOSE TSPFILE Status: 00
 Line:    318             PERFORM                        
 Line:    333 Paragraph: LOADFILE                        
 Line:    334             DISPLAY                        
 Line:    337             OPEN                           
            OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
 Line:    338             IF                             
 Line:    344             PERFORM                        
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 00
         Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
                  '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
                  '    1600 BPI00085'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    371             MOVE                           
 Line:    372             MOVE                           
 Line:    373             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    380             IF                             
 Line:    356 Paragraph: 1000-LOAD-RECORD                
 Line:    358             MOVE                           
 Line:    359             MOVE                           
 Line:    360             MOVE                           
 Line:    361             MOVE                           
 Line:    362             MOVE                           
 Line:    363             MOVE                           
 Line:    364             MOVE                           
 Line:    365             MOVE                           
 Line:    366             MOVE                           
 Line:    367             MOVE                           
 Line:    368             MOVE                           
 Line:    370             IF                             
 Line:    375             MOVE                           
 Line:    376             MOVE                           
 Line:    377             MOVE                           
 Line:    379             WRITE                          
            WRITE TSPFILE Status: 02
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    380             IF                             
 Line:    348             DISPLAY                        
 Line:    350             CLOSE                          
            CLOSE TSPFILE Status: 00
 Line:    319             PERFORM                        
 Line:    385 Paragraph: LISTFILE                        
 Line:    386             DISPLAY                        
 Line:    387             OPEN                           
 Line:    388             MOVE                           
 Line:    389             MOVE                           
 Line:    390             START                          
 Line:    391             READ                           
 Line:    392             READ                           
 Line:    393             CLOSE                          
 Line:    395             MOVE                           
 Line:    396             OPEN                           
            OPEN INPUT TSPFILE -> 'testisam' Status: 00
 Line:    397             IF                             
 Line:    402             MOVE                           
 Line:    403             MOVE                           
 Line:    404             START                          
            START TSPFILE Status: 00
            Key : 'PRE00000'
 Line:    405             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
                  '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
                  '    6250 BPI00086'
 Line:    406             READ                           
            READ Sequential TSPFILE Status: 10
 Line:    408             MOVE                           
 Line:    409             MOVE                           
 Line:    410             START                          
            START TSPFILE Status: 00
            Key : 'DEL00000'
 Line:    411             IF                             
 Line:    416             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    417             IF                             
 Line:    422             PERFORM                        
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    431             ADD                            
 Line:    424             DISPLAY                        
 Line:    427             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
                  '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
                  '    6250 BPI00124'
 Line:    431             ADD                            
 Line:    433             IF                             
 Line:    437             DISPLAY                        
 Line:    438             MOVE                           
 Line:    439             START                          
            START TSPFILE Status: 00
            Key : 'OLD00000'
 Line:    440             IF                             
 Line:    445             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
                  '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
                  '    6250 BPI00324'
 Line:    446             IF                             
 Line:    451             PERFORM                        
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
                  '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
                  '    6250 BPI00110'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
                  '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
                  '    6250 BPI00064'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
                  '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
                  '    1600 BPI00128'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
                  '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
                  '    1600 BPI00034'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
                  '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
                  '    1600 BPI00016'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
                  '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
                  '    6250 BPI00032'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
                  '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
                  '    1600 BPI00090'
 Line:    460             ADD                            
 Line:    453             DISPLAY                        
 Line:    456             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    460             ADD                            
 Line:    463             CLOSE                          
            CLOSE TSPFILE Status: 00
 Line:    465             OPEN                           
            OPEN I_O TSPFILE -> 'testisam' Status: 00
 Line:    466             MOVE                           
 Line:    467             MOVE                           
 Line:    468             MOVE                           
 Line:    469             READ                           
            READ TSPFILE Status: 23
            Key : 'BET0X000'
 Line:    470             IF                             
 Line:    474             MOVE                           
 Line:    475             MOVE                           
 Line:    476             READ                           
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    477             IF                             
 Line:    481             DISPLAY                        
 Line:    485             READ                           
            READ Sequential TSPFILE Status: 00
         Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
                  '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
                  '    6250 BPI00045'
 Line:    486             IF                             
 Line:    490             DISPLAY                        
 Line:    494             MOVE                           
 Line:    495             MOVE                           
 Line:    496             READ                           
            READ TSPFILE Status: 00
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
            Key :  6456445643
 Line:    497             IF                             
 Line:    501             DISPLAY                        
 Line:    505             WRITE                          
            WRITE TSPFILE Status: 22
         Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
                  '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
                  '    1600 BPI00067'
 Line:    506             IF                             
 Line:    510             DISPLAY                        
 Line:    513             MOVE                           
 Line:    514             MOVE                           
 Line:    515             READ                           
            READ TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00075'
            Key : 'GAM00000'
 Line:    516             DISPLAY                        
 Line:    520             ADD                            
 Line:    521             REWRITE                        
            REWRITE TSPFILE Status: 00
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
                  '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
                  '    1600 BPI00080'
 Line:    522             IF                             
 Line:    527             DISPLAY                        
 Line:    532             MOVE                           
 Line:    533             MOVE                           
 Line:    534             READ                           
            READ TSPFILE Status: 00
         Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
            Key : 'BET00000'
 Line:    535             DISPLAY                        
 Line:    539             MOVE                           
 Line:    540             MOVE                           
 Line:    541             REWRITE                        
            REWRITE TSPFILE Status: 02
         Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
                  '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
                  '    6250 BPI00034'
 Line:    542             IF                             
 Line:    547             DISPLAY                        
 Line:    551             MOVE                           
 Line:    552             MOVE                           
 Line:    553             READ                           
            READ TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
            Key : 'FOR00000'
 Line:    554             MOVE                           
 Line:    555             MOVE                           
 Line:    556             REWRITE                        
            REWRITE TSPFILE Status: 02
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    557             IF                             
 Line:    562             DISPLAY                        
 Line:    566             DELETE                         
            DELETE TSPFILE Status: 00
         Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
                  '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
                  '    6250 BPI00107'
 Line:    567             CLOSE                          
            CLOSE TSPFILE Status: 00
 Line:    320             OPEN                           
 Line:    321             IF                             
 Line:    322             DISPLAY                        
 Line:    330             PERFORM                        
 Line:    569 Paragraph: LOADFLAT                        
 Line:    570             OPEN                           
            OPEN OUTPUT FLATFILE -> 'RELFIX' Status: 00
 Line:    571             PERFORM                        
 Line:    583 Paragraph: FLAT-RECORD                     
 Line:    585             MOVE                           
 Line:    586             MOVE                           
 Line:    587             MOVE                           
 Line:    588             MOVE                           
 Line:    589             MOVE                           
 Line:    590             MOVE                           
 Line:    591             IF                             
 Line:    592             MOVE                           
 Line:    595             WRITE                          
            WRITE FLATFILE Status: 00
         Record :  A L P 0  0 0 0 0  A L P H  A   E L  E C T R  I C A L    C O .    L T D 
              1 x 414C5030 30303030 414C5048 4120454C 45435452 4943414C 20434F2E 204C5444 
                   . 8 4 1  7            U             p 1  
             33 x 2E383431 37202020 20005500 00000200 70319C
        Record# :  000001
 Line:    583 Paragraph: FLAT-RECORD                     
 Line:    585             MOVE                           
 Line:    586             MOVE                           
 Line:    587             MOVE                           
 Line:    588             MOVE                           
 Line:    589             MOVE                           
 Line:    590             MOVE                           
 Line:    591             IF                             
 Line:    594             MOVE                           
 Line:    595             WRITE                          
            WRITE FLATFILE Status: 00
         Record :  B E T 0  0 0 0 0  B E T A    S H O  E   M F  G .   I  N C .            
              1 x 42455430 30303030 42455441 2053484F 45204D46 472E2049 4E432E20 20202020 
                     8 4 7  0            "             p 1  
             33 x 20383437 30202020 20002200 00000200 70319C
        Record# :  000002
 Line:    583 Paragraph: FLAT-RECORD                     
 Line:    585             MOVE                           
 Line:    586             MOVE                           
 Line:    587             MOVE                           
 Line:    588             MOVE                           
 Line:    589             MOVE                           
 Line:    590             MOVE                           
 Line:    591             IF                             
 Line:    592             MOVE                           
 Line:    595             WRITE                          
            WRITE FLATFILE Status: 00
         Record :  G A M 0  0 0 0 0  G A M M  A   X -  R A Y    T E C H  N O L O  G Y     
              1 x 47414D30 30303030 47414D4D 4120582D 52415920 54454348 4E4F4C4F 47592020 
                     8 4 1  7            K             p 1  
             33 x 20383431 37202020 20004B00 00000200 70319C
        Record# :  000003
 Line:    583 Paragraph: FLAT-RECORD                     
 Line:    585             MOVE                           
 Line:    586             MOVE                           
 Line:    587             MOVE                           
 Line:    588             MOVE                           
 Line:    589             MOVE                           
 Line:    590             MOVE                           
 Line:    591             IF                             
 Line:    594             MOVE                           
 Line:    595             WRITE                          
            WRITE FLATFILE Status: 00
         Record :  D E L 0  0 0 0 0  D E L T  A   L U  G G A G  E   R E  P A I R  S       
              1 x 44454C30 30303030 44454C54 41204C55 47474147 45205245 50414952 53202020 
                     8 4 7  0            -             p 1  
             33 x 20383437 30202020 20002D00 00000200 70319C
        Record# :  000004
 Line:    583 Paragraph: FLAT-RECORD                     
 Line:    585             MOVE                           
 Line:    586             MOVE                           
 Line:    587             MOVE                           
 Line:    588             MOVE                           
 Line:    589             MOVE                           
 Line:    590             MOVE                           
 Line:    591             IF                             
 Line:    592             MOVE                           
 Line:    595             WRITE                          
            WRITE FLATFILE Status: 00
         Record :  E P S 0  0 0 0 0  E P S I  L O N    E Q U I  P M E N  T   S U  P P L Y 
              1 x 45505330 30303030 45505349 4C4F4E20 45515549 504D454E 54205355 50504C59 
                     8 4 1  7            Z             p 1  
             33 x 20383431 37202020 20005A00 00000200 70319C
        Record# :  000005
 Line:    575             CLOSE                          
            CLOSE FLATFILE Status: 00
 Line:    576             OPEN                           
            OPEN INPUT FLATFILE -> 'RELFIX' Status: 00
 Line:    577             MOVE                           
 Line:    578             READ                           
            READ FLATFILE Status: 00
         Record :  G A M 0  0 0 0 0  G A M M  A   X -  R A Y    T E C H  N O L O  G Y     
              1 x 47414D30 30303030 47414D4D 4120582D 52415920 54454348 4E4F4C4F 47592020 
                     8 4 1  7            K             p 1  
             33 x 20383431 37202020 20004B00 00000200 70319C
        Record# :  000003
 Line:    579             MOVE                           
 Line:    580             READ                           
            READ FLATFILE Status: 23
        Record# :  000999
 Line:    581             CLOSE                          
            CLOSE FLATFILE Status: 00
 Line:    331             STOP RUN                       
])

#### jkl, removed for 1623: # AT_DATA workaround via sed:
#### jkl, removed for 1623: AT_CAPTURE_FILE(./trace_append.txt)
#### jkl, removed for 1623: 
#### jkl, removed for 1623: AT_CHECK([diff reference_append trace_append.txt], [0], [], [])

# hack for not checking Status 02 as this isn't returned by all
# ISAM implementations

AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g' \
reference > references], [0], [], [])
AT_CHECK([sed -e 's/WRITE TSPFILE Status: 02/WRITE TSPFILE Status: 00/g'  \
-e 's/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 05"'/'"OPEN OUTPUT TSPFILE -> 'testisam' Status: 00"'/g' \
trace.txt > traces.txt], [0], [], [])

AT_CHECK([gcdiff references traces.txt], [0], [], [])

AT_CLEANUP


AT_SETUP([Test dump feature])
AT_KEYWORDS([Dump])

AT_DATA([./cpyabrt], [
            MOVE "Quick brown fox jumped over the dog"
              TO TSTTAILX (1:40).
            MOVE CM-COMPANY TO TSTTAILX (42:20).
      *     DISPLAY ':' X ':'.
      *     DISPLAY CM-COMPANY.
      *     DISPLAY '>' CM-COMPANY '<'.
])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE ASSIGN EXTERNAL RELFIX
           ORGANIZATION RELATIVE
           ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
           FILE STATUS IS CUST-STAT.

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.

       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       WORKING-STORAGE SECTION.
       77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
       77  CUST-STAT                           PICTURE X(2).
       77  REC-NUM           VALUE  1          PICTURE 9(4).
       01  BIN                      PIC 9(9) BINARY VALUE 0.

       01  TEST-DATA.
         02  DATA-CUST-NUM-TBL.
           05  FILLER PIC X(8) VALUE "ALP00000".
           05  FILLER PIC X(8) VALUE "BET00000".
           05  FILLER PIC X(8) VALUE "DEL00000".
           05  FILLER PIC X(8) VALUE "EPS00000".
           05  FILLER PIC X(8) VALUE "FOR00000".
           05  FILLER PIC X(8) VALUE "GAM00000".

         02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
                                       PIC X(8) OCCURS 6.
         02  DATA-COMPANY-TBL.
           05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
           05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
           05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
           05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
           05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
           05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
         02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
                                       PIC X(25) OCCURS 6.
         02  DATA-ADDRESS-2-TBL.
           05  FILLER PIC X(10) VALUE "ATLANTA   ".
           05  FILLER PIC X(10) VALUE "CALGARY   ".
           05  FILLER PIC X(10) VALUE "NEW YORK  ".
           05  FILLER PIC X(10) VALUE "TORONTO   ".
           05  FILLER PIC X(10) VALUE "WASHINGTON".
           05  FILLER PIC X(10) VALUE "WHITEPLAIN".
         02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
                                       PIC X(10) OCCURS 6.

         02  DATA-NO-TERMINALS-TBL.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 13.
           05  FILLER PIC 9(3) COMP-3 VALUE 75.
           05  FILLER PIC 9(3) COMP-3 VALUE 10.
           05  FILLER PIC 9(3) COMP-3 VALUE 90.
           05  FILLER PIC 9(3) COMP-3 VALUE 254.
         02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
                                       PIC 9(3) COMP-3 OCCURS 6.
       01  WORK-AREA IS EXTERNAL.
           05  SUB                             PICTURE 9(4) COMP SYNC.
               88  ODD-RECORD                  VALUE 1 3 5.


       PROCEDURE DIVISION.

           PERFORM LOADFILE.

           OPEN INPUT FLATFILE.
           READ FLATFILE.

       MAIN-100.
           PERFORM CALL-SUB-1.
           PERFORM CALL-SUB-2.
           PERFORM CALL-IT-OMIT.
           STOP RUN.

       LOADFILE.
           OPEN OUTPUT FLATFILE.

           PERFORM LOAD-RECORD
                        VARYING SUB FROM 1 BY 1
                          UNTIL SUB > MAX-SUB.

           CLOSE FLATFILE.

       LOAD-RECORD.

           MOVE SPACES                       TO TSPFL-RECORD.
           MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
           MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
           MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
           IF  ODD-RECORD
               MOVE "8417"                   TO CM-DISK
           ELSE
               MOVE "8470"                   TO CM-DISK.
           WRITE TSPFL-RECORD.

       CALL-SUB-1 SECTION.
           CALL "sub1" USING bin, TSPFL-RECORD.

       CALL-SUB-2 SECTION.
           MOVE 4096 TO bin
           CALL "sub2" USING bin, TSPFL-RECORD.

       CALL-IT-OMIT SECTION.
           MOVE 5440 TO bin
           CALL "sub1" USING bin, OMITTED.

           END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. sub1.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ZRO PIC 9(9) BINARY VALUE 0.
       01  HEXV PIC X  COMP-X.
       01  HEXC REDEFINES HEXV PIC X.

       01 TEST-BASED BASED.
          05 TEST-BASED-SUB PIC X(00000100000).

       01 TEST-ALLOCED BASED.
          05 TEST-ALLOCED-SUB1 PIC X(010).
          05 TEST-ALLOCED-SUB2 PIC 9(006).

       01  IDX PIC 9(9) BINARY VALUE 0.
       01  TSTREC.
         05  TSTDEP  PIC XXX.
         05  TSTX OCCURS 4 TIMES.
           15  TSTG-1 PIC 99.
           15  TSTX-2 PIC XX OCCURS 4 TIMES.
         05  TSTTAIL1  PIC 99.
         05  TSTCOMP3  PIC 9(5) COMP-3.
         05  TSTLONG   PIC X(100).
         05  TSTHEX    PIC X(100).
         05  TSTHEX2   PIC X(60).
         05  TSTTAILX  PIC X(80).

       LINKAGE SECTION.
       01  X  PIC 9(9) BINARY.
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       PROCEDURE DIVISION USING X, TSPFL-RECORD.
       MAIN-1 SECTION.
            MOVE ALL "X" TO TSTREC.
            MOVE 1 TO TSTG-1 (1).
            MOVE 2 TO TSTG-1 (2).
            MOVE 3 TO TSTG-1 (3).
            MOVE 'A' TO TSTX-2 (1,1).
            MOVE 'B' TO TSTX-2 (2,1).
            MOVE 'C' TO TSTX-2 (3,1).
            MOVE 'xx' TO TSTX-2 (1,4).
            MOVE 'yy' TO TSTX-2 (2,4).
            MOVE 'zz' TO TSTX-2 (3,4).
            MOVE SPACES TO TSTX-2 (1,3).
            MOVE HIGH-VALUES TO TSTX (4).
            MOVE LOW-VALUES TO TSTX-2 (2,3).
            MOVE HIGH-VALUES TO TSTX-2 (3,3).
            MOVE "Quick brown fox jumped over the dog"
              TO TSTLONG, TSTLONG (50:36).
            MOVE "Quicker grey fox jumped the cougar"
              TO TSTHEX (1:35).
       MAIN-2.
            MOVE 17 TO HEXV.
            MOVE HEXC TO TSTHEX (39:1).
            MOVE HEXC TO TSTTAIL1 (2:1).
            MOVE 7 TO HEXV.
            MOVE HEXC TO TSTHEX (47:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX (59:1).
            MOVE 0 TO HEXV.
            MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
            MOVE 9 TO HEXV.
            MOVE HEXC TO TSTHEX2 (47:1).
            MOVE '\' TO TSTHEX2 (32:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX2 (59:1).
            MOVE 'A' TO TSTHEX2 (54:1).
            MOVE LOW-VALUES TO TSTTAILX
            ADD 1 TO X.
            DISPLAY "X is " X.
            ALLOCATE TEST-ALLOCED INITIALIZED.
            COPY cpyabrt.
            IF ADDRESS OF TEST-BASED NOT = NULL
              DISPLAY TEST-BASED-SUB
            END-IF.
            GOBACK.
       END PROGRAM sub1.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. sub2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ZRO PIC 9(9) BINARY VALUE 0.
       01  HEXV PIC X  COMP-X.
       01  HEXC REDEFINES HEXV PIC X.

       01  IDX PIC 9(9) BINARY VALUE 0.
       01  TSTREC.
         05  TSTDEP  PIC XXX.
         05  TSTX OCCURS 4 TIMES.
           15  TSTG-1 PIC 99.
           15  TSTX-2 PIC XX OCCURS 4 TIMES.
         05  TSTTAIL1  PIC 99.
         05  TSTCOMP3  PIC 9(5) COMP-3.
         05  TSTLONG   PIC X(100).
         05  TSTHEX    PIC X(100).
         05  TSTHEX2   PIC X(60).
         05  TSTTAILX  PIC X(80).

       LINKAGE SECTION.
       01  X  PIC 9(9) BINARY.
       01  TSPFL-RECORD.
           10  CM-CUST-NUM                     PICTURE X(8).
           10  CM-COMPANY                      PICTURE X(25).
           10  CM-DISK                         PICTURE X(8).
           10  CM-NO-TERMINALS                 PICTURE 9(4).

       PROCEDURE DIVISION USING X, TSPFL-RECORD.
            MOVE ALL "X" TO TSTREC.
            MOVE 1 TO TSTG-1 (1).
            MOVE 2 TO TSTG-1 (2).
            MOVE 3 TO TSTG-1 (3).
            MOVE 'A' TO TSTX-2 (1,1).
            MOVE 'B' TO TSTX-2 (2,1).
            MOVE 'C' TO TSTX-2 (3,1).
            MOVE 'xx' TO TSTX-2 (1,4).
            MOVE 'yy' TO TSTX-2 (2,4).
            MOVE 'zz' TO TSTX-2 (3,4).
            MOVE SPACES TO TSTX-2 (1,3).
            MOVE HIGH-VALUES TO TSTX (4).
            MOVE LOW-VALUES TO TSTX-2 (2,3).
            MOVE HIGH-VALUES TO TSTX-2 (3,3).
            MOVE "Quick brown fox jumped over the dog"
              TO TSTLONG, TSTLONG (50:36).
            MOVE "Quicker grey fox jumped the cougar"
              TO TSTHEX (1:35).
            MOVE 17 TO HEXV.
            MOVE HEXC TO TSTHEX (39:1).
            MOVE HEXC TO TSTTAIL1 (2:1).
            MOVE 7 TO HEXV.
            MOVE HEXC TO TSTHEX (47:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX (59:1).
            MOVE 0 TO HEXV.
            MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
            MOVE 9 TO HEXV.
            MOVE HEXC TO TSTHEX2 (47:1).
            MOVE '\' TO TSTHEX2 (32:1).
            MOVE 13 TO HEXV.
            MOVE HEXC TO TSTHEX2 (59:1).
            MOVE 'A' TO TSTHEX2 (54:1).
            MOVE LOW-VALUES TO TSTTAILX.
            COPY cpyabrt.
       END PROGRAM sub2.
])

AT_CHECK([$COMPILE -fdump=ALL prog.cob], [0], [], [])

AT_CHECK([COB_DUMP_FILE=tstdump.txt \
$COBCRUN_DIRECT ./prog], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
])

AT_CAPTURE_FILE(./tstdump.txt)

AT_DATA([reference_tmpl],
[Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
 Last statement of sub1 was Line 4 of cpyabrt
 Last statement of prog was Line 118 of prog.cob

Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS

WORKING-STORAGE
**********************
01        ZRO                             000000000
01        HEXV                            13
01        TEST-BASED.                     <NULL> address
01        TEST-ALLOCED.
  05      TEST-ALLOCED-SUB1              ALL SPACES
  05      TEST-ALLOCED-SUB2               000000
01        IDX                             000000000
01        TSTREC.
  05      TSTDEP                         'XXX'
  05      TSTX.
       15 TSTG-1 (1)                      01
       15 TSTX-2 (1,1)                   'A'
       15 TSTX-2 (1,2)                   'XX'
       15 TSTX-2 (1,3)                   ALL SPACES
       15 TSTX-2 (1,4)                   'xx'
       15 TSTG-1 (2)                      02
       15 TSTX-2 (2,1)                   'B'
       15 TSTX-2 (2,2)                   'XX'
       15 TSTX-2 (2,3)                   ALL LOW-VALUES
       15 TSTX-2 (2,4)                   'yy'
       15 TSTG-1 (3)                      03
       15 TSTX-2 (3,1)                   'C'
       15 TSTX-2 (3,2)                   'XX'
       15 TSTX-2 (3,3)                   ALL HIGH-VALUES
       15 TSTX-2 (3,4)                   'zz'
       15 TSTG-1 (4)                     ALL HIGH-VALUES
       15 TSTX-2 (4,1)                   ALL HIGH-VALUES
       15 TSTX-2 (4,2)                   ALL HIGH-VALUES
       15 TSTX-2 (4,3)                   ALL HIGH-VALUES
       15 TSTX-2 (4,4)                   ALL HIGH-VALUES
  05      TSTTAIL1                        X  _
                                     1 x 5811
  05      TSTCOMP3                        58585
  05      TSTLONG                        'Quick brown fox jumped over the dog              Quick br'
                                         'own fox jumped over the dog'
  05      TSTHEX                          Q u i c  k e r    g r e y    f o x    j u m  p e d   _
                                     1 x 51756963 6B657220 67726579 20666F78 206A756D 70656420 _
                                          t h e    c o u g  a r   X  X X   X  X X X X  X X   X _
                                    25 x 74686520 636F7567 61722058 58581158 58585858 58580758 _
                                          X X X X  X X X X  X X   X  X X X X  X X X X  X X X X _
                                    49 x 58585858 58585858 58580D58 58585858 58585858 58585858 _
                                          X X X X  X X X X  X X X X  X X X X  X X X X  X X X X _
                                    73 x 58585858 58585858 58585858 58585858 58585858 58585858 _
                                          X X X X
                                    97 x 58585858
  05      TSTHEX2                        XXXXXXXXX\0XXXXXXXXXXXXXXXXXXXXX\\XXXXXX\0XXXXXXX\tXXXXXX
                                    54 : AXXXX\rX
  05      TSTTAILX                       'Quick brown fox jumped over the dog     '
                                  trailing LOW-VALUES

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.                   <NULL> address

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

FD FLATFILE
**********************
   File is OPEN
   FILE STATUS  '00'
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010

WORKING-STORAGE
**********************
77        MAX-SUB                         0006
77        CUST-STAT                      '00'
77        REC-NUM                         0001
01        BIN                             000005441
01        TEST-DATA.
 02       DATA-CUST-NUM-TBL.
  05      FILLER                         'ALP00000'
  05      FILLER                         'BET00000'
  05      FILLER                         'DEL00000'
  05      FILLER                         'EPS00000'
  05      FILLER                         'FOR00000'
  05      FILLER                         'GAM00000'
 02       DATA-COMPANY-TBL.
  05      FILLER                         'ALPHA ELECTRICAL CO. LTD.'
  05      FILLER                         'BETA SHOE MFG. INC.'
  05      FILLER                         'DELTA LUGGAGE REPAIRS'
  05      FILLER                         'EPSILON EQUIPMENT SUPPLY'
  05      FILLER                         'FORTUNE COOKIE COMPANY'
  05      FILLER                         'GAMMA X-RAY TECHNOLOGY'
 02       DATA-ADDRESS-2-TBL.
  05      FILLER                         'ATLANTA'
  05      FILLER                         'CALGARY'
  05      FILLER                         'NEW YORK'
  05      FILLER                         'TORONTO'
  05      FILLER                         'WASHINGTON'
  05      FILLER                         'WHITEPLAIN'
 02       DATA-NO-TERMINALS-TBL.
  05      FILLER                          010
  05      FILLER                          013
  05      FILLER                          075
  05      FILLER                          010
  05      FILLER                          090
  05      FILLER                          254
01        WORK-AREA.
  05      SUB                             0007

])

# AT_DATA workaround via sed:
AT_CHECK([sed -e 's/_$//' reference_tmpl > reference], [0], [], [])
AT_CHECK([sed -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump.txt > tstdump.sed], [0], [], [])

AT_CHECK([diff reference tstdump.sed], [0], [], [])

AT_CHECK([$COMPILE -fdump=FD,LS prog.cob -o prog_fdls], [0], [], [])

AT_CHECK([COB_DUMP_FILE=tstdump_fdls.txt \
$COBCRUN_DIRECT ./prog_fdls], [1],
[X is 000000001
X is 000005441
],
[libcob: cpyabrt:4: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
])


AT_CAPTURE_FILE(./tstdump_fdls.txt)

AT_DATA([reference_fdls_tmpl],
[Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
 Last statement of sub1 was Line 4 of cpyabrt
 Last statement of prog was Line 118 of prog.cob

Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS

LINKAGE
**********************
01        X                               000005441
01        TSPFL-RECORD.                   <NULL> address

Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS

FD FLATFILE
**********************
   File is OPEN
   FILE STATUS  '00'
01        TSPFL-RECORD.
     10   CM-CUST-NUM                    'ALP00000'
     10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
     10   CM-DISK                        '8417'
     10   CM-NO-TERMINALS                 0010

])

# AT_DATA workaround via sed:
AT_CHECK([sed -e 's/_$//' reference_fdls_tmpl > reference], [0], [], [])
AT_CHECK([sed -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
tstdump_fdls.txt > tstdump.sed], [0], [], [])

AT_CHECK([diff reference tstdump.sed], [0], [], [])

AT_CLEANUP


AT_SETUP([CALL with program prototypes])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       PROCEDURE DIVISION.
           CALL "c"
           .
       END PROGRAM prog.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. a AS "blah?Sdk".

       PROCEDURE DIVISION.
           DISPLAY "Hello!"
           .
       END PROGRAM a.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. b.

       PROCEDURE DIVISION.
           DISPLAY "Hello again!"
           .
       END PROGRAM b.


       IDENTIFICATION DIVISION.
       PROGRAM-ID. c.

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           PROGRAM d AS "blah?Sdk"
           PROGRAM b
           .

       PROCEDURE DIVISION.
           CALL d
           CALL b
           .
       END PROGRAM c.
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Hello!
Hello again!
])
AT_CLEANUP


AT_SETUP([REDEFINES values on FILLER and INITIALIZE])
AT_KEYWORDS([runmisc INITIALIZE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TSRDF.
           05  WS-ASK-ID-DATE                PIC X(10) VALUE ALL '*'.
           05  WS-ASK-ID-DATE-R              REDEFINES WS-ASK-ID-DATE.
               10  WS-ASK-ID-DATE-YYYY       PIC 9(4) VALUE 2017.
               10  FILLER                    PIC X VALUE '-'.
               10  WS-ASK-ID-DATE-MM         PIC 9(2).
               10  FILLER                    PIC X VALUE '-'.
               10  WS-ASK-ID-DATE-DD         PIC 9(2).
       PROCEDURE DIVISION.
           MOVE 2015 TO WS-ASK-ID-DATE-YYYY
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " Compiled".

           INITIALIZE WS-ASK-ID-DATE-R.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " INITIALIZE".

           INITIALIZE WS-ASK-ID-DATE-R WITH FILLER.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " WITH FILLER".

           INITIALIZE WS-ASK-ID-DATE-R WITH FILLER ALL TO VALUE.
           MOVE 08 TO WS-ASK-ID-DATE-MM
           MOVE 21 TO WS-ASK-ID-DATE-DD
           DISPLAY "The date is " WS-ASK-ID-DATE " ALL TO VALUE".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:9: warning: initial VALUE clause ignored for REDEFINES item 'WS-ASK-ID-DATE-YYYY'
prog.cob:10: warning: initial VALUE clause ignored for REDEFINES item 'FILLER'
prog.cob:12: warning: initial VALUE clause ignored for REDEFINES item 'FILLER'
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[The date is 2015*08*21 Compiled
The date is 0000*08*21 INITIALIZE
The date is 0000 08 21 WITH FILLER
The date is 2017-08-21 ALL TO VALUE
], [])

AT_CLEANUP


AT_SETUP([PICTURE with constant-name])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  foo-bar     CONSTANT 8.
       01  x           PIC 9(foo-bar)9(foo-bar).

       PROCEDURE DIVISION.
           IF FUNCTION LENGTH (x) <> 16
               DISPLAY FUNCTION LENGTH (x)
           END-IF
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE_ONLY prog.cob], [0], [],
[prog.cob:11: warning: expression '16' NOT EQUAL '16' is always FALSE
])
AT_CHECK([$COMPILE -fno-constant-folding prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([Quote marks in comment paragraphs])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       DATE-written.  hello'".
      *> Written is intentionally lowercase.
      *> extra " to fix syntax highlighting
       PROCEDURE      DIVISION.
           DISPLAY "Hello, world!"
           .
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [],
[prog.cob:4: warning: DATE-WRITTEN is obsolete in GnuCOBOL
])
AT_CHECK([$COMPILE -free -o prog prog.cob], [0], [],
[prog.cob:3: warning: DATE-WRITTEN is obsolete in GnuCOBOL
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Hello, world!
])
AT_CLEANUP


AT_SETUP([Numeric MOVE with/without -fbinary-truncate])
AT_KEYWORDS([runmisc size])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9(4) COMP.

       PROCEDURE       DIVISION.
           MOVE 30000 TO x
           PERFORM check-x-val

           COMPUTE x = 30000
           PERFORM check-x-val

           MOVE ZERO TO x
           ADD 30000 TO x
           PERFORM check-x-val

           GOBACK
           .
       check-x-val     SECTION.
           EVALUATE x
               WHEN >= 10000
                   DISPLAY "x >= 10000"

               WHEN ZERO
                   DISPLAY "x IS ZERO"

               WHEN OTHER
                   CONTINUE
           END-EVALUATE
           .
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:10: warning: value size exceeds data size
prog.cob:10: warning: value is 30000
prog.cob:7: warning: 'x' defined here as PIC 9(4)
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[x IS ZERO
x IS ZERO
x IS ZERO
])

AT_CHECK([$COMPILE -fno-binary-truncate prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[x >= 10000
x >= 10000
x >= 10000
])

AT_CLEANUP


AT_SETUP([Alphanumeric MOVE with truncation])
AT_KEYWORDS([misc fundamental size])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x-left  PIC X(03).
       01  x-right PIC X(03) JUSTIFIED RIGHT.

       PROCEDURE DIVISION.
           MOVE '1234' TO x-left, x-right
           IF x-left  not = '123'
           OR x-right not = '234'
              DISPLAY 'error with "1234":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           MOVE '   3' TO x-left, x-right
           IF x-left  not = spaces
           OR x-right not = '  3'
              DISPLAY 'error with "   3":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           MOVE '3   ' TO x-left, x-right
           IF x-left  not = '3'
           OR x-right not = spaces
              DISPLAY 'error with "3   ":'
              END-DISPLAY
              DISPLAY x-left
              END-DISPLAY
              DISPLAY x-right
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:11: warning: value size exceeds data size
prog.cob:11: warning: value size is 4
prog.cob:7: warning: 'x-left' defined here as PIC X(03)
prog.cob:11: warning: value size exceeds data size
prog.cob:11: warning: value size is 4
prog.cob:8: warning: 'x-right' defined here as PIC X(03)
prog.cob:21: warning: value size exceeds data size
prog.cob:21: warning: value size is 4
prog.cob:7: warning: 'x-left' defined here as PIC X(03)
prog.cob:31: warning: value size exceeds data size
prog.cob:31: warning: value size is 4
prog.cob:8: warning: 'x-right' defined here as PIC X(03)
])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([PROGRAM-ID / CALL literal/variable with spaces])
AT_KEYWORDS([CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MYRTN  PIC X(9) VALUE " SUB  ".

       PROCEDURE DIVISION.
           CALL " SUB " USING 'X'.
           MOVE x'00' TO MYRTN (6:1).
           CALL MYRTN   USING 'Y'.
           CALL "SUB"   USING 'Z'.
           CALL "S U B" USING 'A'.
           MOVE " S U B" TO MYRTN.
           CALL MYRTN   USING 'B'.
           STOP RUN.
       END PROGRAM prog.

       IDENTIFICATION DIVISION.
       PROGRAM-ID. "SUB ".

       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC X.

       PROCEDURE DIVISION USING x.
            DISPLAY "SUB GOT " X
            END-DISPLAY.
       END PROGRAM " SUB".

       IDENTIFICATION DIVISION.
       PROGRAM-ID. "S U B".

       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC X.

       PROCEDURE DIVISION USING x.
            DISPLAY "S U B  GOT " X
            END-DISPLAY.
       END PROGRAM "S U B".
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob:10: warning: ' SUB ' literal includes leading spaces which are omitted
prog.cob:10: warning: ' SUB ' literal includes trailing spaces which are omitted
prog.cob:21: warning: 'SUB ' literal includes trailing spaces which are omitted
prog.cob:30: warning: ' SUB' literal includes leading spaces which are omitted
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[SUB GOT X
SUB GOT Y
SUB GOT Z
S U B  GOT A
S U B  GOT B
],
[libcob: prog.cob:12: warning: ' SUB' literal includes leading spaces which are omitted
libcob: prog.cob:16: warning: ' S U B' literal includes leading spaces which are omitted
])

AT_CLEANUP


AT_SETUP([C API Test])
AT_KEYWORDS([CALL])

# Needs merge of BY VALUE handling...
AT_XFAIL_IF(true)

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  BINFLD5     PIC  9(5) COMP-5  VALUE  1280.
       01  BINFLD5S    PIC S9(5) BINARY  VALUE  1024.
       01  BINFLD9     PIC  9(9) BINARY  VALUE  2560.
       01  COMP3       PIC  9(8) COMP-3  VALUE  4096.
       01  COMP3V99    PIC S9(7)V99 COMP-3  VALUE  12.50.
       01  PIC9        PIC S9(8) DISPLAY VALUE  8192.
       01  NE          PIC Z(4)9.99-.
       01  CHRX        PIC  X(9)         VALUE 'Hello'.
      *01  CHRN        PIC  N(9)         VALUE N'Hello'.
       01  GRPX.
           05  FILLER  PIC  X(9)         VALUE 'Hello'.
           05  FILLER  PIC  X(9)         VALUE 'World'.
       PROCEDURE DIVISION.
           MOVE -512.77 TO NE.
           CALL "CAPI" USING 2560 BY VALUE 16.
           CALL "CAPI" USING BINFLD5, NE.
           CALL "CAPI" USING BINFLD5S.
           CALL "CAPI" USING BINFLD9.
           MOVE  512.77 TO NE.
           CALL "CAPI" USING COMP3, NE.
           CALL "CAPI" USING PIC9 BINFLD5S CHRX GRPX.
           CALL "CAPI" USING COMP3, NE, CHRX.
           CALL "CAPI" USING BINFLD5, NE.
           MOVE "Hello!" TO CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING BY VALUE BINFLD5, CHRX.
           CALL "CAPI" USING LENGTH OF GRPX.
           CALL "CAPI" USING BY VALUE GRPX LENGTH OF GRPX.
           CALL "CAPI" USING "Fred Fish", COMP3.
           CALL "CAPI" USING COMP3V99.
      *    CALL "CAPI" USING CHRN.
           CALL "CAPI" .
           DISPLAY "COMP3    is now " COMP3 ";".
           DISPLAY "COMP4    is now " BINFLD5 ";".
           DISPLAY "BINFLD5S is now " BINFLD5S ";".
           DISPLAY "CHRX     is now " CHRX ";".
           DISPLAY "NE       is now " NE ";".
           STOP RUN.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <string.h>
#include <libcob.h>

static char *
getType (int type)
{
   static char wrk[24];
   switch (type) {
   case COB_TYPE_GROUP:           return "Group";
   case COB_TYPE_NUMERIC_COMP5:
       /* fall through as the test will have different results
          on big endian systems otherwise
          return "COMP-5"; */
   case COB_TYPE_NUMERIC_BINARY:  return "BINARY";
   case COB_TYPE_NUMERIC_PACKED:  return "COMP-3";
   case COB_TYPE_NUMERIC_FLOAT:   return "COMP-1";
   case COB_TYPE_NUMERIC_DOUBLE:  return "COMP-2";
   case COB_TYPE_NUMERIC_DISPLAY: return "DISPLAY";
   case COB_TYPE_ALPHANUMERIC:    return "X";
   case COB_TYPE_NUMERIC_EDITED:  return "EDITED";
   case COB_TYPE_NATIONAL:        return "N";
   }
   sprintf (wrk,"Type %04X",type);
   return wrk;
}

COB_EXT_EXPORT int
CAPI (void *p1, ...)
{
   int      k,nargs,type,digits,scale,size,sign;
   cob_s64_t   val;
   char     *str, wrk[80],pic[24];

   nargs = cob_get_num_params();
   printf ("CAPI called with %d parameters\n",nargs);
   for(k=1; k <= nargs; k++) {
      type   = cob_get_param_type (k);
      digits = cob_get_param_digits (k);
      scale  = cob_get_param_scale (k);
      size   = cob_get_param_size (k);
      sign   = cob_get_param_sign (k);
      printf (" %d: %-8s ",k,getType(type));
      if (cob_get_param_constant(k)) {
         printf ("BY VALUE     ");
      } else {
         printf ("BY REFERENCE ");
      }
      if (type == COB_TYPE_ALPHANUMERIC) {
         sprintf (pic,"X(%d)",size);
         str = cob_get_picx_param (k, NULL, 0);
         printf("%-11s '%s'",pic,str);
         cob_free ((void*)str);
         cob_put_picx_param (k, "Bye!");
      } else if (type == COB_TYPE_NATIONAL) {
         sprintf (pic,"N(%d)",size); /* FIXME */
         printf ("exchange of national data is not supported yet");
      } else if (type == COB_TYPE_GROUP) {
         sprintf (pic,"(%d)",size);
         str = cob_get_grp_param (k, NULL, 0);
         printf ("%-11s '%.*s'",pic,size,str);
         cob_free ((void*)str);
         memset (wrk,' ',sizeof(wrk));
         memcpy (wrk,"Bye-Bye Birdie!",15);
         cob_put_grp_param (k, wrk, sizeof(wrk));
      } else if (type == COB_TYPE_NUMERIC_EDITED) {
         if (scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         val = cob_get_s64_param (k);
         printf ("%-11s %lld ",pic,val);
         val = val + 130;
         val = -val;
         cob_put_s64_param (k, val);
         cob_get_grp_param (k, wrk, sizeof(wrk));
         printf (" to %.*s",size,wrk);
      } else {
         if(scale > 0) {
            sprintf (pic,"%s9(%d)V9(%d)",sign?"S":"",digits-scale,scale);
         } else {
            sprintf (pic,"%s9(%d)",sign?"S":"",digits-scale);
         }
         val = cob_get_s64_param (k);
         printf ("%-11s %lld",pic,val);
         cob_put_s64_param (k, val + 3);
      }
      printf(";\n");
      fflush(stdout);
   }
   if (nargs > 2) {
      cob_put_s64_param (7, val + 3);
   }
   return 0;
}
]])

AT_CHECK([$COMPILE -Wno-unfinished prog.cob cmod.c], [0], [],
[prog.cob:31: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:32: warning: BY CONTENT assumed for alphanumeric item 'CHRX'
prog.cob:34: warning: BY CONTENT assumed for alphanumeric item 'GRPX'
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[CAPI called with 2 parameters
 1: BINARY   BY VALUE     S9(9)       2560;
 2: DISPLAY  BY VALUE     9(2)        16;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1280;
 2: EDITED   BY REFERENCE S9(5)V9(2)  -51277  to   511.47 ;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE S9(5)       1024;
CAPI called with 1 parameters
 1: BINARY   BY REFERENCE 9(9)        2560;
CAPI called with 2 parameters
 1: COMP-3   BY REFERENCE 9(8)        4096;
 2: EDITED   BY REFERENCE S9(5)V9(2)  51277  to   514.07-;
CAPI called with 4 parameters
 1: DISPLAY  BY REFERENCE S9(8)       8192;
 2: BINARY   BY REFERENCE S9(5)       1027;
 3: X        BY REFERENCE X(9)        'Hello';
 4: Group    BY REFERENCE (18)        'Hello    World    ';
CAPI called with 3 parameters
 1: COMP-3   BY REFERENCE 9(8)        4099;
 2: EDITED   BY REFERENCE S9(5)V9(2)  -51407  to   512.77 ;
 3: X        BY REFERENCE X(9)        'Bye!';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1283;
 2: EDITED   BY REFERENCE S9(5)V9(2)  51277  to   514.07-;
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1286;
 2: X        BY VALUE     X(9)        'Hello!';
CAPI called with 2 parameters
 1: BINARY   BY REFERENCE 9(5)        1289;
 2: X        BY VALUE     X(9)        'Hello!';
CAPI called with 1 parameters
 1: BINARY   BY VALUE     S9(9)       18;
CAPI called with 2 parameters
 1: Group    BY VALUE     (18)        'Bye-Bye Birdie!   ';
 2: BINARY   BY VALUE     S9(9)       18;
CAPI called with 2 parameters
 1: X        BY VALUE     X(9)        'Fred Fish';
 2: COMP-3   BY REFERENCE 9(8)        4102;
CAPI called with 1 parameters
 1: COMP-3   BY REFERENCE S9(7)V9(2)  1250;
CAPI called with 0 parameters
COMP3    is now 00004105;
COMP4    is now 0000001292;
BINFLD5S is now +01030;
CHRX     is now Hello!   ;
NE       is now   514.07-;
],
[libcob: prog.cob:21: warning: cob_put_s64_param: attempt to over-write constant parameter 1 with 2563
libcob: prog.cob:21: warning: cob_put_s64_param: attempt to over-write constant parameter 2 with 19
libcob: prog.cob:27: warning: cob_put_s64_param: parameter 7 is not within range of 4
libcob: prog.cob:28: warning: cob_put_s64_param: parameter 7 is not within range of 3
libcob: prog.cob:31: warning: cob_put_picx_param: attempt to over-write constant parameter 2 with 'Bye!'
libcob: prog.cob:32: warning: cob_put_picx_param: attempt to over-write constant parameter 2 with 'Bye!'
libcob: prog.cob:33: warning: cob_put_s64_param: attempt to over-write constant parameter 1 with 21
libcob: prog.cob:34: warning: cob_put_grp_param: attempt to over-write constant parameter 1
libcob: prog.cob:34: warning: cob_put_s64_param: attempt to over-write constant parameter 2 with 21
libcob: prog.cob:35: warning: cob_put_picx_param: attempt to over-write constant parameter 1 with 'Bye!'
])

AT_CLEANUP


AT_SETUP([DEFAULT ROUNDED MODE])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION  DIVISION.
       PROGRAM-ID.     prog.
       OPTIONS.
           DEFAULT ROUNDED NEAREST-EVEN.

       DATA            DIVISION.
       WORKING-STORAGE SECTION.
       01  x           PIC 9.

       PROCEDURE       DIVISION.
           COMPUTE x ROUNDED = 1.5
           DISPLAY x
           COMPUTE x ROUNDED = 2.5
           DISPLAY x
           .
])

AT_CHECK([$COMPILE -o prog prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[2
2
])

AT_CLEANUP


AT_SETUP([OCCURS INDEXED ASCENDING])
AT_KEYWORDS([occurs extension])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  DBI-RECORD-NAMEST.
           05  FILLER.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ACM            0315 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-MGL            0303 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZBL            0304 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZCC            0308 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZGL            0305 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZOO            0306 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZTR            0307 '.
       01  DBI-RECORD-NAMESR REDEFINES DBI-RECORD-NAMEST.
           05  DBI-RECORD-NAMES
                  OCCURS 7 TIMES
                  INDEXED BY REC-NAME-IDX
                  ASCENDING KEY IS DBI-RECORD-NAME
                  .
             10  DBI-RECORD-NAME PIC X(30).
             10  DBI-RECORD-CODE PIC 9(4).
             10  DBI-RECORD-DIR  PIC X.
       01  REC-NAME   PIC X(30).
       01  DBX-RECORD-NAMEST.
           05  FILLER.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ACM            0315 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-MGL            0303 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZBL            0304 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZCC            0308 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZGL            0305 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZOO            0306 '.
             10 FILLER PIC X(35)
                VALUE 'A-F-GEN-LEDGER-ZTR            0307 '.
       01  DBX-RECORD-NAMESR REDEFINES DBX-RECORD-NAMEST.
           05  DBX-RECORD-NAMES
                  OCCURS 7 TIMES
                  ASCENDING KEY IS DBX-RECORD-NAME
                  INDEXED BY REC-NAME-DBX
                  .
             10  DBX-RECORD-NAME PIC X(30).
             10  DBX-RECORD-CODE PIC 9(4).
             10  DBX-RECORD-DIR  PIC X.

       PROCEDURE DIVISION.
       MAIN.
           MOVE 'A-F-GEN-LEDGER-ZGL' TO REC-NAME.
           PERFORM FINDIT.
           MOVE 'JUNK' TO REC-NAME.
           PERFORM FINDIT.
           STOP RUN.

       FINDIT.
           SEARCH DBI-RECORD-NAMES
           AT END
               DISPLAY 'A ' REC-NAME ' is invalid.'
           WHEN REC-NAME = DBI-RECORD-NAME (REC-NAME-IDX)
               DISPLAY 'A ' REC-NAME ' is code '
                         DBI-RECORD-CODE (REC-NAME-IDX) '.'.

           SEARCH DBX-RECORD-NAMES
           AT END
               DISPLAY 'B ' REC-NAME ' is invalid.'
           WHEN REC-NAME = DBX-RECORD-NAME (REC-NAME-DBX)
               DISPLAY 'B ' REC-NAME ' is code '
                         DBX-RECORD-CODE (REC-NAME-DBX) '.'.
])

AT_CHECK([$COMPILE -frelax-syntax-checks prog.cob ], [0], [],
[prog.cob:26: warning: INDEXED should follow ASCENDING/DESCENDING
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[A A-F-GEN-LEDGER-ZGL             is code 0305.
B A-F-GEN-LEDGER-ZGL             is code 0305.
A JUNK                           is invalid.
B JUNK                           is invalid.
], [])

AT_CLEANUP



AT_SETUP([ZERO unsigned and negative binary subscript])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       77  UBIN        PIC  9(8) BINARY.
       77  SBIN        PIC S9(8) BINARY.
       77  UNUP        PIC  9(8).
       77  SNUP        PIC S9(8).

       01  TSTREC.
           05  TSTX PIC X(4) OCCURS 3 TIMES.
           05  TSTY PIC X(4) OCCURS 3 TIMES.

       PROCEDURE DIVISION.
           MOVE ALL 'A' TO TSTX(1).
           MOVE ALL 'B' TO TSTX(2).
           MOVE ALL 'C' TO TSTX(3).
           MOVE ALL '1' TO TSTY(1).
           MOVE ALL '2' TO TSTY(2).
           MOVE ALL '3' TO TSTY(3).
           MOVE 0  TO UNUP.
           DISPLAY "UNUP: " UNUP " is :" TSTY(UNUP) ":" UPON CONSOLE.
           MOVE 0  TO SNUP.
           DISPLAY "SNUP: " SNUP " is :" TSTY(SNUP) ":" UPON CONSOLE.
           MOVE 0  TO SBIN.
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
           MOVE -1 TO SBIN.
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
           MOVE 'xxx'   TO TSTY(SBIN).
           DISPLAY "SBIN: " SBIN " is :" TSTY(SBIN) ":" UPON CONSOLE.
      * The following would often core dump
           MOVE 0 TO UBIN.
           DISPLAY "UBIN: " UBIN " is :" TSTY(UBIN) ":" UPON CONSOLE.
           MOVE 'xxx'   TO TSTY(UBIN).
           MOVE 1 TO UBIN.
           DISPLAY "UBIN: " UBIN " is :" TSTY(UBIN) ":" UPON CONSOLE.
           STOP RUN.
])

# Safe run with runtime checks
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
[libcob: prog.cob:23: subscript of 'TSTY' out of bounds: 0
])

# Runtime checks disable, subscript may be zero or even negative
AT_CHECK([$COBC -x prog.cob -o prog_unsafe], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog_unsafe], [0],
[UNUP: 00000000 is :CCCC:
SNUP: +00000000 is :CCCC:
SBIN: +00000000 is :CCCC:
SBIN: -00000001 is :BBBB:
SBIN: -00000001 is :xxx :
UBIN: 00000000 is :CCCC:
UBIN: 00000001 is :1111:
], [])

AT_CLEANUP


AT_SETUP([Default Arithmetic (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A   PIC 9(3) VALUE 399.
       01 NUM-B   PIC 9(3) VALUE 211.
       01 NUM-C   PIC 9(3)V99 VALUE 212.34.
       01 NUMV1   PIC 9(3)V9.
       01 PICX    PIC X VALUE 'A'.
       01 RSLT    PIC 9(3).
       01 RSLTV1  PIC 9(3).9.
       01 RSLTV2  PIC 9(3).99.
      *
       PROCEDURE DIVISION.
       MAIN.
           COMPUTE RSLT = NUM-A + 1.1.
           DISPLAY 'Simple Compute  RSLT IS ' RSLT
           COMPUTE RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Single Variable RSLT IS ' RSLT
           COMPUTE RSLTV2, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv99 IS ' RSLTV2
           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv9  IS ' RSLTV1
           MOVE 0 TO RSLT
           ADD NUM-C TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C 10 TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           SUBTRACT NUM-C FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           SUBTRACT NUM-A -10 FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C TO RSLT GIVING RSLTV1.
           DISPLAY 'Add      RSLTv9  IS ' RSLTV1
           MULTIPLY NUM-A BY NUM-C GIVING RSLT.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           MULTIPLY RSLT BY NUM-C.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           DIVIDE NUM-A BY 10 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.
           DIVIDE RSLT BY 4 GIVING RSLTV1.
           DISPLAY 'Divide   RSLTv9  IS ' RSLTV1.
           DIVIDE RSLT BY 4 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.

           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Simple   RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (100.55 + -0.550))
                                -  (NUM-B / (10.11 * 10 - 1.1)))
                                  * (220 / 2.2)
           DISPLAY 'Complex  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (101 - 1))
                                -  (NUM-B / (10 * 10))) * (200 / 2)
           DISPLAY 'Reduced  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.
           MOVE NUM-A TO NUMV1.
           IF ((NUMV1 / (101 - 1))
              -  (NUM-B / (10 * 10))) * (200 / 2) EQUAL 188
              DISPLAY "Not Using ARITHMETIC-OSVS"
           ELSE
              DISPLAY "Using ARITHMETIC-OSVS"
           END-IF.
           STOP RUN.
])
AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Simple Compute  RSLT IS 400
Single Variable RSLT IS 188
Compute  RSLT    IS 188
Compute  RSLTv99 IS 188.00
Compute  RSLT    IS 188
Compute  RSLTv9  IS 188.0
Add      RSLT    IS 212
Add      RSLT    IS 621
Subtract RSLT    IS 408
Subtract RSLT    IS 019
Add      RSLTv9  IS 611.3
Multiply RSLT    IS 723
Multiply RSLT    IS 723
Divide   RSLT    IS 039
Divide   RSLTv9  IS 009.7
Divide   RSLT    IS 009
Simple   RSLT    IS 188 RSLTv9  IS 188.0
Complex  RSLT    IS 188 RSLTv9  IS 188.0
Reduced  RSLT    IS 188 RSLTv9  IS 188.0
Not Using ARITHMETIC-OSVS
], [])

AT_CLEANUP


AT_SETUP([Default Arithmetic Test (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  VAL                 PIC S9(7)V99 COMP-3 VALUE 20500.
       01  DIV1                PIC S9(7)V99 COMP-3 VALUE 0.9.
       01  DIV2                PIC S9(7)V99 COMP-3 VALUE 33.45.
       01  DIV3                PIC S9(7)V99 COMP-3 VALUE 9.
       01  MUL1                PIC S9(7)V99 COMP-3 VALUE 10.
       01  MUL2                PIC S9(7)V99 COMP-3 VALUE 5.
       01  MUL3                PIC S9(7)V99 COMP-3 VALUE 2.
       01  RES                 PIC S9(7)V99 COMP-3.
       PROCEDURE        DIVISION.
           COMPUTE RES = VAL / DIV1 / DIV2.
           DISPLAY 'RES = ' RES.
           COMPUTE RES ROUNDED = VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED = ' RES.
           COMPUTE RES = VAL * MUL1 / DIV3 / DIV2.
           DISPLAY 'RES MULT1 = ' RES.
           COMPUTE RES = VAL * MUL2 * MUL3 / DIV3 / DIV2.
           DISPLAY 'RES MULT2 = ' RES.
           COMPUTE RES = VAL / DIV1.
           DISPLAY 'RES 1 = ' RES.
           COMPUTE RES = RES / DIV2.
           DISPLAY 'RES F = ' RES.
           COMPUTE RES ROUNDED MODE AWAY-FROM-ZERO =
                VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED AWAY = ' RES.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[RES = +0000680.95
RES ROUNDED = +0000680.95
RES MULT1 = +0000680.95
RES MULT2 = +0000680.95
RES 1 = +0022777.77
RES F = +0000680.94
RES ROUNDED AWAY = +0000680.96
], [])

AT_CLEANUP


AT_SETUP([OSVS Arithmetic (1)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 NUM-A   PIC 9(3) VALUE 399.
       01 NUM-B   PIC 9(3) VALUE 211.
       01 NUM-C   PIC 9(3)V99 VALUE 212.34.
       01 NUMV1   PIC 9(3)V9.
       01 PICX    PIC X VALUE 'A'.
       01 RSLT    PIC 9(3).
       01 RSLTV1  PIC 9(3).9.
       01 RSLTV2  PIC 9(3).99.
      *
       PROCEDURE DIVISION.
       MAIN.
           COMPUTE RSLT = NUM-A + 1.1.
           DISPLAY 'Simple Compute  RSLT IS ' RSLT
           COMPUTE RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Single Variable RSLT IS ' RSLT
           COMPUTE RSLTV2, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv99 IS ' RSLTV2
           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Compute  RSLT    IS ' RSLT
           DISPLAY 'Compute  RSLTv9  IS ' RSLTV1
           MOVE 0 TO RSLT
           ADD NUM-C TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C 10 TO RSLT.
           DISPLAY 'Add      RSLT    IS ' RSLT.
           SUBTRACT NUM-C FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           SUBTRACT NUM-A -10 FROM RSLT.
           DISPLAY 'Subtract RSLT    IS ' RSLT.
           MOVE 0 TO RSLT
           ADD NUM-A NUM-C TO RSLT GIVING RSLTV1.
           DISPLAY 'Add      RSLTv9  IS ' RSLTV1
           MULTIPLY NUM-A BY NUM-C GIVING RSLT.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           MULTIPLY RSLT BY NUM-C.
           DISPLAY 'Multiply RSLT    IS ' RSLT.
           DIVIDE NUM-A BY 10 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.
           DIVIDE RSLT BY 4 GIVING RSLTV1.
           DISPLAY 'Divide   RSLTv9  IS ' RSLTV1.
           DIVIDE RSLT BY 4 GIVING RSLT.
           DISPLAY 'Divide   RSLT    IS ' RSLT.

           COMPUTE RSLTV1, RSLT = ((NUM-A / 100) - (NUM-B / 100)) * 100
           DISPLAY 'Simple   RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (100.55 + -0.550))
                                -  (NUM-B / (10.11 * 10 - 1.1)))
                                  * (220 / 2.2)
           DISPLAY 'Complex  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.

           COMPUTE RSLTV1, RSLT = ((NUM-A / (101 - 1))
                                -  (NUM-B / (10 * 10))) * (200 / 2)
           DISPLAY 'Reduced  RSLT    IS ' RSLT
                           ' RSLTv9  IS ' RSLTV1.
           MOVE NUM-A TO NUMV1.
           IF ((NUMV1 / (101 - 1))
              -  (NUM-B / (10 * 10))) * (200 / 2) EQUAL 188
              DISPLAY "Not Using ARITHMETIC-OSVS"
           ELSE
              DISPLAY "Using ARITHMETIC-OSVS"
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE -farithmetic-osvs prog.cob], [0], [],
[prog.cob: in paragraph 'MAIN':
prog.cob:19: warning: precision of result may change with arithmetic-osvs
prog.cob:21: warning: precision of result may change with arithmetic-osvs
prog.cob:24: warning: precision of result may change with arithmetic-osvs
prog.cob:31: warning: precision of result may change with arithmetic-osvs
prog.cob:35: warning: precision of result may change with arithmetic-osvs
prog.cob:38: warning: precision of result may change with arithmetic-osvs
prog.cob:51: warning: precision of result may change with arithmetic-osvs
prog.cob:55: warning: precision of result may change with arithmetic-osvs
prog.cob:61: warning: precision of result may change with arithmetic-osvs
prog.cob:66: warning: precision of result may change with arithmetic-osvs
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Simple Compute  RSLT IS 400
Single Variable RSLT IS 100
Compute  RSLT    IS 188
Compute  RSLTv99 IS 188.00
Compute  RSLT    IS 180
Compute  RSLTv9  IS 180.0
Add      RSLT    IS 212
Add      RSLT    IS 621
Subtract RSLT    IS 408
Subtract RSLT    IS 019
Add      RSLTv9  IS 611.3
Multiply RSLT    IS 723
Multiply RSLT    IS 723
Divide   RSLT    IS 039
Divide   RSLTv9  IS 009.7
Divide   RSLT    IS 009
Simple   RSLT    IS 180 RSLTv9  IS 180.0
Complex  RSLT    IS 188 RSLTv9  IS 188.0
Reduced  RSLT    IS 180 RSLTv9  IS 180.0
Using ARITHMETIC-OSVS
], [])

AT_CLEANUP


AT_SETUP([OSVS Arithmetic Test (2)])
AT_KEYWORDS([runmisc])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE SECTION.
       01  VAL                 PIC S9(7)V99 COMP-3 VALUE 20500.
       01  DIV1                PIC S9(7)V99 COMP-3 VALUE 0.9.
       01  DIV2                PIC S9(7)V99 COMP-3 VALUE 33.45.
       01  DIV3                PIC S9(7)V99 COMP-3 VALUE 9.
       01  MUL1                PIC S9(7)V99 COMP-3 VALUE 10.
       01  MUL2                PIC S9(7)V99 COMP-3 VALUE 5.
       01  MUL3                PIC S9(7)V99 COMP-3 VALUE 2.
       01  RES                 PIC S9(7)V99 COMP-3.
       PROCEDURE        DIVISION.
           COMPUTE RES = VAL / DIV1 / DIV2.
           DISPLAY 'RES = ' RES.
           COMPUTE RES ROUNDED = VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED = ' RES.
           COMPUTE RES = VAL * MUL1 / DIV3 / DIV2.
           DISPLAY 'RES MULT1 = ' RES.
           COMPUTE RES = VAL * MUL2 * MUL3 / DIV3 / DIV2.
           DISPLAY 'RES MULT2 = ' RES.
           COMPUTE RES = VAL / DIV1.
           DISPLAY 'RES 1 = ' RES.
           COMPUTE RES = RES / DIV2.
           DISPLAY 'RES F = ' RES.
           COMPUTE RES ROUNDED MODE AWAY-FROM-ZERO =
                VAL / DIV1 / DIV2.
           DISPLAY 'RES ROUNDED AWAY = ' RES.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=ibm prog.cob], [0], [],
[prog.cob:16: warning: precision of result may change with arithmetic-osvs
prog.cob:18: warning: precision of result may change with arithmetic-osvs
prog.cob:20: warning: precision of result may change with arithmetic-osvs
prog.cob:22: warning: precision of result may change with arithmetic-osvs
prog.cob:28: warning: precision of result may change with arithmetic-osvs
])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[RES = +000068094
RES ROUNDED = +000068095
RES MULT1 = +000068094
RES MULT2 = +000068095
RES 1 = +002277777
RES F = +000068094
RES ROUNDED AWAY = +000068095
], [])

AT_CLEANUP


AT_SETUP([SET CONSTANT directive])
AT_KEYWORDS([misc directives extensions])

# The SET CONSTANT directive defines a level78 variable
# for the current compilation unit

# original MF extension: $SET CONSTANT
AT_DATA([prog.cob], [
       $SET CONSTANT DOGGY "Barky"
       $SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       $SET CONSTANT PONY "White"
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension: >>SET CONSTANT
AT_DATA([prog2.cob], [
       >>SET CONSTANT DOGGY "Barky"
       >>SET CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog2.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>SET CONSTANT PONY "White"
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

# OpenCOBOL/GnuCOBOL extension: >>DEFINE CONSTANT
AT_DATA([prog3.cob], [
       >>DEFINE CONSTANT DOGGY "Barky"
       >>DEFINE CONSTANT PONY "Blacky"
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog3.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       77  MYHORSE   PIC X(7) VALUE PONY.
       >>DEFINE CONSTANT PONY "White" OVERRIDE
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           DISPLAY "My Horse is " MYHORSE ";".
           DISPLAY "My little pony is " PONY ".".
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (we should add a warning)
AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is Blacky.
], [])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])

# Note: MF does not redefine a value via SET CONSTANT
# the first definitions wins (we should add a warning)
AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is Blacky.
], [])

AT_CHECK([$COMPILE -fdefine-constant-directive=ok prog3.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog3], [0],
[Your Dog's name is Barky;
The Dog's name is Barky ;
My Horse is Blacky ;
My little pony is White.
], [])

AT_CLEANUP


AT_SETUP([DEFINE OVERRIDE])
AT_KEYWORDS([CDF directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       >>SET CONSTANT DOGGY "Pluto"
       >>SET CONSTANT PONY "Piper"
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.

       >>DEFINE DPONY  AS PARAMETER OVERRIDE
       >>IF DPONY IS NOT DEFINED
       >>DEFINE DPONY AS "No Dpony"
       >>END-IF
       01  CNSPONY     CONSTANT FROM DPONY.

       >>DEFINE ENVPONY AS PARAMETER OVERRIDE
       >>IF ENVPONY IS NOT DEFINED
       >>DEFINE ENVPONY AS "No EnvPony"
       >>END-IF
       01  HORSE       CONSTANT FROM ENVPONY.
       77  MYHORSE    PIC X(12) VALUE HORSE  .
       77  MYPONYENV  PIC X(12).
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "ENVPONY" UPON ENVIRONMENT-NAME
           ACCEPT  MYPONYENV FROM ENVIRONMENT-VALUE.
           DISPLAY "ENVPONY env var set to " MYPONYENV ";".
           DISPLAY "1st Dog's name is " DOGGY ";".
           DISPLAY "2nd Dog's name is " PONY ";".
       >>IF ENVPONY IS DEFINED
           DISPLAY "ENVPONY is DEFINED as " HORSE ";".
       >>ELSE
           DISPLAY "ENVPONY was NOT DEFINED;".
       >>END-IF
           DISPLAY "DPONY set to " CNSPONY ";".
       >>IF ENVPONY = "WHITE"
       >>DEFINE CONSTANT PONY AS "White Horse" OVERRIDE
       >>ELSE
       >>DEFINE CONSTANT PONY AS "default Dirty" OVERRIDE
       >>END-IF
           DISPLAY "My pony is " PONY ";".
       >>IF DPONY IS DEFINED
           DISPLAY "DPONY is DEFINED as " CNSPONY ";".
       >>END-IF
           STOP RUN.
])

AT_CHECK([ENVPONY=WHITE $COMPILE prog.cob -fdefine-constant-directive=ok -DDPONY=Stallone], [0], [], [])

AT_CHECK([ENVPONY=WHITE ./prog], [0],
[ENVPONY env var set to WHITE       ;
1st Dog's name is Pluto;
2nd Dog's name is Piper;
ENVPONY is DEFINED as WHITE;
DPONY set to Stallone;
My pony is White Horse;
DPONY is DEFINED as Stallone;
], [])

AT_CLEANUP


AT_SETUP([DEFINE Defaults])
AT_KEYWORDS([CDF directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       >>SET CONSTANT DOGGY "Pluto"
       >>SET CONSTANT PONY "Piper"
       WORKING-STORAGE SECTION.
       01  THEDOG    PIC X(6) VALUE DOGGY.

       >>DEFINE DPONY  AS PARAMETER OVERRIDE
       >>IF DPONY IS NOT DEFINED
       >>DEFINE DPONY AS "No Dpony"
       >>END-IF
       01  CNSPONY     CONSTANT FROM DPONY.

       >>DEFINE ENVPONY AS PARAMETER OVERRIDE
       >>IF ENVPONY IS NOT DEFINED
       >>DEFINE ENVPONY AS "No EnvPony"
       >>END-IF
       01  HORSE       CONSTANT FROM ENVPONY.
       77  MYHORSE    PIC X(12) VALUE HORSE  .
       77  MYPONYENV  PIC X(12).
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "ENVPONY" UPON ENVIRONMENT-NAME
           ACCEPT  MYPONYENV FROM ENVIRONMENT-VALUE.
           DISPLAY "ENVPONY env var set to " MYPONYENV ";".
           DISPLAY "1st Dog's name is " DOGGY ";".
           DISPLAY "2nd Dog's name is " PONY ";".
       >>IF ENVPONY IS DEFINED
           DISPLAY "ENVPONY is DEFINED as " HORSE ";".
       >>ELSE
           DISPLAY "ENVPONY was NOT DEFINED;".
       >>END-IF
           DISPLAY "DPONY set to " CNSPONY ";".
       >>IF ENVPONY = "WHITE"
       >>DEFINE CONSTANT PONY AS "White Horse" OVERRIDE
       >>ELSE
       >>DEFINE CONSTANT PONY AS "default Dirty" OVERRIDE
       >>END-IF
           DISPLAY "My pony is " PONY ";".
       >>IF DPONY IS DEFINED
           DISPLAY "DPONY is DEFINED as " CNSPONY ";".
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -fdefine-constant-directive=ok], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[ENVPONY env var set to             ;
1st Dog's name is Pluto;
2nd Dog's name is Piper;
ENVPONY is DEFINED as No EnvPony;
DPONY set to No Dpony;
My pony is default Dirty;
DPONY is DEFINED as No Dpony;
], [])

AT_CLEANUP


AT_SETUP([78 VALUE])
AT_KEYWORDS([CONSTANT misc])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       78  DOGGY     VALUE "Barky".
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
          05  FLD4   PIC X(4).
          05  FLD5   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH OF PICX) -4.
       01  THEDOG    PIC X(6) VALUE DOGGY.
       78  DIV1      VALUE 100 / 3.
       78  NUM2      VALUE 1 + 2 * 3.
       LINKAGE SECTION.
       01  XMYREC.
          05  XFLD1   PIC 9(2).
          05  XFLD2   PIC X(7).
             78  XPOS3    VALUE NEXT.
          05  XFLD3   PIC X(2) OCCURS 5 TIMES.
             78  XPOS4    VALUE NEXT.
          05  XFLD4   PIC X(4).
          05  XFLD5   PIC X(4).
       78  XSTRT4     VALUE START OF XFLD4.
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "DIV1 is " DIV1.
           DISPLAY "HUN  is " HUN.
           DISPLAY "HUN2 is " HUN2.
           MOVE NUM2 TO FLD1
           IF FLD1 = 9
             DISPLAY "NUM2 is " NUM2 " left to right precedence."
           ELSE
             DISPLAY "NUM2 is " NUM2 " normal precedence."
           END-IF.
           DISPLAY "XFLD3 starts at " XPOS3.
           DISPLAY "XFLD4 starts at " XSTRT4.
           DISPLAY "XFLD4 starts at " XPOS4.
           DISPLAY "Your Dog's name is " DOGGY ";".
           DISPLAY "The Dog's name is " THEDOG ";".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[DIV1 is 33
HUN  is 143
HUN2 is 1855
NUM2 is 9 left to right precedence.
XFLD3 starts at 9
XFLD4 starts at 19
XFLD4 starts at 11
Your Dog's name is Barky;
The Dog's name is Barky ;
], [])

AT_CLEANUP


AT_SETUP([01 CONSTANT])
AT_KEYWORDS([misc])

AT_DATA([prog.cob], [
       >>DEFINE MYDOG AS "Piper"
       >>DEFINE MYNUM1 AS 11
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MYREC.
          05  FLD1   PIC 9(2).
          05  FLD2   PIC X(7).
          05  FLD3   PIC X(2) OCCURS 5 TIMES.
          05  FLD4   PIC X(4).
          05  FLD5   PIC X(4).
       01  PICX      PIC XXX VALUE 'Abc'.
       01  CAT       CONSTANT  'Cat '.
       01  DOG       CONSTANT  'Dog '.
       01  YARD      CONSTANT  CAT & "& " & DOG.
       78  HUN       VALUE 10 * (10 + LENGTH OF PICX) + 12.35-2+3.
       78  HUN2      VALUE HUN * (10 + LENGTH OF PICX) -4.
       78  DIV1      VALUE 100 / 3.
       78  NUM2      VALUE 1 + 2 * 3.
       01  CON3      CONSTANT (((1 + 2) * NUM2) - 4).
       01  CON4      CONSTANT AS 3.1416 + CON3.
       01  CON5      CONSTANT 1 + 2 * 3.
       01  DOGNAME   CONSTANT FROM MYDOG.
       01  NUM1      CONSTANT FROM MYNUM1.
       01  CON6      CONSTANT AS CON5 + NUM1.
       >> IF NUM2 DEFINED  *> optional passed from command line
       01  NUM2      CONSTANT FROM MYNUM2.
       >> END-IF
      *
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY "CAT  is '" CAT "'".
           DISPLAY "Yard is '" YARD "'".
           DISPLAY "DIV1 is " DIV1.
           DISPLAY "HUN  is " HUN.
           DISPLAY "HUN2 is " HUN2.
           MOVE NUM2 TO FLD1
           IF FLD1 = 9
             DISPLAY "78 VALUE has simple left to right precedence."
           ELSE
             DISPLAY "78 VALUE is " NUM2 " normal precedence."
           END-IF.
           MOVE CON5 TO FLD1
           IF FLD1 = 7
             DISPLAY "01 CONSTANT has normal operator precedence."
           ELSE
             DISPLAY "01 CONSTANT is " CON5 " left to right precedence."
           END-IF.
           DISPLAY "CON3 is " CON3.
           DISPLAY "CON4 is " CON4 " vs " 3.141596
                   " & " -2.189 " & " +12.
           DISPLAY "CON6 is " CON6 "."
           DISPLAY "My Dog's name is " DOGNAME ";".
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[CAT  is 'Cat '
Yard is 'Cat & Dog '
DIV1 is 33
HUN  is 143
HUN2 is 1855
78 VALUE has simple left to right precedence.
01 CONSTANT has normal operator precedence.
CON3 is 23
CON4 is 26 vs 3.141596 & -2.189 & +12
CON6 is 18.
My Dog's name is Piper;
], [])

AT_CLEANUP


AT_SETUP([DISPLAY UPON])
AT_KEYWORDS([CHAINING PRINTER PIPE CONSOLE SYSERR SYSPCH SYSPUNCH
COB_DISPLAY_PRINT_PIPE COB_DISPLAY_PRINT_FILE COB_DISPLAY_PUNCH_FILE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           PRINTER IS PRINTER.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 note PIC X(05).
       PROCEDURE DIVISION CHAINING note.
       DISPLAY "This is sent to CONSOLE " note UPON CONSOLE.
       DISPLAY "This is sent to SYSERR  " note UPON SYSERR.
       DISPLAY "This is sent to PRINTER " note UPON PRINTER.
       DISPLAY "This is also sent to CONSOLE " note UPON CONSOLE.
       DISPLAY "This is also sent to SYSERR  " note UPON SYSERR.
       DISPLAY "This is also sent to PRINTER " note UPON PRINTER.
       DISPLAY "This is sent to SYSPUNCH " note UPON SYSPUNCH
            ON EXCEPTION DISPLAY 'NO ...'        UPON SYSERR.
       DISPLAY "This is also sent to SYSPUNCH " note UPON SYSPCH
            ON EXCEPTION DISPLAY ' ... SYSPUNCH' UPON SYSERR.
       STOP RUN RETURNING 0.
])

AT_CHECK([$COMPILE -std=ibm prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog PLAIN], [0],
[This is sent to CONSOLE PLAIN
This is sent to PRINTER PLAIN
This is also sent to CONSOLE PLAIN
This is also sent to PRINTER PLAIN
],
[This is sent to SYSERR  PLAIN
This is also sent to SYSERR  PLAIN
libcob: prog.cob:18: warning: COB_DISPLAY_PUNCH_FILE is invalid, output to SYSPUNCH skipped
NO ...
 ... SYSPUNCH
])

AT_CHECK([COB_DISPLAY_PRINT_PIPE='cat >>prt.log' \
COB_DISPLAY_PUNCH_FILE='punch.out' \
$COBCRUN_DIRECT ./prog PIPE.], [0],
[This is sent to CONSOLE PIPE.
This is also sent to CONSOLE PIPE.
],
[This is sent to SYSERR  PIPE.
This is also sent to SYSERR  PIPE.
])

AT_CHECK([COB_DISPLAY_PRINT_FILE='prt.log' \
COB_DISPLAY_PUNCH_FILE='punch.out' \
$COBCRUN_DIRECT ./prog PRINT], [0],
[This is sent to CONSOLE PRINT
This is also sent to CONSOLE PRINT
],
[This is sent to SYSERR  PRINT
This is also sent to SYSERR  PRINT
])

AT_CAPTURE_FILE(./prt.log)

AT_DATA([reference],
[This is sent to PRINTER PIPE.
This is also sent to PRINTER PIPE.
This is sent to PRINTER PRINT
This is also sent to PRINTER PRINT
])

AT_CHECK([diff reference prt.log], [0], [], [],

# Previous test "failed" --> check if EOL of PIPE is the issue

AT_CHECK([sed -e 's/PIPE.\r/PIPE./g' prt.log > prt2.log], [0], [], [])
AT_CHECK([diff reference prt2.log], [0], [], [])
)

AT_CAPTURE_FILE(./punch.out)

AT_DATA([reference],
[This is sent to SYSPUNCH PRINT
This is also sent to SYSPUNCH PRINT
])

AT_CHECK([diff reference punch.out], [0], [], [])

AT_CLEANUP


AT_SETUP([FLOAT-DECIMAL w/o SIZE ERROR])
AT_KEYWORDS([Numeric runmisc
FLOAT-DECIMAL-16 FLOAT-DECIMAL-34
DISPLAY COMPUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  FD16                        USAGE FLOAT-DECIMAL-16.
       01  SV16                        USAGE FLOAT-DECIMAL-16.
       01  FD34                        USAGE FLOAT-DECIMAL-34.
       01  SV34                        USAGE FLOAT-DECIMAL-34.

       PROCEDURE DIVISION.
       CND-000.
           DISPLAY "--- FLOAT-DECIMAL-34 ---"
           COMPUTE FD34 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " FD34

           COMPUTE FD34 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " FD34
           MOVE ZERO TO FD34.
           COMPUTE FD34 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " FD34 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- FLOAT-DECIMAL-16 ---"
           COMPUTE FD16 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " FD16

           COMPUTE FD16 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " FD16
           MOVE ZERO TO FD16.
           COMPUTE FD16 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " FD16 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 + 1 / 3 ---"
           MOVE -1 TO FD16, FD34.
           COMPUTE FD34 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "FD34: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD34: " FD34 " IS OK"
           END-COMPUTE.
           COMPUTE FD16 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "FD16: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD16: " FD16 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 ---"
           MOVE -1 TO FD16, FD34.
           COMPUTE FD34 = 99
                   ON SIZE ERROR DISPLAY "FD34: " FD34 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD34: " FD34 " IS OK"
           END-COMPUTE.
           COMPUTE FD16 = 99
                   ON SIZE ERROR DISPLAY "FD16: " FD16 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "FD16: " FD16 " IS OK"
           END-COMPUTE.

       CND-100-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test overflow ---"
           MOVE 9900000000000 TO FD16, FD34.
           PERFORM 390 TIMES
             MOVE FD16 TO SV16
             COMPUTE FD16 = FD16 * 10
                    ON SIZE ERROR GO TO CND-100-ERR
             END-COMPUTE
             IF FD16 < 9.0
               DISPLAY "FD16: " FD16 " IS Wrong"
               GO TO CND-100-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD16: " FD16 " IS OK".
           GO TO CND-200-OK.
       CND-100-ERR.
           DISPLAY "FD16: after " SV16 " SIZE ERROR".

       CND-200-OK.
           MOVE 9900000000000 TO FD16, FD34.
           PERFORM 6500 TIMES
             MOVE FD34 TO SV34
             COMPUTE FD34 = FD34 * 10
                    ON SIZE ERROR GO TO CND-200-ERR
             END-COMPUTE
             IF FD34 < 9.0
               GO TO CND-200-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD34: " FD34 " IS OK".
           GO TO CND-380-OK.
       CND-200-ERR.
           DISPLAY "FD34: after " SV34 " SIZE ERROR".

       CND-380-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test underflow ---"
           MOVE 0.000000099 TO FD16, FD34.
           PERFORM 400 TIMES
             MOVE FD16 TO SV16
             COMPUTE FD16 = FD16 / 10
                    ON SIZE ERROR GO TO CND-300-ERR
             END-COMPUTE
             IF FD16 = 0.0
               GO TO CND-300-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD16: " FD16 " IS OK".
           GO TO CND-400-OK.
       CND-300-ERR.
           DISPLAY "FD16: after " SV16 " SIZE ERROR".

       CND-400-OK.
           MOVE 0.000000099 TO FD16, FD34.
           PERFORM 6600 TIMES
             MOVE FD34 TO SV34
             COMPUTE FD34 = FD34 / 10.0
                    ON SIZE ERROR GO TO CND-400-ERR
             END-COMPUTE
             IF FD34 = 0.0
               GO TO CND-400-ERR
             END-IF
           END-PERFORM.
           DISPLAY "FD34: " FD34 " IS OK".
           GO TO CND-999.
       CND-400-ERR.
           DISPLAY "FD34: after " SV34 " SIZE ERROR".

       CND-999.
           STOP RUN.
           END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[--- FLOAT-DECIMAL-34 ---
A: 9216586.861751152073732718894009216
B: 5305036.78779840848806366047745358
Z: 476.1904761904761904761904761904761 IS OK
    ...
--- FLOAT-DECIMAL-16 ---
A: 9216586.861751152
B: 5305036.787798408
Z: 476.1904761904761 IS OK
    ...
--- 99 + 1 / 3 ---
FD34: 99.33333333333333333333333333333333 IS OK
FD16: 99.33333333333333 IS OK
    ...
--- 99 ---
FD34: 99 IS OK
FD16: 99 IS OK
    ...
--- Test overflow ---
FD16: after 99E369 SIZE ERROR
FD34: after 99E6111 SIZE ERROR
    ...
--- Test underflow ---
FD16: after 99E-398 SIZE ERROR
FD34: after 99E-6176 SIZE ERROR
], [])

AT_CLEANUP


AT_SETUP([FLOAT-SHORT / FLOAT-LONG w/o SIZE ERROR])
AT_KEYWORDS([Numeric runmisc
COMP-1 COMP-2
DISPLAY COMPUTE])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  CMP1                        COMP-1.
       01  SV1                         COMP-1.
       01  CMP2                        COMP-2.
       01  SV2                         COMP-2.

       PROCEDURE DIVISION.
       CND-000.

           DISPLAY "--- COMP-1 ---"
           COMPUTE CMP1 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
           DISPLAY "A: " CMP1
           COMPUTE CMP1 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           DISPLAY "B: " CMP1
           MOVE ZERO TO CMP1.
           COMPUTE CMP1 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "Z: " CMP1 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- COMP-2 ---"
           COMPUTE CMP2 = (((1.0E7 / 2.1E0) / 3.1E0) - 5.0E-1) * 6.0E0
      *>   because of possible rounding of intermediates and different
      *>   precision depending on math library / version: plain DISPLAY
           IF CMP2 >= 9216586.86175114 AND <= 9216586.86175116
             DISPLAY "A ~ 9216586.86175115"
           ELSE
             DISPLAY "A: " CMP2
           END-IF
           COMPUTE CMP2 = (((1.0E7 / 2.9E0) / 3.9E0) - 5.0E-1) * 6.0E0
           IF CMP2 >= 5305036.7877983 AND <= 5305036.7877985
             DISPLAY "B ~ 5305036.787798408"
           ELSE
             DISPLAY "B: " CMP2
           END-IF
           MOVE ZERO TO CMP2.
           COMPUTE CMP2 = 1.0E3 / 2.1E0
                   ON SIZE ERROR DISPLAY "Z: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR
      *>        see note above
                IF CMP2 >= 476.1904761904760 AND <= 476.1904761904763
                  DISPLAY "Z ~ 476.1904761904761 IS OK"
                ELSE
                  DISPLAY "Z: " CMP2 " IS OK"
                END-IF
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 + 1 / 3 ---"
           MOVE -1 TO CMP1, CMP2.
           COMPUTE CMP1 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "CMP1: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP1: " CMP1 " IS OK"
           END-COMPUTE.
           COMPUTE CMP2 = 99 + 1 / 3
                   ON SIZE ERROR DISPLAY "CMP2: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP2: " CMP2 " IS OK"
           END-COMPUTE.

           DISPLAY "    ..."
           DISPLAY "--- 99 ---"
           MOVE -1 TO CMP1, CMP2.
           COMPUTE CMP1 = 99
                   ON SIZE ERROR DISPLAY "CMP1: " CMP1 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP1: " CMP1 " IS OK"
           END-COMPUTE.
           COMPUTE CMP2 = 99
                   ON SIZE ERROR DISPLAY "CMP2: " CMP2 " SIZE ERROR"
               NOT ON SIZE ERROR DISPLAY "CMP2: " CMP2 " IS OK"
           END-COMPUTE.

       CND-100-OK.
           DISPLAY "    ..."
           DISPLAY "--- Test overflow ---"

           MOVE 990000 TO CMP1.
           PERFORM 6500 TIMES
             MOVE CMP1 TO SV1
             COMPUTE CMP1 = CMP1 * 10
                    ON SIZE ERROR GO TO CND-350-ERR
             END-COMPUTE
             IF CMP1 < 9.0
               GO TO CND-350-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP1: " CMP1 " IS OK".
           GO TO CND-350-OK.
       CND-350-ERR.
           DISPLAY "CMP1: after " SV1 " SIZE ERROR".

       CND-350-OK.
           MOVE 9900000000 TO CMP2.
           PERFORM 6500 TIMES
             MOVE CMP2 TO SV2
             COMPUTE CMP2 = CMP2 * 10
                    ON SIZE ERROR GO TO CND-380-ERR
             END-COMPUTE
             IF CMP2 < 9.0
               GO TO CND-380-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP2: " CMP2 " IS OK".
           GO TO CND-500-OK.
       CND-380-ERR.
      *>   because of possible rounding of intermediates and different
      *>   precision depending on math library / version: plain DISPLAY
           IF SV2 >= 9.899999999999E+307 AND
                  <= 9.900000000001E+307
             DISPLAY "CMP2: after ~ 9.899999999999781E+307 SIZE ERROR"
           ELSE
             DISPLAY "CMP2: after " SV2 " SIZE ERROR"
           END-IF
           .

       CND-500-OK.
           MOVE 0.000000099 TO CMP1.
           PERFORM 350 TIMES
             MOVE CMP1 TO SV1
             COMPUTE CMP1 = CMP1 / 10.0
                    ON SIZE ERROR GO TO CND-500-ERR
             END-COMPUTE
             IF CMP1 = 0.0
               GO TO CND-500-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP1: " CMP1 " IS OK".
           GO TO CND-600-OK.
       CND-500-ERR.
           DISPLAY "CMP1: after " SV1 " SIZE ERROR".

       CND-600-OK.
           MOVE 0.000000099 TO CMP2.
           PERFORM 350 TIMES
             MOVE CMP2 TO SV2
             COMPUTE CMP2 = CMP2 / 10.0
                    ON SIZE ERROR GO TO CND-600-ERR
             END-COMPUTE
             IF CMP2 = 0.0
               GO TO CND-600-ERR
             END-IF
           END-PERFORM.
           DISPLAY "CMP2: " CMP2 " IS OK".
           GO TO CND-600-XIT.
       CND-600-ERR.
           IF SV2 >= 9.8813129168249E-324 AND <= 9.881312916825E-324
             DISPLAY "CMP2: after ~ 9.881312916824931E-324 SIZE ERROR"
           ELSE
             DISPLAY "CMP2: after " SV2 " SIZE ERROR"
           END-IF
           .
       CND-600-XIT.

       CND-999.
           STOP RUN.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
[--- COMP-1 ---
A: 9216587
B: 5305037
Z: 476.19049 IS OK
    ...
--- COMP-2 ---
A ~ 9216586.86175115
B ~ 5305036.787798408
Z ~ 476.1904761904761 IS OK
    ...
--- 99 + 1 / 3 ---
CMP1: 99.333336 IS OK
CMP2: 99.33333333333333 IS OK
    ...
--- 99 ---
CMP1: 99 IS OK
CMP2: 99 IS OK
    ...
--- Test overflow ---
CMP1: after 9.8999983E+37 SIZE ERROR
CMP2: after ~ 9.899999999999781E+307 SIZE ERROR
CMP1: after 1.4012985E-45 SIZE ERROR
CMP2: after ~ 9.881312916824931E-324 SIZE ERROR
], [])

AT_CLEANUP


AT_SETUP([FLOAT-SHORT with SIZE ERROR])
AT_KEYWORDS([COMP-1])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.
      *------------------------
       77 counter             pic s9(4) binary value zero.
      * FLOAT-SHORT (if binary-comp-1 is not active)
       77 floatValue          COMP-1  value 2.
       77 lastFloatValue      COMP-1.

      ******************************************************************
       procedure division.
       main section.
           perform varying counter from 1 by 1 until
                           counter > 130
      *>      display 'counter: ' counter ', value: ' floatValue
              compute floatValue = floatValue * 2
                   ON SIZE ERROR
                      display 'SIZE ERROR, last value = ' floatValue
                      exit perform
               not ON SIZE ERROR
                      if floatValue > lastFloatValue
                         move floatValue to lastFloatValue
                      else
                         display 'math ERROR, last value > current: '
                                 lastFloatValue ' > ' floatValue
                         exit perform
                      end-if
              end-compute
           end-perform
           if counter not = 127
              display 'counter is ' counter
           end-if

           goback.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0],
[SIZE ERROR, last value = 1.7014118E+38
], [])

AT_CLEANUP


AT_SETUP([FLOAT-LONG with SIZE ERROR])
AT_KEYWORDS([COMP-2])

AT_DATA([prog.cob], [
       identification division.
       program-id. prog.

       data division.
       working-storage section.
      *------------------------
       77 counter             pic s9(4) binary value zero.
      * FLOAT-LONG
       77 doubleValue         COMP-2 value 2.
       77 lastDoubleValue     COMP-2.

      ******************************************************************
       procedure division.
       main section.
           perform varying counter from 1 by 1 until
                           counter > 1060
      *>      display 'counter: ' counter ', value: ' doubleValue
              compute doubleValue = doubleValue * 2
                   ON SIZE ERROR
                      display 'SIZE ERROR raised'
                              with no advancing upon syserr
                      end-display
                      display 'SIZE ERROR, last value = ' doubleValue
                              upon sysout
                      end-display
                      exit perform
               not ON SIZE ERROR
                      if doubleValue > lastdoubleValue
                         move doubleValue to lastdoubleValue
                      else
                         display 'math ERROR, last value > current: '
                                 lastdoubleValue ' > ' doubleValue
                                 upon syserr
                         end-display
                         exit perform
                      end-if
              end-compute
           end-perform
           if not (counter >= 1023 and <=1025)
              display ' '                   upon syserr
              display 'counter is ' counter upon syserr
           end-if

           goback.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
# note: the actual value is not checked as this depends on intermediate rounding
AT_CHECK([./prog], [0], ignore, [SIZE ERROR raised])

AT_CLEANUP


AT_SETUP([EC-SIZE-ZERO-DIVIDE])
AT_KEYWORDS([misc fundamental exceptions
DIVIDE COMPUTE EXCEPTION-STATUS])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9 VALUE 0.
       01  y PIC 9 VALUE 0.

       PROCEDURE DIVISION.
           DIVIDE x BY y GIVING y
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-ZERO-DIVIDE'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           SET LAST EXCEPTION TO OFF
           IF FUNCTION EXCEPTION-STATUS NOT = SPACES
              DISPLAY 'Exception is not empty after reset: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           MOVE 0 TO y
           COMPUTE y = x - 1 / y + 6.5
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-ZERO-DIVIDE'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([EC-SIZE-OVERFLOW])
AT_KEYWORDS([misc fundamental exceptions])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  x PIC 9 VALUE 1.
       01  y PIC 9.

       PROCEDURE DIVISION.
      *    raise exception checked in previous test
      *    as it may interfere with the expected exception
           DIVIDE x BY y GIVING y
           DIVIDE x BY 0.1 GIVING y
           IF FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
           NOT = 'EC-SIZE-OVERFLOW'
              DISPLAY 'Wrong/missing exception: '
                      FUNCTION EXCEPTION-STATUS
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
AT_CLEANUP


AT_SETUP([Constant Expressions])
AT_KEYWORDS([runmisc condition expression])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  VAR       PIC X(200).
       01  OTHERVAR  PIC X(115).
       78  VAR-LEN   VALUE 115.

       PROCEDURE DIVISION.
       MAIN-10.
           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE 
               ALSO FALSE
               ALSO TRUE
            WHEN    TRUE 
               ALSO VAR-LEN > 16 AND VAR-LEN < 200
               ALSO TRUE
                  MOVE OTHERVAR (1 : VAR-LEN - 9)
                    TO VAR (16 - VAR-LEN : VAR-LEN - 9)
                  DISPLAY "A: Should NOT be executed"
            WHEN  TRUE 
               ALSO VAR-LEN < 16 
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR-LEN > 16 AND VAR-LEN < 200"
            WHEN  TRUE 
               ALSO VAR = SPACES 
               ALSO TRUE
                  MOVE OTHERVAR TO VAR
                  DISPLAY "A: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE 3 EQUALS 7
           WHEN  VAR = SPACES 
               DISPLAY "B: OK VAR IS NOT SPACES"
           WHEN  VAR NOT = SPACES 
               DISPLAY "B: FALSE VAR IS SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE FALSE
           WHEN  VAR = SPACES 
               DISPLAY "C: FALSE VAR IS SPACES"
           WHEN  VAR NOT = SPACES 
               DISPLAY "C: OK VAR IS SPACES"
           END-EVALUATE.

           MOVE "Peek a boo" TO VAR.
           EVALUATE TRUE
           WHEN  VAR = SPACES 
               DISPLAY "D: BAD VAR IS SPACES"
           WHEN  VAR NOT = SPACES 
               DISPLAY "D: OK VAR IS NOT SPACES"
           END-EVALUATE.

           MOVE SPACES       TO VAR.
           EVALUATE VAR-LEN ALSO VAR
           WHEN  < 32 ALSO SPACES
               DISPLAY "E: OK VAR IS SPACES"
           WHEN  > 16 ALSO NOT SPACES 
               DISPLAY "E: BAD VAR IS NOT SPACES"
           WHEN OTHER
               DISPLAY "E: OK OTHER option taken"
           END-EVALUATE.

           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -w], [0], [],
[prog.cob: in paragraph 'MAIN-10':
prog.cob:20: error (ignored): offset of 'VAR' out of bounds: -99
])

AT_CHECK([./prog], [0],
[A: OK VAR-LEN > 16 AND VAR-LEN < 200
B: OK VAR IS NOT SPACES
C: OK VAR IS SPACES
D: OK VAR IS NOT SPACES
E: OK OTHER option taken
], [])

AT_CLEANUP


AT_SETUP([PERFORM VARYING Float])
AT_KEYWORDS([Perform])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
        
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  i USAGE FLOAT-LONG.
        
       PROCEDURE DIVISION.
           PERFORM VARYING i FROM 1.0 BY 1.0 UNTIL i > 5.0
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 1 Completed".
           PERFORM VARYING i FROM 1 BY 1 UNTIL i > 5
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 2 Completed".
           PERFORM VARYING i FROM 5 BY -1 UNTIL i < 1
                 DISPLAY i " " NO ADVANCING
           END-PERFORM .
           DISPLAY "Test Part 3 Completed".
           STOP RUN.
           END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [1 2 3 4 5 Test Part 1 Completed
1 2 3 4 5 Test Part 2 Completed
5 4 3 2 1 Test Part 3 Completed
], [])

AT_CLEANUP


AT_SETUP([Test PICTURE with Edit mask])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA  DIVISION.
       WORKING-STORAGE SECTION.
       01  TST.
           05 DEPT-SUB        PIC 9(7)V999 VALUE 18536.232.
           05 DEPT-COST-YTD   PIC 9(5)V999 VALUE 18536.232.
           05 DL-PROD-COST    PIC $$$,$$9.99.
       77  WFLT  PIC $$$,$$9.99.

       PROCEDURE DIVISION.
           MOVE 18536.23 TO WFLT.
           DISPLAY "WFLT IS " WFLT.
           MULTIPLY DEPT-COST-YTD BY 1 GIVING DL-PROD-COST ROUNDED.
           DISPLAY "COST IS " DL-PROD-COST.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [WFLT IS $18,536.23
COST IS $18,536.23
], [])

AT_CLEANUP


AT_SETUP([COMP-3 Index])
AT_KEYWORDS([numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-PAGE-NUMBER PIC 9(4) COMP-3 VALUE ZERO.
       01 WS-LINE-NUMBER PIC 9(3) VALUE ZERO.
       PROCEDURE DIVISION.
       PERFORM VARYING WS-LINE-NUMBER FROM 1 BY 1 
                 UNTIL WS-LINE-NUMBER > 10
       ADD 1 TO WS-PAGE-NUMBER
       DISPLAY WS-PAGE-NUMBER
       END-PERFORM.
       STOP RUN RETURNING 0.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [0001
0002
0003
0004
0005
0006
0007
0008
0009
0010
], [])

AT_CLEANUP


AT_SETUP([POINTER])
AT_KEYWORDS([numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID. prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 XX.
         02 XX-1           PIC X(4) VALUE "1234".
         02 XX-2           PIC X(4) VALUE "5678".
       01 P-XX-1        POINTER.
       01 P-XX-2        POINTER.
       LINKAGE          SECTION.
       01 Y2            PIC X(4).
       PROCEDURE        DIVISION.
         SET P-XX-1 TO ADDRESS OF XX-1
         SET P-XX-2 TO ADDRESS OF XX-2
         SET ADDRESS OF Y2 TO ADDRESS OF XX-1
         SET ADDRESS OF Y2 UP BY 4
         IF Y2 NOT = XX-2
            DISPLAY "Test 2 '" Y2 "'"
            END-DISPLAY
         END-IF
         IF ADDRESS OF Y2 NOT= P-XX-2
            DISPLAY "Pointer test failed"
         ELSE
            DISPLAY "Pointer test was good"
         END-IF
         STOP RUN.
])

AT_CHECK([cobc -x -std=mf -w prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [Pointer test was good
], [])

AT_CLEANUP


#### jkl, r1411 AT_SETUP([Comma separator without space])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY 1,1,1 NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [111])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## TODO: Check if the following DECIMAL-POINT tests are really all extensions.
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([DECIMAL-POINT is COMMA (1)])
#### jkl, r1411 AT_KEYWORDS([misc extensions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            DECIMAL-POINT    IS COMMA.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 99V99.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE FUNCTION MIN (3,,,,,,5) TO X.
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [00,50
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([DECIMAL-POINT is COMMA (2)])
#### jkl, r1411 AT_KEYWORDS([misc extensions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            DECIMAL-POINT    IS COMMA.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 99V99.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE FUNCTION MIN (3,,,,,, 5) TO X.
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [03,00
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([DECIMAL-POINT is COMMA (3)])
#### jkl, r1411 AT_KEYWORDS([misc extensions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            DECIMAL-POINT    IS COMMA.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 99V99.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE FUNCTION MIN (3,,,,,, 1,5) TO X.
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [01,50
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([DECIMAL-POINT is COMMA (4)])
#### jkl, r1411 AT_KEYWORDS([misc extensions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            DECIMAL-POINT    IS COMMA.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 99V99.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE FUNCTION MIN (3,,,,,,1,5) TO X.
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [00,10
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([DECIMAL-POINT is COMMA (5)])
#### jkl, r1411 AT_KEYWORDS([misc extensions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            DECIMAL-POINT    IS COMMA.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 99V99.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            COMPUTE X=1 + ,1
#### jkl, r1411            END-COMPUTE
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            COMPUTE X=1*,1
#### jkl, r1411            END-COMPUTE
#### jkl, r1411            DISPLAY X
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [01,10
#### jkl, r1411 00,10
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CURRENCY SIGN])
#### jkl, r1411 AT_KEYWORDS([misc fundamental])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        PROGRAM-ID.   prog.
#### jkl, r1411 
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            CURRENCY SIGN IS "Y".
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        77  amount    pic Y(6)9.99.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            Move 1512.34 to Amount
#### jkl, r1411            Display "Amount is #" Amount '#' with no advancing.
#### jkl, r1411 
#### jkl, r1411            GOBACK
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [Amount is #  Y1512.34#])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CURRENCY SIGN WITH PICTURE SYMBOL])
#### jkl, r1411 AT_KEYWORDS([misc fundamental])
#### jkl, r1411 
#### jkl, r1411 # FIXME - see FR #246
#### jkl, r1411 AT_XFAIL_IF(true)
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        PROGRAM-ID.   prog.
#### jkl, r1411 
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            *> note the space after EUR / before ct.
#### jkl, r1411            CURRENCY SIGN IS "EUR "      WITH PICTURE SYMBOL "U",
#### jkl, r1411            CURRENCY SIGN IS " ct (EUR)" WITH PICTURE SYMBOL "c",
#### jkl, r1411            Currency Sign is "$US" with Picture Symbol "$".
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        77  EUROS    PIC U99v99.
#### jkl, r1411        77  cents    PIC c9,999.
#### jkl, r1411        77  DOLLARS  Pic $$,$$9.99.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            MOVE 12.34 TO EUROS
#### jkl, r1411            MULTIPLY euros BY 1000 GIVING cents.
#### jkl, r1411            DISPLAY "#" EUROS "# equal #" cents '#'.
#### jkl, r1411            Move 1500 to Invoice-Amount
#### jkl, r1411            Display "Invoice amount #1 is " Invoice-Amount '.'.
#### jkl, r1411            Move 12.34 to Invoice-Amount
#### jkl, r1411            Display "Invoice amount #2 is " Invoice-Amount '.'.
#### jkl, r1411 
#### jkl, r1411            GOBACK
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [#EUR 12.34# equal #1,234 ct (EUR)#
#### jkl, r1411 Invoice amount #1 is  $US1,500.00.
#### jkl, r1411 Invoice amount #2 is     $US12.34.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([LOCAL-STORAGE (1)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 WRK-X         PIC XXX VALUE "abc".
#### jkl, r1411        LOCAL-STORAGE    SECTION.
#### jkl, r1411        01 LCL-X         PIC XXX VALUE "abc".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY WRK-X LCL-X NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            MOVE ZERO TO WRK-X LCL-X.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abcabc000abc], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([LOCAL-STORAGE (2)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 LNK-X         PIC XXX.
#### jkl, r1411        PROCEDURE        DIVISION USING LNK-X.
#### jkl, r1411            DISPLAY LNK-X NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LOCAL-STORAGE    SECTION.
#### jkl, r1411        01 LCL-X.
#### jkl, r1411           05 FILLER     PIC XXX VALUE "abc".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee2" USING LCL-X
#### jkl, r1411            END-CALL.
#### jkl, r1411            MOVE ZERO TO LCL-X.
#### jkl, r1411            CALL "callee2" USING LCL-X
#### jkl, r1411            END-CALL.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [abc000], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXTERNAL data item])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 EXT-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF EXT-VAR NOT = "Hello"
#### jkl, r1411               DISPLAY EXT-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE "World" TO EXT-VAR.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 EXT-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "Hello" TO EXT-VAR.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            IF EXT-VAR NOT = "World"
#### jkl, r1411               DISPLAY EXT-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXTERNAL AS data item])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 PRG-VAR       PIC X(5) EXTERNAL AS "WRK-VAR".
#### jkl, r1411        01 EXT-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF PRG-VAR NOT = "Extrn"
#### jkl, r1411               DISPLAY PRG-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF EXT-VAR NOT = "Hello"
#### jkl, r1411               DISPLAY EXT-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE "World" TO EXT-VAR.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 MYVAR         PIC X(5) EXTERNAL AS "EXT-VAR".
#### jkl, r1411        01 WRK-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "Extrn" TO WRK-VAR.
#### jkl, r1411            MOVE "Hello" TO MYVAR.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            IF MYVAR NOT = "World"
#### jkl, r1411               DISPLAY MYVAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXTERNAL data item size mismatch])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 # FIXME - see Bug #445
#### jkl, r1411 AT_XFAIL_IF(true)
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 PRG-VAR       PIC X(8) EXTERNAL AS "WRK-VAR".
#### jkl, r1411        01 COB-VAR       PIC X(8) EXTERNAL.
#### jkl, r1411        01 EXT-VAR       PIC X(8) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF PRG-VAR NOT = "Extrn"
#### jkl, r1411               DISPLAY PRG-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF EXT-VAR NOT = "Hello"
#### jkl, r1411               DISPLAY EXT-VAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE "World" TO EXT-VAR.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([bigger.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      error.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 MYVAR         PIC X(10) EXTERNAL AS "COB-VAR".
#### jkl, r1411        01 WRK-VAR       PIC X(10) EXTERNAL.
#### jkl, r1411        01 EXT-VAR       PIC X(10) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "Extrn" TO WRK-VAR.
#### jkl, r1411            MOVE "Hello" TO MYVAR.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            IF MYVAR NOT = "World"
#### jkl, r1411               DISPLAY MYVAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([smaller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      error.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 MYVAR         PIC X(5) EXTERNAL AS "COB-VAR".
#### jkl, r1411        01 WRK-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        01 EXT-VAR       PIC X(5) EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "Extrn" TO WRK-VAR.
#### jkl, r1411            MOVE "Hello" TO MYVAR.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            IF MYVAR NOT = "World"
#### jkl, r1411               DISPLAY MYVAR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE bigger.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./bigger], [0], [],
#### jkl, r1411 [libcob: callee.cob:6: warning: EXTERNAL item 'WRK-VAR' previously allocated with size 10, requested size is 8
#### jkl, r1411 libcob: callee.cob:7: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
#### jkl, r1411 libcob: callee.cob:8: warning: EXTERNAL item 'EXT-VAR' previously allocated with size 10, requested size is 8
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE smaller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./smaller], [1], [],
#### jkl, r1411 [libcob: callee.cob:6: EXTERNAL item 'WRK-VAR' previously allocated with size 5, requested size is 8
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## MOVE statement
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE to itself])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC 99 VALUE 12.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE X TO X.
#### jkl, r1411            IF X NOT = 12
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [],
#### jkl, r1411 [prog.cob:8: warning: overlapping MOVE may produce unpredictable results
#### jkl, r1411 ])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE with refmod])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC 9(4) VALUE 0.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "1" TO X(1:1).
#### jkl, r1411            IF X NOT = 1000
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE with refmod (variable)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE "1234".
#### jkl, r1411        01 Y             PIC X(4) VALUE "abcd".
#### jkl, r1411        01 I             PIC 9 VALUE 1.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE X(1:I) TO Y.
#### jkl, r1411            IF Y NOT = "1   "
#### jkl, r1411               DISPLAY Y NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE with group refmod])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 G.
#### jkl, r1411          02 X           PIC 9999 VALUE 1234.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "99" TO G(3:2).
#### jkl, r1411            IF G NOT = "1299"
#### jkl, r1411               DISPLAY G NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE indexes])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 G.
#### jkl, r1411          02 X           PIC X OCCURS 10 INDEXED I.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            SET I TO ZERO.
#### jkl, r1411            MOVE I TO X(1).
#### jkl, r1411            IF X(1) NOT = "0"
#### jkl, r1411               DISPLAY X(1) NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE X'00'])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([dump.c], [
#### jkl, r1411 #include <stdio.h>
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 COB_EXT_EXPORT int
#### jkl, r1411 dump (unsigned char *data)
#### jkl, r1411 {
#### jkl, r1411   printf ("%02x%02x%02x", data[[0]], data[[1]], data[[2]]);
#### jkl, r1411   return 0;
#### jkl, r1411 }
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC XXX.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE X"000102" TO X.
#### jkl, r1411            CALL "dump" USING X
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [000102])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MOVE Z'literal'])
#### jkl, r1411 AT_KEYWORDS([runmisc literal])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC XXXX.
#### jkl, r1411        01  XRED REDEFINES X.
#### jkl, r1411            03  XBYTE1   PIC X.
#### jkl, r1411            03  XBYTE2   PIC X.
#### jkl, r1411            03  XBYTE3   PIC X.
#### jkl, r1411            03  XBYTE4   PIC X.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE Z"012" TO X.
#### jkl, r1411            IF XBYTE1 = "0" AND
#### jkl, r1411               XBYTE2 = "1" AND
#### jkl, r1411               XBYTE3 = "2" AND
#### jkl, r1411               XBYTE4 = LOW-VALUE
#### jkl, r1411               DISPLAY "OK" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "X = " X (1:3) NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411               IF XBYTE4 = LOW-VALUE
#### jkl, r1411                  DISPLAY " WITH LOW-VALUE"
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411               ELSE
#### jkl, r1411                  DISPLAY " WITHOUT LOW-VALUE BUT '" XBYTE4 "'"
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411               END-IF
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Floating continuation indicator])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY "OK"-
#### jkl, r1411             "OK"
#### jkl, r1411              NO ADVANCING
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Fixed continuation indicator])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(333) VALUE
#### jkl, r1411            '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX
#### jkl, r1411       -    'YZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUV
#### jkl, r1411       -    'WXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRST
#### jkl, r1411       -    'UVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQR
#### jkl, r1411       -    'STUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
#### jkl, r1411       -             'QRSTUVWXYZ'.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY X NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            DISPLAY '_'
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            MOVE
#### jkl, r1411            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567
#### jkl, r1411       -    "89abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345
#### jkl, r1411       -    "6789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123
#### jkl, r1411       -    "456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01
#### jkl, r1411       -     "23456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY
#### jkl, r1411       -                                                               "Z
#### jkl, r1411       -             "0123456789" TO X.
#### jkl, r1411            DISPLAY X NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            DISPLAY '_'
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ                       _
#### jkl, r1411 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789                       _
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Concatenation operator])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77 STR           PIC X(05).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE "OK" & " "
#### jkl, r1411             & "OK"
#### jkl, r1411              TO STR
#### jkl, r1411            DISPLAY STR NO ADVANCING
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK OK])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SOURCE FIXED/FREE directives])
#### jkl, r1411 AT_KEYWORDS([runmisc SOURCEFORMAT FIXED FREE])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        >>SOURCE FREE
#### jkl, r1411    DATA             DIVISION.
#### jkl, r1411    WORKING-STORAGE  SECTION.
#### jkl, r1411    >>SOURCE FIXED
#### jkl, r1411        PROCEDURE        DIVISION.                                       FIXED
#### jkl, r1411              DISPLAY "OK" NO ADVANCING
#### jkl, r1411              END-DISPLAY.
#### jkl, r1411        >>SOURCE FREE
#### jkl, r1411                                                                         DISPLAY
#### jkl, r1411    "OK"
#### jkl, r1411  NO ADVANCING
#### jkl, r1411    END-DISPLAY.
#### jkl, r1411    >>SET SOURCEFORMAT "FIXED"
#### jkl, r1411              DISPLAY "OK" NO ADVANCING                                  FIXED
#### jkl, r1411              END-DISPLAY.
#### jkl, r1411        >>SET SOURCEFORMAT "FREE"
#### jkl, r1411                                                                         DISPLAY
#### jkl, r1411    "OK"
#### jkl, r1411  NO ADVANCING
#### jkl, r1411    END-DISPLAY.
#### jkl, r1411              STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [OKOKOKOK])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 ## OCCURS clause
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Level 01 subscripts])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X OCCURS 10.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_ONLY -std=cobol2014 prog.cob], [1], [],
#### jkl, r1411 [prog.cob:6: error: level 01 item 'X' cannot have a OCCURS clause
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## Expressions
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Class check with reference modification])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(6) VALUE "123   ".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF X(1:3) NUMERIC
#### jkl, r1411               STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            DISPLAY "NG" NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Index and parenthesized expression])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 G.
#### jkl, r1411          02 X           PIC X OCCURS 1 INDEXED BY I.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411          IF I < (I + 2)
#### jkl, r1411            DISPLAY "OK" NO ADVANCING
#### jkl, r1411            END-DISPLAY
#### jkl, r1411          END-IF.
#### jkl, r1411          STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Alphanumeric and binary numeric])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X-X           PIC XXXX VALUE "0001".
#### jkl, r1411        01 X-9           PIC 9999 COMP VALUE 1.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411          IF X-X = X-9
#### jkl, r1411             STOP RUN
#### jkl, r1411          END-IF.
#### jkl, r1411          DISPLAY "NG" NO ADVANCING
#### jkl, r1411          END-DISPLAY
#### jkl, r1411          STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Non-numeric data in numeric items])
#### jkl, r1411 
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X.
#### jkl, r1411           03 X-NUM      PIC 9(06) VALUE 123.
#### jkl, r1411        77 NUM           PIC 9(06).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE x"0000" TO X (2:2)
#### jkl, r1411            IF X-NUM NUMERIC
#### jkl, r1411               DISPLAY "low-value is numeric" UPON SYSERR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            MOVE x"01" TO X (3:1)
#### jkl, r1411            IF X-NUM NUMERIC
#### jkl, r1411               DISPLAY "SOH is numeric" UPON SYSERR
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            MOVE X-NUM TO NUM
#### jkl, r1411            DISPLAY "test over"
#### jkl, r1411            END-DISPLAY
#### jkl, r1411       *
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog2.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X.
#### jkl, r1411           03 X-NUM      PIC 9(06) PACKED-DECIMAL VALUE 123.
#### jkl, r1411        77 NUM           PIC 9(06).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE x"0A" TO X (2:1)
#### jkl, r1411            IF X-NUM NUMERIC
#### jkl, r1411               DISPLAY "bad prog"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            MOVE X-NUM TO NUM
#### jkl, r1411            DISPLAY "test over"
#### jkl, r1411            END-DISPLAY
#### jkl, r1411       *
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC -x -o unchecked_prog prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog], [0],
#### jkl, r1411 [test over
#### jkl, r1411 ], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
#### jkl, r1411 [libcob: prog.cob:20: 'X-NUM' (Type: NUMERIC DISPLAY) not numeric: '0\000\001123'
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC -x -o unchecked_prog2 prog2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./unchecked_prog2], [0],
#### jkl, r1411 [test over
#### jkl, r1411 ], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
#### jkl, r1411 [libcob: prog2.cob:15: 'X-NUM' (Type: PACKED-DECIMAL) not numeric: '0x000a123f'
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## CALL statement
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Dynamic call with static linking])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog2 caller.cob callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Static call with static linking])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL STATIC "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee.$COB_OBJECT_EXT], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog2 -static caller.cob callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog3 caller.cob callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog3], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Dynamic CALL with ON EXCEPTION])
#### jkl, r1411 
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee1" ON EXCEPTION
#### jkl, r1411               CALL "callee2" ON EXCEPTION
#### jkl, r1411                   DISPLAY "neither calee1 nor callee2 found"
#### jkl, r1411               END-CALL
#### jkl, r1411            END-CALL
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY "this is callee2" NO ADVANCING
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0],
#### jkl, r1411 [this is callee2], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Static CALL with ON EXCEPTION])
#### jkl, r1411 
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee1" ON EXCEPTION
#### jkl, r1411               CALL "callee2" ON EXCEPTION
#### jkl, r1411                   DISPLAY "neither calee1 nor callee2 found"
#### jkl, r1411               END-CALL
#### jkl, r1411            END-CALL
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY "this is callee2" NO ADVANCING
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -c callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -c caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog caller.$COB_OBJECT_EXT callee2.$COB_OBJECT_EXT], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [this is callee2], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog2 -static caller.cob callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
#### jkl, r1411 [this is callee2], [])
#### jkl, r1411 AT_CHECK([$COMPILE -o prog3 caller.cob callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog3], [0],
#### jkl, r1411 [this is callee2], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL m1. CALL m2. CALL m1.])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([m1.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      m1.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            COMPUTE X = 1 + 2
#### jkl, r1411            END-COMPUTE.
#### jkl, r1411            IF X NOT = 3
#### jkl, r1411               DISPLAY X
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([m2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      m2.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            COMPUTE X = 3 + 4
#### jkl, r1411            END-COMPUTE.
#### jkl, r1411            IF X NOT = 7
#### jkl, r1411               DISPLAY X
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "m1"
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "m2"
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "m1"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE m1.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE m2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Recursive CALL of RECURSIVE program])
#### jkl, r1411 AT_KEYWORDS([runmisc CANCEL EXTERNAL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller IS RECURSIVE.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        CONFIGURATION    SECTION.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC S9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO STOPPER
#### jkl, r1411            CALL "callee"
#### jkl, r1411            DISPLAY 'OK' NO ADVANCING END-DISPLAY
#### jkl, r1411            CANCEL "callee" , "callee2"
#### jkl, r1411            DISPLAY ' + FINE' NO ADVANCING END-DISPLAY
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee IS RECURSIVE.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC S9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF STOPPER = 9
#### jkl, r1411               MOVE -1 TO STOPPER
#### jkl, r1411            ELSE
#### jkl, r1411               ADD   1 TO STOPPER
#### jkl, r1411               CALL "callee2"
#### jkl, r1411            END-IF
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2 IS RECURSIVE.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC S9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF STOPPER NOT EQUAL -1
#### jkl, r1411              CALL "callee"
#### jkl, r1411            END-IF
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK + FINE], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Recursive CALL of INITIAL program])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO STOPPER
#### jkl, r1411            CALL "callee" END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee IS INITIAL.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF STOPPER = 1
#### jkl, r1411               DISPLAY 'INITIAL prog was called RECURSIVE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411               STOP RUN RETURNING 1
#### jkl, r1411            ELSE
#### jkl, r1411               MOVE 1 TO STOPPER
#### jkl, r1411               CALL "callee2" END-CALL
#### jkl, r1411            END-IF.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
#### jkl, r1411 [libcob: callee2.cob:5: recursive CALL from callee2 to callee which is NOT RECURSIVE
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Recursive CALL with RECURSIVE assumed])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO STOPPER
#### jkl, r1411            CALL "callee" END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee IS INITIAL.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF STOPPER = 9
#### jkl, r1411               DISPLAY 'OK' NO ADVANCING END-DISPLAY
#### jkl, r1411               STOP RUN
#### jkl, r1411            ELSE
#### jkl, r1411               ADD  1 TO STOPPER END-ADD
#### jkl, r1411               CALL "callee2" END-CALL
#### jkl, r1411            END-IF.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -fno-recursive-check callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Recursive CALL with ON EXCEPTION])
#### jkl, r1411 
#### jkl, r1411 AT_KEYWORDS([runmisc EXCEPTION-STATUS])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO STOPPER
#### jkl, r1411            CALL "callee" END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee IS INITIAL.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        77  STOPPER      PIC 9 EXTERNAL.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF STOPPER = 1
#### jkl, r1411               DISPLAY 'INITIAL prog was called RECURSIVE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411               STOP RUN RETURNING 1
#### jkl, r1411            ELSE
#### jkl, r1411               MOVE 1 TO STOPPER
#### jkl, r1411               CALL "callee2" END-CALL
#### jkl, r1411            END-IF.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            ON EXCEPTION
#### jkl, r1411               DISPLAY "Exception " FUNCTION EXCEPTION-STATUS ";"
#### jkl, r1411                  UPON SYSERR
#### jkl, r1411               STOP RUN RETURNING 1
#### jkl, r1411            END-CALL.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
#### jkl, r1411 [Exception EC-PROGRAM-RECURSIVE-CALL      ;
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Multiple calls of INITIAL program])
#### jkl, r1411 AT_KEYWORDS([runmisc CALL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  PARAM1       PIC X(08).
#### jkl, r1411        01  PARAM2       PIC 9999 COMP VALUE 08.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE ' PARAM 1' TO PARAM1
#### jkl, r1411            PERFORM 10 TIMES
#### jkl, r1411               CALL "callee" USING PARAM1 PARAM2 END-CALL
#### jkl, r1411            END-PERFORM
#### jkl, r1411            DISPLAY 'PARAM1 = ' PARAM1
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee IS INITIAL.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  COUNTER      PIC 999 VALUE ZERO.
#### jkl, r1411        01  LPARAM       PIC 9(8) COMP.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01  PARAM1       PIC X(08).
#### jkl, r1411        01  PARAM2       PIC 9999 COMP.
#### jkl, r1411        PROCEDURE        DIVISION USING PARAM1 PARAM2.
#### jkl, r1411            ADD 1 TO COUNTER END-ADD
#### jkl, r1411            CALL 'C$PARAMSIZE' USING 1 GIVING LPARAM END-CALL
#### jkl, r1411            DISPLAY 'COUNTER = ' COUNTER ' LPARAM1 = ' LPARAM
#### jkl, r1411                    ' PARAM1 = ' PARAM1
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 COUNTER = 001 LPARAM1 = 00000008 PARAM1 =  PARAM 1
#### jkl, r1411 PARAM1 =  PARAM 1
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL binary literal parameter/LENGTH OF])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([dump.c], [
#### jkl, r1411 #include <stdio.h>
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 COB_EXT_EXPORT int
#### jkl, r1411 dump (int *p)
#### jkl, r1411 {
#### jkl, r1411   if ( *p == 0 ) p++;
#### jkl, r1411   if ( *p == 0 ) p++;	/* Skip leading bytes for BIG Endian value */
#### jkl, r1411   if ( *p == 0 ) p++;
#### jkl, r1411   printf ("%8.8d\n", *p);
#### jkl, r1411   return 0;
#### jkl, r1411 }
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  MYOCC        PIC 9(8) COMP.
#### jkl, r1411        01  MYTAB.
#### jkl, r1411            03  MYBYTE   PIC X OCCURS 1 TO 20
#### jkl, r1411                         DEPENDING ON MYOCC.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 9 TO MYOCC.
#### jkl, r1411            CALL "dump" USING BY CONTENT 1
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "dump" USING BY CONTENT LENGTH OF MYTAB
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "dump" USING BY CONTENT LENGTH OF MYOCC
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [00000001
#### jkl, r1411 00000009
#### jkl, r1411 00000004
#### jkl, r1411 ])
#### jkl, r1411 AT_CHECK([$COMPILE -fbinary-byteorder=native prog.cob -o prog2], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [0],
#### jkl, r1411 [00000001
#### jkl, r1411 00000009
#### jkl, r1411 00000004
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL binary literal])
#### jkl, r1411 AT_KEYWORDS([CALL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [       IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            CALL "SUB" USING 1280 BY VALUE 15.
#### jkl, r1411            CALL "SUB" USING 2560 BY VALUE 16.
#### jkl, r1411            STOP RUN.
#### jkl, r1411         END PROGRAM prog.
#### jkl, r1411        
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. "SUB".
#### jkl, r1411        
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01  x  PIC 9(9) COMP.
#### jkl, r1411        01  y  PIC 9(9) COMP-5.
#### jkl, r1411        
#### jkl, r1411        PROCEDURE DIVISION USING x, VALUE y.
#### jkl, r1411             DISPLAY "COBOL: X is " x " and Y is " y.
#### jkl, r1411        END PROGRAM "SUB".
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([./prog], [0],
#### jkl, r1411 [COBOL: X is 000001280 and Y is 000000015
#### jkl, r1411 COBOL: X is 000002560 and Y is 000000016
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## INSPECT
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT REPLACING LEADING ZEROS BY SPACES])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE "0001".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X REPLACING LEADING ZEROS BY SPACES.
#### jkl, r1411            IF X NOT = "   1"
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT No repeat conversion check])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(3) VALUE "BCA".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X CONVERTING "ABC" TO "BCD".
#### jkl, r1411            IF X NOT = "CDB"
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT CONVERTING alphabet])
#### jkl, r1411 AT_KEYWORDS([runmisc ASCII EBCDIC])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. charset.
#### jkl, r1411 
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            ALPHABET ALPHA IS ASCII.
#### jkl, r1411            ALPHABET BETA  IS EBCDIC.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411 
#### jkl, r1411        01 TESTHEX PIC X(10) VALUE X'C17BD6F2F0F1F8404040'.
#### jkl, r1411 
#### jkl, r1411        procedure division.
#### jkl, r1411        sample-main.
#### jkl, r1411 
#### jkl, r1411            INSPECT testhex CONVERTING BETA TO ALPHA
#### jkl, r1411            DISPLAY 'Converted: "' TESTHEX '"' WITH NO ADVANCING
#### jkl, r1411            
#### jkl, r1411            GOBACK.
#### jkl, r1411        END PROGRAM charset.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [Converted: "A#O2018   "], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT CONVERTING TO figurative constant])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(3) VALUE "BCA".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X CONVERTING "ABC" TO SPACES.
#### jkl, r1411            IF X NOT = SPACES
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT CONVERTING NULL])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(3) VALUE LOW-VALUES.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X CONVERTING NULL TO "A".
#### jkl, r1411            IF X NOT = "AAA"
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT CONVERTING TO NULL])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(3) VALUE "AAA".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X CONVERTING "A" TO NULL.
#### jkl, r1411            IF X NOT = LOW-VALUES
#### jkl, r1411               DISPLAY "NG" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT REPLACING figurative constant])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(3) VALUE "BCA".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X REPLACING ALL "BC" BY SPACE.
#### jkl, r1411            IF X NOT = "  A"
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT TALLYING BEFORE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE "ABC ".
#### jkl, r1411        01 TAL           PIC 999 VALUE 0.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO TAL.
#### jkl, r1411            INSPECT X TALLYING TAL FOR CHARACTERS
#### jkl, r1411                      BEFORE INITIAL " ".
#### jkl, r1411            IF TAL NOT = 3
#### jkl, r1411               DISPLAY TAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 0 TO TAL.
#### jkl, r1411            MOVE " ABC" TO X.
#### jkl, r1411            INSPECT X TALLYING TAL FOR CHARACTERS
#### jkl, r1411                      BEFORE INITIAL " ".
#### jkl, r1411            IF TAL NOT = 0
#### jkl, r1411               DISPLAY TAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT TALLYING AFTER])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE "ABC ".
#### jkl, r1411        01 TAL           PIC 999 VALUE 0.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 0 TO TAL.
#### jkl, r1411            INSPECT X TALLYING TAL FOR CHARACTERS
#### jkl, r1411                      AFTER INITIAL " ".
#### jkl, r1411            IF TAL NOT = 0
#### jkl, r1411               DISPLAY TAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 0 TO TAL.
#### jkl, r1411            MOVE " ABC" TO X.
#### jkl, r1411            INSPECT X TALLYING TAL FOR CHARACTERS
#### jkl, r1411                      AFTER INITIAL " ".
#### jkl, r1411            IF TAL NOT = 3
#### jkl, r1411               DISPLAY TAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT REPLACING TRAILING ZEROS BY SPACES])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE "1000".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X REPLACING TRAILING ZEROS BY SPACES.
#### jkl, r1411            IF X NOT = "1   "
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([INSPECT REPLACING complex])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(12) VALUE "AAABBCDCCCCC".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            INSPECT X REPLACING
#### jkl, r1411              ALL      "A" BY "Z"
#### jkl, r1411                       "B" BY "Y"
#### jkl, r1411              TRAILING "C" BY "X".
#### jkl, r1411            IF X NOT = "ZZZYYCDXXXXX"
#### jkl, r1411               DISPLAY X NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SWITCHES (environment COB_SWITCH_n and SET)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            SWITCH-1 IS SWIT1
#### jkl, r1411              ON  IS SWIT1-ON
#### jkl, r1411              OFF IS SWIT1-OFF
#### jkl, r1411            SWITCH-2 IS SWIT2
#### jkl, r1411              ON  IS SWIT2-ON
#### jkl, r1411              OFF IS SWIT2-OFF
#### jkl, r1411            SWITCH-3
#### jkl, r1411              ON  IS SWIT3-ON
#### jkl, r1411              OFF IS SWIT3-OFF
#### jkl, r1411            SWITCH-4 IS SWIT4
#### jkl, r1411              OFF IS SWIT4-OFF
#### jkl, r1411            SWITCH-31
#### jkl, r1411              ON  IS SWIT31-ON
#### jkl, r1411            SWITCH-36 IS SWIT36
#### jkl, r1411              OFF IS SWIT36-OFF.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF SWIT1-ON
#### jkl, r1411               DISPLAY "ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF SWIT2-ON
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF SWIT3-ON
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF NOT SWIT4-OFF
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            SET SWIT1 TO OFF.
#### jkl, r1411            SET SWIT2 TO ON.
#### jkl, r1411            IF SWIT1-ON
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF SWIT2-ON
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            IF SWIT31-ON
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF NOT SWIT36-OFF
#### jkl, r1411               DISPLAY " ON" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY " OFF" NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_SWITCH_1=1 COB_SWITCH_2=0 COB_SWITCH_3=OFF COB_SWITCH_4=ON COB_SWITCH_36=ON ./prog], [0],
#### jkl, r1411 [ON OFF OFF ON OFF ON OFF ON])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## PERFORM
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Nested PERFORM])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM 2 TIMES
#### jkl, r1411              DISPLAY "X" NO ADVANCING
#### jkl, r1411              END-DISPLAY
#### jkl, r1411              PERFORM 2 TIMES
#### jkl, r1411                DISPLAY "Y" NO ADVANCING
#### jkl, r1411                END-DISPLAY
#### jkl, r1411              END-PERFORM
#### jkl, r1411            END-PERFORM.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XYYXYY])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM VARYING BY -0.2])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411 	   77 X             PIC 9v9.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM VARYING X FROM 0.8 BY -0.2
#### jkl, r1411                    UNTIL   X < 0.4
#### jkl, r1411              DISPLAY "X" NO ADVANCING
#### jkl, r1411              END-DISPLAY
#### jkl, r1411            END-PERFORM.
#### jkl, r1411 		   IF X NOT = 0.2
#### jkl, r1411 		     DISPLAY "WRONG X: " X END-DISPLAY
#### jkl, r1411 		   END-IF
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM VARYING BY phrase omitted])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411 	   77 X             PIC 9.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM VARYING X FROM 4
#### jkl, r1411                    UNTIL   X > 6
#### jkl, r1411              DISPLAY "X" NO ADVANCING
#### jkl, r1411            END-PERFORM.
#### jkl, r1411 		   IF X NOT = 7
#### jkl, r1411 		     DISPLAY "WRONG X: " X
#### jkl, r1411 		   END-IF
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_ONLY -std=cobol85 prog.cob], [1], [],
#### jkl, r1411 [prog.cob:9: error: PERFORM VARYING without BY phrase does not conform to COBOL 85
#### jkl, r1411 ])
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [XXX])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXIT PERFORM])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM 2 TIMES
#### jkl, r1411              DISPLAY "OK" NO ADVANCING
#### jkl, r1411              END-DISPLAY
#### jkl, r1411              EXIT PERFORM
#### jkl, r1411              DISPLAY "NOT OK"
#### jkl, r1411              END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## EXIT PERFORM  see ISO/IEC 1989:2002(E) 14.8.13 Format 5
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXIT PERFORM CYCLE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM 2 TIMES
#### jkl, r1411              DISPLAY "OK" NO ADVANCING
#### jkl, r1411              END-DISPLAY
#### jkl, r1411              EXIT PERFORM CYCLE
#### jkl, r1411              DISPLAY "NOT OK"
#### jkl, r1411              END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [OKOK])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## EXIT PARAGRAPH  see ISO/IEC 1989:2002(E) 14.8.13 Format 6
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXIT PARAGRAPH])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 INDVAL        PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        A01.
#### jkl, r1411            PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
#### jkl, r1411             IF INDVAL > 2
#### jkl, r1411                EXIT PARAGRAPH
#### jkl, r1411             END-IF
#### jkl, r1411            END-PERFORM.
#### jkl, r1411        A02.
#### jkl, r1411            IF INDVAL NOT = 3
#### jkl, r1411               DISPLAY INDVAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## EXIT SECTION  see ISO/IEC 1989:2002(E) 14.8.13 Format 6
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EXIT SECTION])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 INDVAL        PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        A01 SECTION.
#### jkl, r1411        A011.
#### jkl, r1411            PERFORM VARYING INDVAL FROM 1 BY 1 UNTIL INDVAL > 10
#### jkl, r1411             IF INDVAL > 2
#### jkl, r1411                EXIT SECTION
#### jkl, r1411             END-IF
#### jkl, r1411            END-PERFORM.
#### jkl, r1411        A012.
#### jkl, r1411            DISPLAY INDVAL NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411        A02 SECTION.
#### jkl, r1411            IF INDVAL NOT = 3
#### jkl, r1411               DISPLAY INDVAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM FOREVER / PERFORM UNTIL EXIT])
#### jkl, r1411 AT_KEYWORDS([runmisc extension])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  INDVAL       PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        A01.
#### jkl, r1411            MOVE 0 TO INDVAL
#### jkl, r1411            PERFORM UNTIL EXIT
#### jkl, r1411             ADD 1 TO INDVAL
#### jkl, r1411             IF INDVAL > 2
#### jkl, r1411                EXIT PERFORM
#### jkl, r1411             END-IF
#### jkl, r1411            END-PERFORM
#### jkl, r1411            IF INDVAL NOT = 3
#### jkl, r1411               DISPLAY "1: " INDVAL
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            PERFORM FOREVER
#### jkl, r1411             ADD 1 TO INDVAL
#### jkl, r1411             IF INDVAL > 4
#### jkl, r1411                EXIT PERFORM
#### jkl, r1411             END-IF
#### jkl, r1411            END-PERFORM
#### jkl, r1411            IF INDVAL NOT = 5
#### jkl, r1411               DISPLAY "2: " INDVAL
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM inline (1)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  INDVAL       PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM VARYING INDVAL FROM 1
#### jkl, r1411             BY 1 UNTIL INDVAL > 2
#### jkl, r1411            END-PERFORM
#### jkl, r1411            IF INDVAL NOT = 3
#### jkl, r1411               DISPLAY INDVAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            STOP RUN
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fmissing-statement=ok prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM inline (2)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  INDVAL       PIC 9(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM VARYING INDVAL FROM 1
#### jkl, r1411             BY 1 UNTIL INDVAL > 2.
#### jkl, r1411            IF INDVAL NOT = 3
#### jkl, r1411               DISPLAY INDVAL NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -frelax-syntax-checks -w prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Non-overflow after overflow])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X            PIC 9(2) VALUE 0.
#### jkl, r1411        01  Y            PIC 9(2) VALUE 0.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            COMPUTE X = 100
#### jkl, r1411            END-COMPUTE.
#### jkl, r1411            COMPUTE Y = 99
#### jkl, r1411            END-COMPUTE.
#### jkl, r1411            IF Y NOT = 99
#### jkl, r1411               DISPLAY Y NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ## PERFORM statement
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM ... CONTINUE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            PERFORM 2 TIMES
#### jkl, r1411              CONTINUE
#### jkl, r1411            END-PERFORM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_ONLY prog.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([STRING with subscript reference])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  G.
#### jkl, r1411            02 X         PIC X(3) OCCURS 3.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE   SPACES TO G.
#### jkl, r1411            STRING "abc" INTO X(2)
#### jkl, r1411            END-STRING.
#### jkl, r1411            IF G NOT = "   abc   "
#### jkl, r1411               DISPLAY X(1) NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([STRING / UNSTRING [NOT] ON OVERFLOW])
#### jkl, r1411 AT_KEYWORDS([runmisc exceptions])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        identification division.
#### jkl, r1411        program-id. prog.
#### jkl, r1411        data division.
#### jkl, r1411        working-storage section.
#### jkl, r1411        77 simple-str     pic x(20).
#### jkl, r1411        77 err-str        pic x(50).
#### jkl, r1411       *-----------------------------------------------------------------
#### jkl, r1411        procedure division.
#### jkl, r1411       *    STRING test
#### jkl, r1411            move spaces to simple-str
#### jkl, r1411            string 'data'
#### jkl, r1411              delimited by size
#### jkl, r1411              into simple-str
#### jkl, r1411              on overflow
#### jkl, r1411                move spaces to err-str
#### jkl, r1411                string 'STRING OVERFLOW'
#### jkl, r1411                   delimited by size
#### jkl, r1411                   into err-str
#### jkl, r1411                end-string
#### jkl, r1411                display err-str upon syserr
#### jkl, r1411                end-display
#### jkl, r1411                display '1 failed'
#### jkl, r1411                end-display
#### jkl, r1411              not on overflow
#### jkl, r1411                display '1 passed'
#### jkl, r1411                end-display
#### jkl, r1411            end-string
#### jkl, r1411            if simple-str not = 'data'
#### jkl, r1411              display 'STRING ERROR (1): "' simple-str '"'
#### jkl, r1411              end-display
#### jkl, r1411            end-if
#### jkl, r1411       *
#### jkl, r1411            move spaces to simple-str
#### jkl, r1411            string 'data is too big here...'
#### jkl, r1411              delimited by size
#### jkl, r1411              into simple-str
#### jkl, r1411              on overflow
#### jkl, r1411                display '2 passed'
#### jkl, r1411                end-display
#### jkl, r1411              not on overflow
#### jkl, r1411                display '2 failed'
#### jkl, r1411                end-display
#### jkl, r1411                move spaces to err-str
#### jkl, r1411                string 'missing OVERFLOW'
#### jkl, r1411                   delimited by size
#### jkl, r1411                   into err-str
#### jkl, r1411                end-string
#### jkl, r1411                display err-str upon syserr
#### jkl, r1411                end-display
#### jkl, r1411            end-string
#### jkl, r1411            if simple-str not = 'data is too big here'
#### jkl, r1411              display 'STRING ERROR (2): "' simple-str '"'
#### jkl, r1411              end-display
#### jkl, r1411            end-if
#### jkl, r1411       *
#### jkl, r1411       *    UNSTRING test
#### jkl, r1411            move spaces to simple-str
#### jkl, r1411            unstring 'data'
#### jkl, r1411              into simple-str
#### jkl, r1411              on overflow
#### jkl, r1411                move spaces to err-str
#### jkl, r1411                unstring 'UNSTRING OVERFLOW'
#### jkl, r1411                   into err-str
#### jkl, r1411                end-unstring
#### jkl, r1411                display err-str upon syserr
#### jkl, r1411                end-display
#### jkl, r1411                display '3 failed'
#### jkl, r1411                end-display
#### jkl, r1411              not on overflow
#### jkl, r1411                display '3 passed'
#### jkl, r1411                end-display
#### jkl, r1411            end-unstring
#### jkl, r1411            if simple-str not = 'data'
#### jkl, r1411              display 'UNSTRING ERROR (1): "' simple-str '"'
#### jkl, r1411              end-display
#### jkl, r1411            end-if
#### jkl, r1411       *
#### jkl, r1411            move spaces to simple-str
#### jkl, r1411            unstring 'data is too big here...'
#### jkl, r1411              into simple-str
#### jkl, r1411              on overflow
#### jkl, r1411                display '4 passed'
#### jkl, r1411                end-display
#### jkl, r1411              not on overflow
#### jkl, r1411                display '4 failed'
#### jkl, r1411                end-display
#### jkl, r1411                move spaces to err-str
#### jkl, r1411                string 'missing OVERFLOW'
#### jkl, r1411                   delimited by size
#### jkl, r1411                   into err-str
#### jkl, r1411                end-string
#### jkl, r1411                display err-str upon syserr
#### jkl, r1411                end-display
#### jkl, r1411            end-unstring
#### jkl, r1411            if simple-str not = 'data is too big here'
#### jkl, r1411              display 'UNSTRING ERROR (2): "' simple-str '"'
#### jkl, r1411              end-display
#### jkl, r1411            end-if
#### jkl, r1411       *
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [1 passed
#### jkl, r1411 2 passed
#### jkl, r1411 3 passed
#### jkl, r1411 4 passed
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([UNSTRING DELIMITED ALL LOW-VALUE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  G.
#### jkl, r1411            03 FILLER    PIC XXX VALUE "ABC".
#### jkl, r1411            03 FILLER    PIC XX  VALUE LOW-VALUES.
#### jkl, r1411            03 FILLER    PIC XXX VALUE "DEF".
#### jkl, r1411        01  A            PIC XXX.
#### jkl, r1411        01  B            PIC XXX.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            UNSTRING G DELIMITED BY ALL LOW-VALUES
#### jkl, r1411                       INTO A B
#### jkl, r1411            END-UNSTRING.
#### jkl, r1411            IF A NOT = "ABC"
#### jkl, r1411               DISPLAY A
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF B NOT = "DEF"
#### jkl, r1411               DISPLAY B
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([UNSTRING DELIMITED ALL SPACE-2])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION  DIVISION.
#### jkl, r1411        PROGRAM-ID.     prog.
#### jkl, r1411        ENVIRONMENT     DIVISION.
#### jkl, r1411        DATA            DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  WS-RECORD.
#### jkl, r1411            02 VALUE SPACE           PIC X(04).
#### jkl, r1411            02 VALUE "ABC AND DE"    PIC X(10).
#### jkl, r1411            02 VALUE SPACE           PIC X(07).
#### jkl, r1411            02 VALUE "FG AND HIJ"    PIC X(10).
#### jkl, r1411            02 VALUE SPACE           PIC X(08).
#### jkl, r1411        01  SPACE-2                  PIC X(02) VALUE SPACE.
#### jkl, r1411        01  WS-DUMMY                 PIC X(15).
#### jkl, r1411        01  WS-POINTER               PIC 99.
#### jkl, r1411        PROCEDURE       DIVISION.
#### jkl, r1411            MOVE 1 TO WS-POINTER.
#### jkl, r1411       *
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-DUMMY NOT = SPACE
#### jkl, r1411               DISPLAY "Expected space - Got " WS-DUMMY
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF WS-POINTER NOT = 5
#### jkl, r1411               DISPLAY "Expected 5 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-DUMMY NOT = "ABC AND DE"
#### jkl, r1411               DISPLAY "Expected ABC AND DE - Got " WS-DUMMY
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF WS-POINTER NOT = 21
#### jkl, r1411               DISPLAY "Expected 21 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-DUMMY NOT = " FG AND HIJ"
#### jkl, r1411               DISPLAY "Expected  FG AND HIJ - Got " WS-DUMMY
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF WS-POINTER NOT = 40
#### jkl, r1411               DISPLAY "Expected 40 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411        0001-SUB.
#### jkl, r1411            UNSTRING WS-RECORD
#### jkl, r1411                     DELIMITED BY ALL SPACE-2
#### jkl, r1411               INTO WS-DUMMY
#### jkl, r1411               POINTER WS-POINTER
#### jkl, r1411            END-UNSTRING.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([UNSTRING DELIMITED POINTER])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION  DIVISION.
#### jkl, r1411        PROGRAM-ID.     prog.
#### jkl, r1411        ENVIRONMENT     DIVISION.
#### jkl, r1411        DATA            DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  WS-LAY-RECORD            PIC X(66).
#### jkl, r1411        01  WS-DUMMY                 PIC X(50).
#### jkl, r1411        01  WS-KEYWORD               PIC X(32).
#### jkl, r1411        01  WS-POINTER               PIC 99.
#### jkl, r1411        PROCEDURE       DIVISION.
#### jkl, r1411            MOVE
#### jkl, r1411        '        10  AF-RECORD-TYPE-SEQUENCE-04     PIC   9(05) COMP-3.'
#### jkl, r1411                   TO WS-LAY-RECORD.
#### jkl, r1411            MOVE 1 TO WS-POINTER.
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-POINTER NOT = 48
#### jkl, r1411               DISPLAY "Expected 48 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            ADD 7  TO WS-POINTER
#### jkl, r1411            END-ADD.
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-POINTER NOT = 62
#### jkl, r1411               DISPLAY "Expected 62 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            PERFORM 0001-SUB.
#### jkl, r1411            IF WS-POINTER NOT = 63
#### jkl, r1411               DISPLAY "Expected 63 - Got " WS-POINTER
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411        0001-SUB.
#### jkl, r1411            UNSTRING WS-LAY-RECORD
#### jkl, r1411                     DELIMITED
#### jkl, r1411                     BY ' PIC '
#### jkl, r1411                     OR ' COMP-3'
#### jkl, r1411                     OR '.'
#### jkl, r1411               INTO WS-DUMMY
#### jkl, r1411               DELIMITER WS-KEYWORD
#### jkl, r1411               POINTER WS-POINTER
#### jkl, r1411            END-UNSTRING.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([UNSTRING DELIMITER IN])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT      DIVISION.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  WK-CMD       PIC X(8) VALUE "WWADDBCC".
#### jkl, r1411        01  FILLER.
#### jkl, r1411         02 WK-SIGNS     PIC XX   VALUE "AB".
#### jkl, r1411         02 WKS REDEFINES WK-SIGNS.
#### jkl, r1411            03 WK-SIGN   PIC X OCCURS 2.
#### jkl, r1411         02 WK-DELIM     PIC X OCCURS 2.
#### jkl, r1411         02 WK-DATA      PIC X(2) OCCURS 3.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            UNSTRING WK-CMD DELIMITED BY WK-SIGN(1) OR WK-SIGN(2)
#### jkl, r1411            INTO WK-DATA(1) DELIMITER IN WK-DELIM(1)
#### jkl, r1411                 WK-DATA(2) DELIMITER IN WK-DELIM(2)
#### jkl, r1411                 WK-DATA(3)
#### jkl, r1411            END-UNSTRING
#### jkl, r1411            IF  WK-DATA(1)   NOT = "WW"
#### jkl, r1411             OR WK-DATA(2)   NOT = "DD"
#### jkl, r1411             OR WK-DATA(3)   NOT = "CC"
#### jkl, r1411             OR WK-DELIM(1)  NOT = "A"
#### jkl, r1411             OR WK-DELIM(2)  NOT = "B"
#### jkl, r1411                DISPLAY WK-DATA(1)
#### jkl, r1411                        WK-DATA(2)
#### jkl, r1411                        WK-DATA(3)
#### jkl, r1411                        WK-DELIM(1)
#### jkl, r1411                        WK-DELIM(2)
#### jkl, r1411                END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -ftop-level-occurs-clause=ok prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([UNSTRING with FUNCTION / literal])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  FILLER.
#### jkl, r1411          05  TSTUNS PIC X(479).
#### jkl, r1411          05  PRM    PIC X(16) OCCURS 4 TIMES.
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            MOVE "The,Quick,Brown,Fox" TO TSTUNS.
#### jkl, r1411            UNSTRING TSTUNS DELIMITED BY ','
#### jkl, r1411               INTO  PRM(1), PRM(2), PRM(3), PRM(4).
#### jkl, r1411            DISPLAY "PRM(1) is " PRM(1) ":".
#### jkl, r1411            DISPLAY "PRM(2) is " PRM(2) ":".
#### jkl, r1411            DISPLAY "PRM(3) is " PRM(3) ":".
#### jkl, r1411            DISPLAY "PRM(4) is " PRM(4) ":".
#### jkl, r1411            UNSTRING FUNCTION UPPER-CASE(TSTUNS) DELIMITED BY ','
#### jkl, r1411               INTO  PRM(1), PRM(2), PRM(3), PRM(4).
#### jkl, r1411            DISPLAY "Now using UPPER-CASE"
#### jkl, r1411            DISPLAY "PRM(1) is " PRM(1) ":".
#### jkl, r1411            DISPLAY "PRM(2) is " PRM(2) ":".
#### jkl, r1411            DISPLAY "PRM(3) is " PRM(3) ":".
#### jkl, r1411            DISPLAY "PRM(4) is " PRM(4) ":".
#### jkl, r1411            UNSTRING "Daddy,was,a,Rolling stone" DELIMITED BY ','
#### jkl, r1411               INTO  PRM(1), PRM(2), PRM(3), PRM(4).
#### jkl, r1411            DISPLAY "Now using Literal"
#### jkl, r1411            DISPLAY "PRM(1) is " PRM(1) ":".
#### jkl, r1411            DISPLAY "PRM(2) is " PRM(2) ":".
#### jkl, r1411            DISPLAY "PRM(3) is " PRM(3) ":".
#### jkl, r1411            DISPLAY "PRM(4) is " PRM(4) ":".
#### jkl, r1411            UNSTRING FUNCTION LOWER-CASE("Daddy,was,a,Rolling stone")
#### jkl, r1411                 DELIMITED BY ','
#### jkl, r1411               INTO  PRM(1), PRM(2), PRM(3), PRM(4).
#### jkl, r1411            DISPLAY "Now using Literal + LOWER-CASE"
#### jkl, r1411            DISPLAY "PRM(1) is " PRM(1) ":".
#### jkl, r1411            DISPLAY "PRM(2) is " PRM(2) ":".
#### jkl, r1411            DISPLAY "PRM(3) is " PRM(3) ":".
#### jkl, r1411            DISPLAY "PRM(4) is " PRM(4) ":".
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [PRM(1) is The             :
#### jkl, r1411 PRM(2) is Quick           :
#### jkl, r1411 PRM(3) is Brown           :
#### jkl, r1411 PRM(4) is Fox             :
#### jkl, r1411 Now using UPPER-CASE
#### jkl, r1411 PRM(1) is THE             :
#### jkl, r1411 PRM(2) is QUICK           :
#### jkl, r1411 PRM(3) is BROWN           :
#### jkl, r1411 PRM(4) is FOX             :
#### jkl, r1411 Now using Literal
#### jkl, r1411 PRM(1) is Daddy           :
#### jkl, r1411 PRM(2) is was             :
#### jkl, r1411 PRM(3) is a               :
#### jkl, r1411 PRM(4) is Rolling stone   :
#### jkl, r1411 Now using Literal + LOWER-CASE
#### jkl, r1411 PRM(1) is daddy           :
#### jkl, r1411 PRM(2) is was             :
#### jkl, r1411 PRM(3) is a               :
#### jkl, r1411 PRM(4) is rolling stone   :
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PICTURE COMP-X])
#### jkl, r1411 AT_KEYWORDS([Numeric])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  TST.
#### jkl, r1411            05 BVAL  PIC 9999 BINARY VALUE 512.
#### jkl, r1411            05 XVAL  PIC XX COMP-X VALUE 512.
#### jkl, r1411               88 XLOW  VALUE   0 THRU 256.
#### jkl, r1411               88 XHIGH VALUE 257 THRU 65536.
#### jkl, r1411            05 VAL9  PIC 99999 COMP-X VALUE 1024.
#### jkl, r1411               88 LOW9  VALUE   0 THRU 256.
#### jkl, r1411               88 HIGH9 VALUE 257 THRU 65536.
#### jkl, r1411            05 XVAL2 PIC XX COMP-X VALUE 16706.
#### jkl, r1411            05 XVALX REDEFINES XVAL2 PIC XX.
#### jkl, r1411            05 YVALX PIC XX VALUE 'A '.
#### jkl, r1411            05 YVAL2 REDEFINES YVALX PIC XX COMP-X.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
#### jkl, r1411            DISPLAY " VAL9 is " VAL9 ";  Length is " LENGTH OF VAL9.
#### jkl, r1411            MOVE 10240 TO XVAL.
#### jkl, r1411            DISPLAY " XVAL is " XVAL ";  Length is " LENGTH OF XVAL.
#### jkl, r1411            DISPLAY "XVAL2 is " XVAL2 "; Length is " LENGTH OF XVAL2.
#### jkl, r1411            DISPLAY "XVALX is " XVALX "; Length is " LENGTH OF XVALX.
#### jkl, r1411            ADD 1 TO XVAL2.
#### jkl, r1411            DISPLAY "XVALX is " XVALX " after +1;".
#### jkl, r1411            COMPUTE XVAL2 = XVAL2 / 256 + 8192.
#### jkl, r1411            DISPLAY "XVALX is " XVALX " after / 256 + 8192;".
#### jkl, r1411            MOVE 'DE'       TO XVALX.
#### jkl, r1411            DISPLAY "Numeric: " XVAL2 " is char " XVALX.
#### jkl, r1411            MOVE ZERO       TO YVAL2.
#### jkl, r1411            MOVE 'D'        TO YVALX (1:1)
#### jkl, r1411            MOVE LOW-VALUES TO YVALX (2:1)
#### jkl, r1411            SUBTRACT YVAL2 FROM XVAL2.
#### jkl, r1411            MOVE ' '        TO YVALX (1:1)
#### jkl, r1411            MOVE LOW-VALUES TO YVALX (2:1)
#### jkl, r1411            ADD YVAL2 TO XVAL2.
#### jkl, r1411            DISPLAY "Numeric: " XVAL2 " is char " XVALX.
#### jkl, r1411            MOVE 0 TO XVAL.
#### jkl, r1411            ADD 10240 TO XVAL.
#### jkl, r1411            IF XVAL = 10240
#### jkl, r1411                DISPLAY "XVAL is " XVAL
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "XVAL is not 10240 but " XVAL
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 0 TO BVAL.
#### jkl, r1411            ADD 10240 TO BVAL.
#### jkl, r1411            IF BVAL = 0240
#### jkl, r1411                DISPLAY "BVAL is " BVAL
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "BVAL is not 0240 but " BVAL
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([./prog], [0], [ XVAL is 00512;  Length is 2
#### jkl, r1411  VAL9 is 01024;  Length is 3
#### jkl, r1411  XVAL is 10240;  Length is 2
#### jkl, r1411 XVAL2 is 16706; Length is 2
#### jkl, r1411 XVALX is AB; Length is 2
#### jkl, r1411 XVALX is AC after +1;
#### jkl, r1411 XVALX is  A after / 256 + 8192;
#### jkl, r1411 Numeric: 17477 is char DE
#### jkl, r1411 Numeric: 08261 is char  E
#### jkl, r1411 XVAL is 10240
#### jkl, r1411 BVAL is 0240
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SORT: table sort])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 G             VALUE "d4b2e1a3c5".
#### jkl, r1411          02 TBL         OCCURS 5.
#### jkl, r1411            03 X         PIC X.
#### jkl, r1411            03 Y         PIC 9.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            SORT TBL ASCENDING KEY X.
#### jkl, r1411            IF G NOT = "a3b2c5d4e1"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            SORT TBL DESCENDING KEY Y.
#### jkl, r1411            IF G NOT = "c5d4a3b2e1"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            SORT TBL ASCENDING KEY TBL.
#### jkl, r1411            IF G NOT = "a3b2c5d4e1"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            SORT TBL DESCENDING KEY.
#### jkl, r1411            IF G NOT = "e1d4c5b2a3"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SORT: table sort (2)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 K                 PIC 9(2).
#### jkl, r1411 
#### jkl, r1411        01 CNT1              PIC 9(9) COMP-5 VALUE 4.
#### jkl, r1411        01 TAB1.
#### jkl, r1411           05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
#### jkl, r1411                                  DESCENDING TAB1-NR.
#### jkl, r1411              10 TAB1-NR     PIC 99.
#### jkl, r1411 
#### jkl, r1411        01 TAB2.
#### jkl, r1411           05 CNT2           PIC 9(9) COMP-5 VALUE 4.
#### jkl, r1411           05 ROW2 OCCURS 1 TO 4 DEPENDING CNT2
#### jkl, r1411                                  DESCENDING TAB2-NR.
#### jkl, r1411              10 TAB2-NR PIC 99.
#### jkl, r1411 
#### jkl, r1411        01 TAB3.
#### jkl, r1411           05 CNT3           PIC 9(9) COMP-5 VALUE 10.
#### jkl, r1411           05 ROW3 OCCURS 1 TO 10 DEPENDING CNT3
#### jkl, r1411                                   DESCENDING TAB3-NR
#### jkl, r1411                                   ASCENDING TAB3-DATA.
#### jkl, r1411              10 TAB3-NR     PIC 99.
#### jkl, r1411              10 FILLER      PIC X(2).
#### jkl, r1411              10 TAB3-DATA   PIC X(5).
#### jkl, r1411              10 FILLER      PIC X(2).
#### jkl, r1411              10 TAB3-DATA2  PIC X(5).
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411        A.
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
#### jkl, r1411              MOVE K TO TAB1-NR(K), TAB2-NR(K)
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            MOVE 1 TO TAB3-NR(1).
#### jkl, r1411            MOVE 1 TO TAB3-NR(8).
#### jkl, r1411            MOVE 1 TO TAB3-NR(4).
#### jkl, r1411            MOVE 6 TO TAB3-NR(2).
#### jkl, r1411            MOVE 5 TO TAB3-NR(3).
#### jkl, r1411            MOVE 5 TO TAB3-NR(9).
#### jkl, r1411            MOVE 2 TO TAB3-NR(5).
#### jkl, r1411            MOVE 2 TO TAB3-NR(10).
#### jkl, r1411            MOVE 4 TO TAB3-NR(6).
#### jkl, r1411            MOVE 3 TO TAB3-NR(7).
#### jkl, r1411 
#### jkl, r1411            MOVE "abcde" TO TAB3-DATA(1).
#### jkl, r1411            MOVE "AbCde" TO TAB3-DATA(2).
#### jkl, r1411            MOVE "abcde" TO TAB3-DATA(3).
#### jkl, r1411            MOVE "zyx" TO TAB3-DATA(4).
#### jkl, r1411            MOVE "12345" TO TAB3-DATA(5).
#### jkl, r1411            MOVE "zyx" TO TAB3-DATA(6).
#### jkl, r1411            MOVE "abcde" TO TAB3-DATA(7).
#### jkl, r1411            MOVE "AbCde" TO TAB3-DATA(8).
#### jkl, r1411            MOVE "abc" TO TAB3-DATA(9).
#### jkl, r1411            MOVE "12346" TO TAB3-DATA(10).
#### jkl, r1411 
#### jkl, r1411            MOVE "day" TO TAB3-DATA2(1).
#### jkl, r1411            MOVE "The" TO TAB3-DATA2(2).
#### jkl, r1411            MOVE "eats" TO TAB3-DATA2(3).
#### jkl, r1411            MOVE "." TO TAB3-DATA2(4).
#### jkl, r1411            MOVE "mooos" TO TAB3-DATA2(5).
#### jkl, r1411            MOVE "grass" TO TAB3-DATA2(6).
#### jkl, r1411            MOVE "and" TO TAB3-DATA2(7).
#### jkl, r1411            MOVE "whole" TO TAB3-DATA2(8).
#### jkl, r1411            MOVE "cow" TO TAB3-DATA2(9).
#### jkl, r1411            MOVE "the" TO TAB3-DATA2(10).
#### jkl, r1411 
#### jkl, r1411            SORT ROW1 DESCENDING TAB1-NR
#### jkl, r1411            SORT ROW2 DESCENDING TAB2-NR
#### jkl, r1411 
#### jkl, r1411            DISPLAY "SINGLE TABLE" END-DISPLAY
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
#### jkl, r1411              DISPLAY  FUNCTION TRIM(TAB1-NR(K)) END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            DISPLAY "LOWER LEVEL TABLE" END-DISPLAY
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
#### jkl, r1411              DISPLAY  FUNCTION TRIM(TAB2-NR(K)) END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            SORT ROW3 DESCENDING TAB3-NR ASCENDING TAB3-DATA
#### jkl, r1411 
#### jkl, r1411            DISPLAY "MULTY KEY SORT" END-DISPLAY
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 10
#### jkl, r1411              DISPLAY  FUNCTION TRIM(ROW3(K))
#### jkl, r1411              END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [SINGLE TABLE
#### jkl, r1411 04
#### jkl, r1411 03
#### jkl, r1411 02
#### jkl, r1411 01
#### jkl, r1411 LOWER LEVEL TABLE
#### jkl, r1411 04
#### jkl, r1411 03
#### jkl, r1411 02
#### jkl, r1411 01
#### jkl, r1411 MULTY KEY SORT
#### jkl, r1411 06  AbCde  The
#### jkl, r1411 05  abc    cow
#### jkl, r1411 05  abcde  eats
#### jkl, r1411 04  zyx    grass
#### jkl, r1411 03  abcde  and
#### jkl, r1411 02  12345  mooos
#### jkl, r1411 02  12346  the
#### jkl, r1411 01  AbCde  whole
#### jkl, r1411 01  abcde  day
#### jkl, r1411 01  zyx    .
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SORT: table sort (3)])
#### jkl, r1411 AT_SKIP_IF(true)
#### jkl, r1411 
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 K                 PIC 9(2).
#### jkl, r1411 
#### jkl, r1411        01 CNT1              PIC 9(9) COMP-5 VALUE 4.
#### jkl, r1411        01 TAB1.
#### jkl, r1411           05 ROW1 OCCURS 1 TO 4 DEPENDING CNT1
#### jkl, r1411                                   DESCENDING TAB1-NR.
#### jkl, r1411              10 TAB1-NR     PIC 99.
#### jkl, r1411              10 TAB-DATA    PIC X(5).
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411        A.
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
#### jkl, r1411              MOVE K TO TAB1-NR(K)
#### jkl, r1411              MOVE 'BLA' TO TAB-DATA(K)
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            SORT ROW1.
#### jkl, r1411 
#### jkl, r1411            PERFORM VARYING K FROM 1 BY 1 UNTIL K > 4
#### jkl, r1411              DISPLAY TAB1-NR(K) NO ADVANCING END-DISPLAY
#### jkl, r1411            END-PERFORM
#### jkl, r1411 
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [04030201], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SORT: EBCDIC table sort])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            ALPHABET ALPHA IS EBCDIC.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 Z  PIC X(10)  VALUE "d4b2e1a3c5".
#### jkl, r1411        01 G.
#### jkl, r1411          02 TBL         OCCURS 10.
#### jkl, r1411            03 X         PIC X.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE Z TO G.
#### jkl, r1411            SORT TBL ASCENDING KEY X SEQUENCE ALPHA.
#### jkl, r1411            IF G NOT = "abcde12345"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE Z TO G.
#### jkl, r1411            SORT TBL DESCENDING KEY X SEQUENCE ALPHA.
#### jkl, r1411            IF G NOT = "54321edcba"
#### jkl, r1411               DISPLAY G
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PIC ZZZ-, ZZZ+])
#### jkl, r1411 AT_KEYWORDS([runmisc editing])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  X-ZZZN                    PIC ZZZ-.
#### jkl, r1411        01  XZN-RED REDEFINES X-ZZZN  PIC X(4).
#### jkl, r1411        01  X-ZZZP                    PIC ZZZ+.
#### jkl, r1411        01  XZP-RED REDEFINES X-ZZZP  PIC X(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE -1 TO X-ZZZN.
#### jkl, r1411            IF XZN-RED NOT = "  1-"
#### jkl, r1411               DISPLAY "(" X-ZZZN ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE  0 TO X-ZZZN.
#### jkl, r1411            IF XZN-RED NOT = "    "
#### jkl, r1411               DISPLAY "(" X-ZZZN ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE +1 TO X-ZZZN.
#### jkl, r1411            IF XZN-RED NOT = "  1 "
#### jkl, r1411               DISPLAY "(" X-ZZZN ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411 
#### jkl, r1411            MOVE -1 TO X-ZZZP.
#### jkl, r1411            IF XZP-RED NOT = "  1-"
#### jkl, r1411               DISPLAY "(" X-ZZZP ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE  0 TO X-ZZZP.
#### jkl, r1411            IF XZP-RED NOT = "    "
#### jkl, r1411               DISPLAY "(" X-ZZZP ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE +1 TO X-ZZZP.
#### jkl, r1411            IF XZP-RED NOT = "  1+"
#### jkl, r1411               DISPLAY "(" X-ZZZP ")"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([PERFORM type OSVS])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  MYOCC        PIC 9(8) COMP VALUE 0.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        ASTART SECTION.
#### jkl, r1411        A01.
#### jkl, r1411            PERFORM BTEST.
#### jkl, r1411            IF MYOCC NOT = 2
#### jkl, r1411               DISPLAY MYOCC
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411        BTEST SECTION.
#### jkl, r1411        B01.
#### jkl, r1411            PERFORM B02 VARYING MYOCC FROM 1 BY 1
#### jkl, r1411                    UNTIL MYOCC > 5.
#### jkl, r1411            GO TO B99.
#### jkl, r1411        B02.
#### jkl, r1411            IF MYOCC > 1
#### jkl, r1411               GO TO B99
#### jkl, r1411            END-IF.
#### jkl, r1411        B99.
#### jkl, r1411            EXIT.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fperform-osvs prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Sticky LINKAGE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X.
#### jkl, r1411        01 P2            PIC X(6).
#### jkl, r1411        01 P3            PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION USING P1 P2.
#### jkl, r1411            IF P1 = "A"
#### jkl, r1411               SET ADDRESS OF P3 TO ADDRESS OF P2
#### jkl, r1411            ELSE
#### jkl, r1411               IF P3 NOT = "OKOKOK"
#### jkl, r1411                  DISPLAY P3
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411               END-IF
#### jkl, r1411            END-IF.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P1            PIC X    VALUE "A".
#### jkl, r1411        01 P2            PIC X(6) VALUE "NOT OK".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" USING P1 P2
#### jkl, r1411            END-CALL.
#### jkl, r1411            MOVE "B"      TO P1.
#### jkl, r1411            MOVE "OKOKOK" TO P2.
#### jkl, r1411            CALL "callee" USING P1
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -fsticky-linkage callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -fsticky-linkage caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([COB_PRE_LOAD])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee2"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_PRE_LOAD=callee ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([COB_PRE_LOAD with entry points])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411         IDENTIFICATION DIVISION.
#### jkl, r1411         PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411         DATA DIVISION.
#### jkl, r1411         WORKING-STORAGE SECTION.
#### jkl, r1411 
#### jkl, r1411         01 VAR1 PIC X(5) VALUE '12abc'.
#### jkl, r1411         01 VAR2 PIC X(2) VALUE '11'.
#### jkl, r1411 
#### jkl, r1411         PROCEDURE DIVISION.
#### jkl, r1411 
#### jkl, r1411         ENTRY 'ent1'.
#### jkl, r1411         DISPLAY VAR1 END-DISPLAY
#### jkl, r1411         GOBACK.
#### jkl, r1411 
#### jkl, r1411         ENTRY 'ent2'.
#### jkl, r1411         DISPLAY VAR2 END-DISPLAY
#### jkl, r1411         GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog1.cob], [
#### jkl, r1411         IDENTIFICATION DIVISION.
#### jkl, r1411         PROGRAM-ID. prog1.
#### jkl, r1411 
#### jkl, r1411         DATA DIVISION.
#### jkl, r1411         WORKING-STORAGE SECTION.
#### jkl, r1411 
#### jkl, r1411         01 VAR2 PIC X(2) VALUE '55'.
#### jkl, r1411         01 VAR3 PIC X(5) VALUE 'xxxxx'.
#### jkl, r1411 
#### jkl, r1411         PROCEDURE DIVISION.
#### jkl, r1411 
#### jkl, r1411         ENTRY 'ent2'.
#### jkl, r1411         DISPLAY VAR2 END-DISPLAY
#### jkl, r1411         GOBACK.
#### jkl, r1411 
#### jkl, r1411         ENTRY 'ent3'.
#### jkl, r1411         DISPLAY VAR3 END-DISPLAY
#### jkl, r1411         GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([main-prog.cob], [
#### jkl, r1411         IDENTIFICATION DIVISION.
#### jkl, r1411         PROGRAM-ID. main-prog.
#### jkl, r1411         DATA DIVISION.
#### jkl, r1411         WORKING-STORAGE SECTION.
#### jkl, r1411         PROCEDURE DIVISION.
#### jkl, r1411 
#### jkl, r1411         CALL 'ent1' END-CALL
#### jkl, r1411         CALL 'ent2' END-CALL
#### jkl, r1411         CALL 'ent3' END-CALL
#### jkl, r1411 
#### jkl, r1411         STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE prog1.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE main-prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_PRE_LOAD="prog"$PATHSEP"prog1" $COBCRUN_DIRECT ./main-prog], [0],
#### jkl, r1411 [12abc
#### jkl, r1411 11
#### jkl, r1411 xxxxx
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Lookup ENTRY from main executable])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 PROGRAM-LINK         USAGE PROGRAM-POINTER.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411        SET PROGRAM-LINK TO ENTRY "subprogram"
#### jkl, r1411        IF PROGRAM-LINK EQUAL NULL THEN
#### jkl, r1411            DISPLAY "error: no subprogram linkage" UPON SYSERR
#### jkl, r1411            END-DISPLAY
#### jkl, r1411        ELSE
#### jkl, r1411            CALL PROGRAM-LINK
#### jkl, r1411                ON EXCEPTION
#### jkl, r1411                    DISPLAY "hard error: unable to invoke subprogram"
#### jkl, r1411                       UPON SYSERR
#### jkl, r1411                    END-DISPLAY
#### jkl, r1411            END-CALL
#### jkl, r1411            DISPLAY RETURN-CODE WITH NO ADVANCING
#### jkl, r1411            END-DISPLAY
#### jkl, r1411        END-IF
#### jkl, r1411        GOBACK.
#### jkl, r1411 
#### jkl, r1411        ENTRY "subprogram".
#### jkl, r1411            DISPLAY "subprogram" WITH NO ADVANCING
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            SET RETURN-CODE TO 42
#### jkl, r1411        .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [42], [subprogram+000000042], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([COB_LOAD_CASE=UPPER test])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([CALLEE.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee"
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE CALLEE.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_LOAD_CASE=UPPER ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ALLOCATE / FREE with BASED item (1)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01  MYFLD        PIC X(6) BASED VALUE "ABCDEF".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        ASTART SECTION.
#### jkl, r1411        A01.
#### jkl, r1411            ALLOCATE MYFLD INITIALIZED.
#### jkl, r1411            IF MYFLD NOT = "ABCDEF"
#### jkl, r1411               DISPLAY MYFLD
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            FREE ADDRESS OF MYFLD.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ALLOCATE / FREE with BASED item (2)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 MYFLD         BASED.
#### jkl, r1411              03 MYFLDX  PIC X.
#### jkl, r1411              03 MYFLD9  PIC 9.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF ADDRESS OF MYFLD NOT = NULL
#### jkl, r1411               DISPLAY "BASED ITEM WITH ADDRESS ON START"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            FREE MYFLD.
#### jkl, r1411            ALLOCATE MYFLD.
#### jkl, r1411            IF ADDRESS OF MYFLD = NULL
#### jkl, r1411               DISPLAY "BASED ITEM WITHOUT ADDRESS AFTER ALLOCATE"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            INITIALIZE MYFLD.
#### jkl, r1411            IF MYFLD NOT = " 0"
#### jkl, r1411               DISPLAY "BASED ITEM INITIALIZED WRONG: "
#### jkl, r1411                  WITH NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411               DISPLAY MYFLD
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411 
#### jkl, r1411            FREE ADDRESS OF MYFLD.
#### jkl, r1411            IF ADDRESS OF MYFLD NOT = NULL
#### jkl, r1411               DISPLAY "BASED ITEM WITH ADDRESS AFTER FREE"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 # Run both executable and module as we have a different code generation here
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ALLOCATE CHARACTERS INITIALIZED TO])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  MYPTR        USAGE POINTER.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01  MYFLD        PIC X(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        ASTART SECTION.
#### jkl, r1411        A01.
#### jkl, r1411            ALLOCATE 4 CHARACTERS
#### jkl, r1411                     INITIALIZED TO "ABCD"
#### jkl, r1411                     RETURNING MYPTR.
#### jkl, r1411            SET ADDRESS OF MYFLD TO MYPTR.
#### jkl, r1411            IF MYFLD NOT = "ABCD"
#### jkl, r1411               DISPLAY MYFLD
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            FREE MYPTR.
#### jkl, r1411            ALLOCATE 4 CHARACTERS
#### jkl, r1411                     INITIALIZED TO ALL "Z"
#### jkl, r1411                     RETURNING MYPTR.
#### jkl, r1411            SET ADDRESS OF MYFLD TO MYPTR.
#### jkl, r1411            IF MYFLD NOT = "ZZZZ"
#### jkl, r1411               DISPLAY MYFLD
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            FREE MYPTR.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Initialized value with defaultbyte])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  MYFLD        PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        ASTART SECTION.
#### jkl, r1411        A01.
#### jkl, r1411            IF MYFLD NOT = "AAAAAA"
#### jkl, r1411               DISPLAY MYFLD
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fdefaultbyte=A prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL with OMITTED parameter])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X.
#### jkl, r1411        01 P2            PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION USING P1 OPTIONAL P2.
#### jkl, r1411            IF P2 NOT OMITTED
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P1            PIC X    VALUE "A".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" USING P1
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "callee" USING P1 OMITTED
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL in from C, cob_call_params explicitly set])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X.
#### jkl, r1411        01 P2            PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION USING P1 OPTIONAL P2.
#### jkl, r1411            IF P2 NOT OMITTED
#### jkl, r1411               DISPLAY 'UNEXPECTED P2: ' P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            DISPLAY 'P1: ' P1 WITH NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.c], [[
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 int callee (char *, char *);
#### jkl, r1411 
#### jkl, r1411 #ifndef NULL
#### jkl, r1411 #define NULL (void*)0
#### jkl, r1411 #endif
#### jkl, r1411 
#### jkl, r1411 int
#### jkl, r1411 main (int argc, char **argv)
#### jkl, r1411 {
#### jkl, r1411    cob_global *cobol_global;
#### jkl, r1411    /* for storing COBOL return code */
#### jkl, r1411    int cob_ret;
#### jkl, r1411 
#### jkl, r1411    /* initialize parameters */
#### jkl, r1411    char *p1 = "A";
#### jkl, r1411 
#### jkl, r1411    /* initialize the COBOL run-time library */
#### jkl, r1411    cob_init(argc, argv);
#### jkl, r1411 
#### jkl, r1411    /* setup for COBOL parameter handling */
#### jkl, r1411    cobol_global = cob_get_global_ptr ();
#### jkl, r1411    cobol_global->cob_call_params = 1;
#### jkl, r1411 
#### jkl, r1411    /* call COBOL program */
#### jkl, r1411    cob_ret = callee (p1, NULL);
#### jkl, r1411 
#### jkl, r1411    /* Clean up and terminate - This does not return */
#### jkl, r1411    cob_stop_run (cob_ret);
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [P1: A], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL in from C, cob_call_params unknown])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X.
#### jkl, r1411        01 P2            PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION USING P1 P2.
#### jkl, r1411            IF P1 NOT EQUAL "A"
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF P2 NOT EQUAL "FROM C"
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "OK" WITH NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.c], [[
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 int callee (char *, char *);
#### jkl, r1411 
#### jkl, r1411 int
#### jkl, r1411 main (int argc, char **argv)
#### jkl, r1411 {
#### jkl, r1411    /* for storing COBOL return code */
#### jkl, r1411    int cob_ret;
#### jkl, r1411 
#### jkl, r1411    /* initialize parameters */
#### jkl, r1411    char *p1 = "A";
#### jkl, r1411    char *p2 = "FROM C";
#### jkl, r1411 
#### jkl, r1411    /* initialize the COBOL run-time library */
#### jkl, r1411    cob_init (argc, argv);
#### jkl, r1411 
#### jkl, r1411    /* call COBOL program */
#### jkl, r1411    cob_ret = callee (p1, p2);
#### jkl, r1411 
#### jkl, r1411    /* Clean up and terminate - This does not return */
#### jkl, r1411    cob_stop_run (cob_ret);
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL C with callback, PROCEDURE DIVISION EXTERN])
#### jkl, r1411 AT_KEYWORDS([runmisc extensions call-convention])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 CB            USAGE PROGRAM-POINTER.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            SET CB TO ENTRY "callback"
#### jkl, r1411            CALL STATIC "cprog" USING BY VALUE CB
#### jkl, r1411            END-CALL
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callback.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            CALL-CONVENTION 0 IS EXTERN.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            USAGE POINTER.
#### jkl, r1411        01 P2            USAGE BINARY-LONG.
#### jkl, r1411        01 P3            PIC X(8).
#### jkl, r1411        PROCEDURE        DIVISION EXTERN USING
#### jkl, r1411                         BY VALUE P1 P2 BY REFERENCE P3.
#### jkl, r1411            IF P1 NOT EQUAL ADDRESS OF P3
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            IF P2 NOT EQUAL 42
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            IF P3 NOT EQUAL "CALLBACK"
#### jkl, r1411               DISPLAY P3
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([cprog.c], [[
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 COB_EXT_EXPORT int
#### jkl, r1411 cprog (void *cb)
#### jkl, r1411 {
#### jkl, r1411    char *p1;
#### jkl, r1411    int  p2 = 42;
#### jkl, r1411    char *p3 = "CALLBACK";
#### jkl, r1411 
#### jkl, r1411    p1 = p3;
#### jkl, r1411    ((int (*)(char *, int, char *))cb)(p1, p2, p3);
#### jkl, r1411    return 0;
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL C with callback, ENTRY-CONVENTION EXTERN])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        OPTIONS.
#### jkl, r1411            ENTRY-CONVENTION COBOL.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 CB            USAGE PROGRAM-POINTER.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            SET CB TO ENTRY "callback"
#### jkl, r1411            CALL STATIC "cprog" USING BY VALUE CB
#### jkl, r1411            END-CALL
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callback.
#### jkl, r1411        OPTIONS.
#### jkl, r1411            ENTRY-CONVENTION EXTERN.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            USAGE POINTER.
#### jkl, r1411        01 P2            USAGE BINARY-LONG.
#### jkl, r1411        01 P3            PIC X(8).
#### jkl, r1411        PROCEDURE        DIVISION USING
#### jkl, r1411                         BY VALUE P1 P2 BY REFERENCE P3.
#### jkl, r1411            IF P1 NOT EQUAL ADDRESS OF P3
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            IF P2 NOT EQUAL 42
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            IF P3 NOT EQUAL "CALLBACK"
#### jkl, r1411               DISPLAY P3
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([cprog.c], [[
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 COB_EXT_EXPORT int
#### jkl, r1411 cprog (void *cb)
#### jkl, r1411 {
#### jkl, r1411    char *p1;
#### jkl, r1411    int  p2 = 42;
#### jkl, r1411    char *p3 = "CALLBACK";
#### jkl, r1411 
#### jkl, r1411    p1 = p3;
#### jkl, r1411    ((int (*)(char *, int, char *))cb)(p1, p2, p3);
#### jkl, r1411    return 0;
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -Wno-unfinished -o prog prog.cob cprog.c], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL in from C with init missing / implicit])
#### jkl, r1411 AT_KEYWORDS([runmisc implicit-init])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X.
#### jkl, r1411        01 P2            PIC X(6).
#### jkl, r1411        PROCEDURE        DIVISION USING P1 P2.
#### jkl, r1411            IF P1 NOT EQUAL "A"
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF P2 NOT EQUAL "FROM C"
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "OK" WITH NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.c], [[
#### jkl, r1411 int callee (char *, char *);
#### jkl, r1411 
#### jkl, r1411 int
#### jkl, r1411 main (int argc, char **argv)
#### jkl, r1411 {
#### jkl, r1411    /* initialize parameters */
#### jkl, r1411    char *p1 = "A";
#### jkl, r1411    char *p2 = "FROM C";
#### jkl, r1411 
#### jkl, r1411    /* call COBOL program (initialization missing)
#### jkl, r1411       note: COBOL program terminates the program by STOP RUN */
#### jkl, r1411    (void)callee (p1, p2);
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -o caller caller.c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
#### jkl, r1411 [libcob: cob_init() has not been called
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fimplicit-init -o caller caller.c callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([CALL STATIC C from COBOL])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P1            PIC X VALUE "A".
#### jkl, r1411        01 P2            PIC X(7).
#### jkl, r1411        77 P2-COB        PIC X(7).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL STATIC 'callee' USING P1 P2
#### jkl, r1411            IF P1 NOT EQUAL "B"
#### jkl, r1411               DISPLAY 'NOT A: ' P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF
#### jkl, r1411            UNSTRING P2 DELIMITED BY LOW-VALUE
#### jkl, r1411               INTO P2-COB
#### jkl, r1411            END-UNSTRING
#### jkl, r1411            EVALUATE TRUE
#### jkl, r1411               WHEN P2-COB NOT EQUAL "FROM C"
#### jkl, r1411                  DISPLAY P2-COB '-' P2
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411               WHEN RETURN-CODE NOT = 3
#### jkl, r1411                  DISPLAY RETURN-CODE
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411               WHEN OTHER
#### jkl, r1411                  DISPLAY 'OK'  WITH NO ADVANCING
#### jkl, r1411                  END-DISPLAY
#### jkl, r1411                  MOVE 0  TO RETURN-CODE
#### jkl, r1411            END-EVALUATE
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.c], [[
#### jkl, r1411 #include <string.h>
#### jkl, r1411 
#### jkl, r1411 int
#### jkl, r1411 callee (char *p1, char *p2)
#### jkl, r1411 {
#### jkl, r1411    if (p1[0] == 'A') {
#### jkl, r1411       p1[0] = 'B';
#### jkl, r1411    }
#### jkl, r1411    memcpy (p2, "FROM C", 6);
#### jkl, r1411 
#### jkl, r1411    return 3;
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -o caller caller.cob callee.c], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [OK], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ANY LENGTH (1)])
#### jkl, r1411 AT_KEYWORDS([runmisc CALL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P2            PIC 99.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X ANY LENGTH.
#### jkl, r1411        PROCEDURE        DIVISION USING P1.
#### jkl, r1411            MOVE LENGTH OF P1 TO P2.
#### jkl, r1411            IF P2 NOT = 6
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF P1 NOT = "OKOKOK"
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P1            PIC X(6) VALUE "OKOKOK".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" USING P1
#### jkl, r1411            END-CALL.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ANY LENGTH (2)])
#### jkl, r1411 AT_KEYWORDS([runmisc CALL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P2            PIC XXX.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 P1            PIC X ANY LENGTH.
#### jkl, r1411        PROCEDURE        DIVISION USING P1.
#### jkl, r1411            MOVE P1 TO P2.
#### jkl, r1411            IF P2 NOT = "OK "
#### jkl, r1411               DISPLAY P2
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE SPACE TO P1.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 P1            PIC X(2) VALUE "OK".
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" USING P1
#### jkl, r1411            END-CALL.
#### jkl, r1411            IF P1 NOT = SPACE
#### jkl, r1411               DISPLAY P1
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ANY LENGTH (3)])
#### jkl, r1411 AT_KEYWORDS([runmisc CALL])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 str PIC X(20) VALUE ALL "X".
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            CALL "subprog" USING str
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. subprog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01 str PIC X ANY LENGTH.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING str.
#### jkl, r1411            MOVE "abcd" TO str
#### jkl, r1411            DISPLAY FUNCTION TRIM (str)
#### jkl, r1411            MOVE "abcd" TO str (5:)
#### jkl, r1411            DISPLAY FUNCTION TRIM (str)
#### jkl, r1411            MOVE ALL "a" TO str
#### jkl, r1411            DISPLAY FUNCTION TRIM (str)
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM subprog.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [abcd
#### jkl, r1411 abcdabcd
#### jkl, r1411 aaaaaaaaaaaaaaaaaaaa
#### jkl, r1411 ])
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ANY LENGTH (4)])
#### jkl, r1411 AT_KEYWORDS([runmisc IF CALL])
#### jkl, r1411 
#### jkl, r1411 # comparision of any length was done only for first character - see bug 511
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 str PIC X(20) VALUE ALL "X".
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            CALL "subprog" USING str
#### jkl, r1411            move '   45'   to str
#### jkl, r1411            CALL "subprog" USING str
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM prog.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. subprog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01 str PIC X ANY LENGTH.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING str.
#### jkl, r1411            IF str = 'X'
#### jkl, r1411              DISPLAY 'X is X'
#### jkl, r1411            END-IF
#### jkl, r1411            IF str = space
#### jkl, r1411              DISPLAY 'X is space'
#### jkl, r1411            END-IF
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM subprog.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ANY LENGTH (5)])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 # any length variables resulted in SIGSEGV when module was first program called
#### jkl, r1411 
#### jkl, r1411 AT_DATA([subprog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. subprog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01 str1 PIC X ANY LENGTH.
#### jkl, r1411        01 str2 PIC X ANY LENGTH.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING str1 str2.
#### jkl, r1411            DISPLAY 'IN' WITH NO ADVANCING
#### jkl, r1411            .
#### jkl, r1411        END PROGRAM subprog.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE subprog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN subprog some test stuff], [0], [IN], [])
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([access to BASED item without allocation])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) BASED.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY X NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog2.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             BASED.
#### jkl, r1411           05 Y          PIC X(4).
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            DISPLAY Y NO ADVANCING
#### jkl, r1411            END-DISPLAY.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE prog2.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [1], [],
#### jkl, r1411 [libcob: prog.cob:8: BASED/LINKAGE item 'X' has NULL address
#### jkl, r1411 ])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog2], [1], [],
#### jkl, r1411 [libcob: prog2.cob:9: BASED/LINKAGE item 'X' (accessed by 'Y') has NULL address
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([access to OPTIONAL LINKAGE item not passed])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01 X             PIC X(4) VALUE '9876'.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL 'callee' USING X
#### jkl, r1411            END-CALL
#### jkl, r1411            CALL 'callee' USING OMITTED
#### jkl, r1411            END-CALL
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE          SECTION.
#### jkl, r1411        01 X.
#### jkl, r1411           05 Y          PIC X(4).
#### jkl, r1411        PROCEDURE        DIVISION USING OPTIONAL X.
#### jkl, r1411            IF Y NOT = '9876'
#### jkl, r1411               DISPLAY Y NO ADVANCING
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            GOBACK.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [1], [],
#### jkl, r1411 [libcob: callee.cob:9: LINKAGE item 'X' (accessed by 'Y') not passed by caller
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([STOP RUN WITH NORMAL STATUS])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            STOP RUN WITH NORMAL STATUS.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([STOP RUN WITH ERROR STATUS])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            STOP RUN WITH ERROR STATUS.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [1])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SYMBOLIC clause])
#### jkl, r1411 AT_KEYWORDS([runmisc ALPHABET])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411        SPECIAL-NAMES.
#### jkl, r1411            ALPHABET A-EBC IS EBCDIC
#### jkl, r1411            ALPHABET A-ASC IS ASCII
#### jkl, r1411            SYMBOLIC Z-EBC IS 241 IN A-EBC
#### jkl, r1411            SYMBOLIC Z-ASC IS  49 IN A-ASC
#### jkl, r1411            .
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  Z            PIC X.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE Z-ASC   TO Z.
#### jkl, r1411            IF Z NOT = "0"
#### jkl, r1411               DISPLAY Z
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE Z-EBC   TO Z.
#### jkl, r1411            IF Z NOT = "0"
#### jkl, r1411               DISPLAY Z
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([OCCURS clause with 1 entry])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  D1.
#### jkl, r1411            03  FILLER   OCCURS 1.
#### jkl, r1411                05 D1-ENTRY   PIC X(03) value '123'.
#### jkl, r1411        01  D2.
#### jkl, r1411            03  D2-ENTRY   PIC X(03)  value 'ABC'  OCCURS 1.
#### jkl, r1411        01  D1TOR.
#### jkl, r1411            03  FILLER   PIC X(03) value '456'.
#### jkl, r1411        01  D1-R         REDEFINES D1TOR.
#### jkl, r1411            03  FILLER   OCCURS 1.
#### jkl, r1411                05 D1-R-ENTRY   PIC X(03).
#### jkl, r1411        01  D2TOR.
#### jkl, r1411            03  FILLER   PIC X(03) value 'DEF'.
#### jkl, r1411        01  D2-R         REDEFINES D2TOR.
#### jkl, r1411            03  D2-R-ENTRY   PIC X(03)   OCCURS 1.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            IF D1-ENTRY (1) NOT = "123"
#### jkl, r1411               DISPLAY D1-ENTRY (1)
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF D2-ENTRY (1) NOT = "ABC"
#### jkl, r1411               DISPLAY D2-ENTRY (1)
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF D1-R-ENTRY (1) NOT = "456"
#### jkl, r1411               DISPLAY D1-R-ENTRY (1)
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            IF D2-R-ENTRY (1) NOT = "DEF"
#### jkl, r1411               DISPLAY D2-R-ENTRY (1)
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Computing of different USAGEs w/o decimal point])
#### jkl, r1411 AT_KEYWORDS([runmisc
#### jkl, r1411 BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
#### jkl, r1411 COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-X COMP-N
#### jkl, r1411 FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. 'prog'.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411 
#### jkl, r1411       *
#### jkl, r1411        77  BCL-A           BINARY-C-LONG    VALUE 1.
#### jkl, r1411        77  BCL-B           BINARY-C-LONG    VALUE 10.
#### jkl, r1411        77  BCL-RES         BINARY-C-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  BC-A            BINARY-CHAR      VALUE 1.
#### jkl, r1411        77  BC-B            BINARY-CHAR      VALUE 10.
#### jkl, r1411        77  BC-RES          BINARY-CHAR.
#### jkl, r1411       *
#### jkl, r1411        77  BD-A            BINARY-DOUBLE    VALUE 1.
#### jkl, r1411        77  BD-B            BINARY-DOUBLE    VALUE 10.
#### jkl, r1411        77  BD-RES          BINARY-DOUBLE.
#### jkl, r1411       *
#### jkl, r1411        77  BL-A            BINARY-LONG      VALUE 1.
#### jkl, r1411        77  BL-B            BINARY-LONG      VALUE 10.
#### jkl, r1411        77  BL-RES          BINARY-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  C-A     PIC S99 COMP             VALUE 1.
#### jkl, r1411        77  C-B     PIC S99 COMP             VALUE 10.
#### jkl, r1411        77  C-RES   PIC S99 COMP.
#### jkl, r1411       *
#### jkl, r1411        77  C1-A            COMP-1           VALUE 1.
#### jkl, r1411        77  C1-B            COMP-1           VALUE 10.
#### jkl, r1411        77  C1-RES          COMP-1.
#### jkl, r1411       *
#### jkl, r1411        77  C2-A            COMP-2           VALUE 1.
#### jkl, r1411        77  C2-B            COMP-2           VALUE 10.
#### jkl, r1411        77  C2-RES          COMP-2.
#### jkl, r1411       *
#### jkl, r1411        77  C3-A    PIC S99 COMP-3           VALUE 1.
#### jkl, r1411        77  C3-B    PIC S99 COMP-3           VALUE 10.
#### jkl, r1411        77  C3-RES  PIC S99 COMP-3.
#### jkl, r1411       *
#### jkl, r1411        77  C5-A    PIC S99 COMP-5           VALUE 1.
#### jkl, r1411        77  C5-B    PIC S99 COMP-5           VALUE 10.
#### jkl, r1411        77  C5-RES  PIC S99 COMP-5.
#### jkl, r1411       *
#### jkl, r1411        77  C6-A    PIC  99 COMP-6           VALUE 1.
#### jkl, r1411        77  C6-B    PIC  99 COMP-6           VALUE 10.
#### jkl, r1411        77  C6-RES  PIC  99 COMP-6.
#### jkl, r1411       *
#### jkl, r1411        77  CN9-A   PIC  99 COMP-N           VALUE 1.
#### jkl, r1411        77  CN9-B   PIC  99 COMP-N           VALUE 10.
#### jkl, r1411        77  CN9-RES PIC  99 COMP-N.
#### jkl, r1411       *
#### jkl, r1411        77  CNX-A   PIC  X  COMP-N           VALUE 1.
#### jkl, r1411        77  CNX-B   PIC  X  COMP-N           VALUE 10.
#### jkl, r1411        77  CNX-RES PIC  X  COMP-N.
#### jkl, r1411       *
#### jkl, r1411        77  CX9-A   PIC  99 COMP-X           VALUE 1.
#### jkl, r1411        77  CX9-B   PIC  99 COMP-X           VALUE 10.
#### jkl, r1411        77  CX9-RES PIC  99 COMP-X.
#### jkl, r1411       *
#### jkl, r1411        77  CXX-A   PIC  X  COMP-X           VALUE 1.
#### jkl, r1411        77  CXX-B   PIC  X  COMP-X           VALUE 10.
#### jkl, r1411        77  CXX-RES PIC  X  COMP-X.
#### jkl, r1411       *
#### jkl, r1411        77  D-A     PIC  S99                 VALUE 1.
#### jkl, r1411        77  D-B     PIC  S99                 VALUE 10.
#### jkl, r1411        77  D-RES   PIC  S99.
#### jkl, r1411       *
#### jkl, r1411        77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.
#### jkl, r1411        77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.
#### jkl, r1411        77  FD16-RES        FLOAT-DECIMAL-16.
#### jkl, r1411       *
#### jkl, r1411        77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.
#### jkl, r1411        77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.
#### jkl, r1411        77  FD34-RES        FLOAT-DECIMAL-34.
#### jkl, r1411       *
#### jkl, r1411        77  FL-A            FLOAT-LONG       VALUE 1.
#### jkl, r1411        77  FL-B            FLOAT-LONG       VALUE 10.
#### jkl, r1411        77  FL-RES          FLOAT-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  FS-A            FLOAT-SHORT      VALUE 1.
#### jkl, r1411        77  FS-B            FLOAT-SHORT      VALUE 10.
#### jkl, r1411        77  FS-RES          FLOAT-SHORT.
#### jkl, r1411       *
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411       *
#### jkl, r1411            ADD  BCL-B  TO BCL-A END-ADD.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO BCL-A.
#### jkl, r1411            ADD  10    TO BCL-A END-ADD.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BCL-A.
#### jkl, r1411            SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BCL-A.
#### jkl, r1411            SUBTRACT 10   FROM BCL-A END-SUBTRACT.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BC-B  TO BC-A END-ADD.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO BC-A.
#### jkl, r1411            ADD  10    TO BC-A END-ADD.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BC-A.
#### jkl, r1411            SUBTRACT BC-B FROM BC-A END-SUBTRACT.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BC-A.
#### jkl, r1411            SUBTRACT 10   FROM BC-A END-SUBTRACT.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BD-B  TO BD-A END-ADD.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO BD-A.
#### jkl, r1411            ADD  10    TO BD-A END-ADD.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BD-A.
#### jkl, r1411            SUBTRACT BD-B FROM BD-A END-SUBTRACT.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BD-A.
#### jkl, r1411            SUBTRACT 10   FROM BD-A END-SUBTRACT.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BL-B  TO BL-A END-ADD.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO BL-A.
#### jkl, r1411            ADD  10    TO BL-A END-ADD.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BL-A.
#### jkl, r1411            SUBTRACT BL-B FROM BL-A END-SUBTRACT.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO BL-A.
#### jkl, r1411            SUBTRACT 10   FROM BL-A END-SUBTRACT.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C-B  TO C-A END-ADD.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP + COMP'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C-A.
#### jkl, r1411            ADD  10    TO C-A END-ADD.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C-A.
#### jkl, r1411            SUBTRACT C-B FROM C-A END-SUBTRACT.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP - COMP'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C-A.
#### jkl, r1411            SUBTRACT 10   FROM C-A END-SUBTRACT.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C1-B  TO C1-A END-ADD.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-1 + COMP-1'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C1-A.
#### jkl, r1411            ADD  10    TO C1-A END-ADD.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-1 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C1-A.
#### jkl, r1411            SUBTRACT C1-B FROM C1-A END-SUBTRACT.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-1 - COMP-1'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C1-A.
#### jkl, r1411            SUBTRACT 10   FROM C1-A END-SUBTRACT.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-1 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C2-B  TO C2-A END-ADD.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-2 + COMP-2'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C2-A.
#### jkl, r1411            ADD  10    TO C2-A END-ADD.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-2 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C2-A.
#### jkl, r1411            SUBTRACT C2-B FROM C2-A END-SUBTRACT.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-2 - COMP-2'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C2-A.
#### jkl, r1411            SUBTRACT 10   FROM C2-A END-SUBTRACT.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-2 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C3-B  TO C3-A END-ADD.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-3 + COMP-3'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C3-A.
#### jkl, r1411            ADD  10    TO C3-A END-ADD.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-3 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C3-A.
#### jkl, r1411            SUBTRACT C3-B FROM C3-A END-SUBTRACT.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-3 - COMP-3'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C3-A.
#### jkl, r1411            SUBTRACT 10   FROM C3-A END-SUBTRACT.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-3 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C5-B  TO C5-A END-ADD.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-5 + COMP-5'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C5-A.
#### jkl, r1411            ADD  10    TO C5-A END-ADD.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-5 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C5-A.
#### jkl, r1411            SUBTRACT C5-B FROM C5-A END-SUBTRACT.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-5 - COMP-5'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C5-A.
#### jkl, r1411            SUBTRACT 10   FROM C5-A END-SUBTRACT.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-5 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C6-B  TO C6-A END-ADD.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-6 + COMP-6'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO C6-A.
#### jkl, r1411            ADD  10    TO C6-A END-ADD.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-6 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C6-A.
#### jkl, r1411            SUBTRACT C6-B FROM C6-A END-SUBTRACT.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-6 - COMP-6'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO C6-A.
#### jkl, r1411            SUBTRACT 10   FROM C6-A END-SUBTRACT.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-6 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CN9-B  TO CN9-A END-ADD.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-N + COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO CN9-A.
#### jkl, r1411            ADD  10    TO CN9-A END-ADD.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-N + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CN9-A.
#### jkl, r1411            SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-N - COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CN9-A.
#### jkl, r1411            SUBTRACT 10   FROM CN9-A END-SUBTRACT.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-N - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CNX-B  TO CNX-A END-ADD.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-N + COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO CNX-A.
#### jkl, r1411            ADD  10    TO CNX-A END-ADD.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-N + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CNX-A.
#### jkl, r1411            SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-N - COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CNX-A.
#### jkl, r1411            SUBTRACT 10   FROM CNX-A END-SUBTRACT.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-N - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CX9-B  TO CX9-A END-ADD.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-X + COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO CX9-A.
#### jkl, r1411            ADD  10    TO CX9-A END-ADD.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-X + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CX9-A.
#### jkl, r1411            SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-X - COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CX9-A.
#### jkl, r1411            SUBTRACT 10   FROM CX9-A END-SUBTRACT.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-X - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CXX-B  TO CXX-A END-ADD.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-X + COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO CXX-A.
#### jkl, r1411            ADD  10    TO CXX-A END-ADD.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR COMP-X + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CXX-A.
#### jkl, r1411            SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-X - COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO CXX-A.
#### jkl, r1411            SUBTRACT 10   FROM CXX-A END-SUBTRACT.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR COMP-X - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  D-B  TO D-A END-ADD.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR DISPLAY + DISPLAY'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO D-A.
#### jkl, r1411            ADD  10    TO D-A END-ADD.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR DISPLAY + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO D-A.
#### jkl, r1411            SUBTRACT D-B FROM D-A END-SUBTRACT.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR DISPLAY - DISPLAY'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO D-A.
#### jkl, r1411            SUBTRACT 10   FROM D-A END-SUBTRACT.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR DISPLAY - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FD16-B  TO FD16-A END-ADD.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO FD16-A.
#### jkl, r1411            ADD  10    TO FD16-A END-ADD.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FD16-A.
#### jkl, r1411            SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FD16-A.
#### jkl, r1411            SUBTRACT 10   FROM FD16-A END-SUBTRACT.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FD34-B  TO FD34-A END-ADD.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO FD34-A.
#### jkl, r1411            ADD  10    TO FD34-A END-ADD.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FD34-A.
#### jkl, r1411            SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FD34-A.
#### jkl, r1411            SUBTRACT 10   FROM FD34-A END-SUBTRACT.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FL-B  TO FL-A END-ADD.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO FL-A.
#### jkl, r1411            ADD  10    TO FL-A END-ADD.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FL-A.
#### jkl, r1411            SUBTRACT FL-B FROM FL-A END-SUBTRACT.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FL-A.
#### jkl, r1411            SUBTRACT 10   FROM FL-A END-SUBTRACT.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FS-B  TO FS-A END-ADD.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1     TO FS-A.
#### jkl, r1411            ADD  10    TO FS-A END-ADD.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 11
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FS-A.
#### jkl, r1411            SUBTRACT FS-B FROM FS-A END-SUBTRACT.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11    TO FS-A.
#### jkl, r1411            SUBTRACT 10   FROM FS-A END-SUBTRACT.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 1
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Computing of different USAGEs w/- decimal point])
#### jkl, r1411 AT_KEYWORDS([runmisc
#### jkl, r1411 BINARY-C-LONG BINARY-CHAR BINARY-DOUBLE BINARY-LONG
#### jkl, r1411 COMP COMP-1 COMP-2 COMP-3 COMP-5 COMP-6 COMP-N COMP-X
#### jkl, r1411 FLOAT-DECIMAL-16 FLOAT-DECIMAL-34 FLOAT-LONG FLOAT-SHORT])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. 'prog'.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411       *
#### jkl, r1411        77  BCL-A           BINARY-C-LONG    VALUE 1.0.
#### jkl, r1411        77  BCL-B           BINARY-C-LONG    VALUE 10.0.
#### jkl, r1411        77  BCL-RES         BINARY-C-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  BC-A            BINARY-CHAR      VALUE 1.0.
#### jkl, r1411        77  BC-B            BINARY-CHAR      VALUE 10.0.
#### jkl, r1411        77  BC-RES          BINARY-CHAR.
#### jkl, r1411       *
#### jkl, r1411        77  BD-A            BINARY-DOUBLE    VALUE 1.0.
#### jkl, r1411        77  BD-B            BINARY-DOUBLE    VALUE 10.0.
#### jkl, r1411        77  BD-RES          BINARY-DOUBLE.
#### jkl, r1411       *
#### jkl, r1411        77  BL-A            BINARY-LONG      VALUE 1.0.
#### jkl, r1411        77  BL-B            BINARY-LONG      VALUE 10.0.
#### jkl, r1411        77  BL-RES          BINARY-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  C-A     PIC S99 COMP             VALUE 1.0.
#### jkl, r1411        77  C-B     PIC S99 COMP             VALUE 10.0.
#### jkl, r1411        77  C-RES   PIC S99 COMP.
#### jkl, r1411       *
#### jkl, r1411        77  C1-A            COMP-1           VALUE 1.0.
#### jkl, r1411        77  C1-B            COMP-1           VALUE 10.0.
#### jkl, r1411        77  C1-RES          COMP-1.
#### jkl, r1411       *
#### jkl, r1411        77  C2-A            COMP-2           VALUE 1.0.
#### jkl, r1411        77  C2-B            COMP-2           VALUE 10.0.
#### jkl, r1411        77  C2-RES          COMP-2.
#### jkl, r1411       *
#### jkl, r1411        77  C3-A    PIC S99 COMP-3           VALUE 1.0.
#### jkl, r1411        77  C3-B    PIC S99 COMP-3           VALUE 10.0.
#### jkl, r1411        77  C3-RES  PIC S99 COMP-3.
#### jkl, r1411       *
#### jkl, r1411        77  C5-A    PIC S99 COMP-5           VALUE 1.0.
#### jkl, r1411        77  C5-B    PIC S99 COMP-5           VALUE 10.0.
#### jkl, r1411        77  C5-RES  PIC S99 COMP-5.
#### jkl, r1411       *
#### jkl, r1411        77  C6-A    PIC  99 COMP-6           VALUE 1.0.
#### jkl, r1411        77  C6-B    PIC  99 COMP-6           VALUE 10.0.
#### jkl, r1411        77  C6-RES  PIC  99 COMP-6.
#### jkl, r1411       *
#### jkl, r1411        77  CN9-A   PIC  99 COMP-N           VALUE 1.
#### jkl, r1411        77  CN9-B   PIC  99 COMP-N           VALUE 10.
#### jkl, r1411        77  CN9-RES PIC  99 COMP-N.
#### jkl, r1411       *
#### jkl, r1411        77  CNX-A   PIC  X  COMP-N           VALUE 1.
#### jkl, r1411        77  CNX-B   PIC  X  COMP-N           VALUE 10.
#### jkl, r1411        77  CNX-RES PIC  X  COMP-N.
#### jkl, r1411       *
#### jkl, r1411        77  CX9-A   PIC  99 COMP-X           VALUE 1.
#### jkl, r1411        77  CX9-B   PIC  99 COMP-X           VALUE 10.
#### jkl, r1411        77  CX9-RES PIC  99 COMP-X.
#### jkl, r1411       *
#### jkl, r1411        77  CXX-A   PIC  X  COMP-X           VALUE 1.
#### jkl, r1411        77  CXX-B   PIC  X  COMP-X           VALUE 10.
#### jkl, r1411        77  CXX-RES PIC  X  COMP-X.
#### jkl, r1411       *
#### jkl, r1411        77  D-A     PIC  S99                 VALUE 1.0.
#### jkl, r1411        77  D-B     PIC  S99                 VALUE 10.0.
#### jkl, r1411        77  D-RES   PIC  S99.
#### jkl, r1411       *
#### jkl, r1411        77  FD16-A          FLOAT-DECIMAL-16 VALUE 1.0.
#### jkl, r1411        77  FD16-B          FLOAT-DECIMAL-16 VALUE 10.0.
#### jkl, r1411        77  FD16-RES        FLOAT-DECIMAL-16.
#### jkl, r1411       *
#### jkl, r1411        77  FD34-A          FLOAT-DECIMAL-34 VALUE 1.0.
#### jkl, r1411        77  FD34-B          FLOAT-DECIMAL-34 VALUE 10.0.
#### jkl, r1411        77  FD34-RES        FLOAT-DECIMAL-34.
#### jkl, r1411       *
#### jkl, r1411        77  FL-A            FLOAT-LONG       VALUE 1.0.
#### jkl, r1411        77  FL-B            FLOAT-LONG       VALUE 10.0.
#### jkl, r1411        77  FL-RES          FLOAT-LONG.
#### jkl, r1411       *
#### jkl, r1411        77  FS-A            FLOAT-SHORT      VALUE 1.0.
#### jkl, r1411        77  FS-B            FLOAT-SHORT      VALUE 10.0.
#### jkl, r1411        77  FS-RES          FLOAT-SHORT.
#### jkl, r1411       *
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411       *
#### jkl, r1411            ADD  BCL-B  TO BCL-A END-ADD.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG + BINARY-C-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO BCL-A.
#### jkl, r1411            ADD  10.0  TO BCL-A END-ADD.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BCL-A.
#### jkl, r1411            SUBTRACT BCL-B FROM BCL-A END-SUBTRACT.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG - BINARY-C-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BCL-A.
#### jkl, r1411            SUBTRACT 10.0 FROM BCL-A END-SUBTRACT.
#### jkl, r1411            MOVE BCL-A  TO BCL-RES.
#### jkl, r1411            IF BCL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-C-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BC-B  TO BC-A END-ADD.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR + BINARY-CHAR'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO BC-A.
#### jkl, r1411            ADD  10.0  TO BC-A END-ADD.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BC-A.
#### jkl, r1411            SUBTRACT BC-B FROM BC-A END-SUBTRACT.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR - BINARY-CHAR'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BC-A.
#### jkl, r1411            SUBTRACT 10.0 FROM BC-A END-SUBTRACT.
#### jkl, r1411            MOVE BC-A  TO BC-RES.
#### jkl, r1411            IF BC-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-CHAR - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BD-B  TO BD-A END-ADD.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE + BINARY-DOUBLE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO BD-A.
#### jkl, r1411            ADD  10.0  TO BD-A END-ADD.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BD-A.
#### jkl, r1411            SUBTRACT BD-B FROM BD-A END-SUBTRACT.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE - BINARY-DOUBLE'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BD-A.
#### jkl, r1411            SUBTRACT 10.0 FROM BD-A END-SUBTRACT.
#### jkl, r1411            MOVE BD-A  TO BD-RES.
#### jkl, r1411            IF BD-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-DOUBLE - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  BL-B  TO BL-A END-ADD.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG + BINARY-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO BL-A.
#### jkl, r1411            ADD  10.0  TO BL-A END-ADD.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BL-A.
#### jkl, r1411            SUBTRACT BL-B FROM BL-A END-SUBTRACT.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG - BINARY-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO BL-A.
#### jkl, r1411            SUBTRACT 10.0 FROM BL-A END-SUBTRACT.
#### jkl, r1411            MOVE BL-A  TO BL-RES.
#### jkl, r1411            IF BL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR BINARY-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C-B  TO C-A END-ADD.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP + COMP'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C-A.
#### jkl, r1411            ADD  10.0  TO C-A END-ADD.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C-A.
#### jkl, r1411            SUBTRACT C-B FROM C-A END-SUBTRACT.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP - COMP'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C-A END-SUBTRACT.
#### jkl, r1411            MOVE C-A  TO C-RES.
#### jkl, r1411            IF C-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C1-B  TO C1-A END-ADD.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-1 + COMP-1'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C1-A.
#### jkl, r1411            ADD  10.0  TO C1-A END-ADD.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-1 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C1-A.
#### jkl, r1411            SUBTRACT C1-B FROM C1-A END-SUBTRACT.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-1 - COMP-1'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C1-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C1-A END-SUBTRACT.
#### jkl, r1411            MOVE C1-A  TO C1-RES.
#### jkl, r1411            IF C1-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-1 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C2-B  TO C2-A END-ADD.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-2 + COMP-2'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C2-A.
#### jkl, r1411            ADD  10.0  TO C2-A END-ADD.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-2 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C2-A.
#### jkl, r1411            SUBTRACT C2-B FROM C2-A END-SUBTRACT.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-2 - COMP-2'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C2-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C2-A END-SUBTRACT.
#### jkl, r1411            MOVE C2-A  TO C2-RES.
#### jkl, r1411            IF C2-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-2 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C3-B  TO C3-A END-ADD.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-3 + COMP-3'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C3-A.
#### jkl, r1411            ADD  10.0  TO C3-A END-ADD.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-3 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C3-A.
#### jkl, r1411            SUBTRACT C3-B FROM C3-A END-SUBTRACT.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-3 - COMP-3'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C3-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C3-A END-SUBTRACT.
#### jkl, r1411            MOVE C3-A  TO C3-RES.
#### jkl, r1411            IF C3-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-3 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C5-B  TO C5-A END-ADD.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-5 + COMP-5'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C5-A.
#### jkl, r1411            ADD  10.0  TO C5-A END-ADD.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-5 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C5-A.
#### jkl, r1411            SUBTRACT C5-B FROM C5-A END-SUBTRACT.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-5 - COMP-5'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C5-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C5-A END-SUBTRACT.
#### jkl, r1411            MOVE C5-A  TO C5-RES.
#### jkl, r1411            IF C5-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-5 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  C6-B  TO C6-A END-ADD.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-6 + COMP-6'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO C6-A.
#### jkl, r1411            ADD  10.0  TO C6-A END-ADD.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-6 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C6-A.
#### jkl, r1411            SUBTRACT C6-B FROM C6-A END-SUBTRACT.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-6 - COMP-6'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO C6-A.
#### jkl, r1411            SUBTRACT 10.0 FROM C6-A END-SUBTRACT.
#### jkl, r1411            MOVE C6-A  TO C6-RES.
#### jkl, r1411            IF C6-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-6 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CN9-B  TO CN9-A END-ADD.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N + COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0    TO CN9-A.
#### jkl, r1411            ADD  10.0   TO CN9-A END-ADD.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CN9-A.
#### jkl, r1411            SUBTRACT CN9-B FROM CN9-A END-SUBTRACT.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N - COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CN9-A.
#### jkl, r1411            SUBTRACT 10.0  FROM CN9-A END-SUBTRACT.
#### jkl, r1411            MOVE CN9-A  TO CN9-RES.
#### jkl, r1411            IF CN9-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CNX-B  TO CNX-A END-ADD.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N + COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0    TO CNX-A.
#### jkl, r1411            ADD  10.0   TO CNX-A END-ADD.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CNX-A.
#### jkl, r1411            SUBTRACT CNX-B FROM CNX-A END-SUBTRACT.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N - COMP-N'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CNX-A.
#### jkl, r1411            SUBTRACT 10.0 FROM CNX-A END-SUBTRACT.
#### jkl, r1411            MOVE CNX-A  TO CNX-RES.
#### jkl, r1411            IF CNX-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-N - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CX9-B  TO CX9-A END-ADD.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X + COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0    TO CX9-A.
#### jkl, r1411            ADD  10.0   TO CX9-A END-ADD.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CX9-A.
#### jkl, r1411            SUBTRACT CX9-B FROM CX9-A END-SUBTRACT.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X - COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CX9-A.
#### jkl, r1411            SUBTRACT 10.0 FROM CX9-A END-SUBTRACT.
#### jkl, r1411            MOVE CX9-A  TO CX9-RES.
#### jkl, r1411            IF CX9-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  CXX-B  TO CXX-A END-ADD.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X + COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0    TO CXX-A.
#### jkl, r1411            ADD  10.0   TO CXX-A END-ADD.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0    TO CXX-A.
#### jkl, r1411            SUBTRACT CXX-B FROM CXX-A END-SUBTRACT.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X - COMP-X'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0   TO CXX-A.
#### jkl, r1411            SUBTRACT 10.0 FROM CXX-A END-SUBTRACT.
#### jkl, r1411            MOVE CXX-A  TO CXX-RES.
#### jkl, r1411            IF CXX-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR COMP-X - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  D-B  TO D-A END-ADD.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR DISPLAY + DISPLAY'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0  TO D-A.
#### jkl, r1411            ADD  10.0 TO D-A END-ADD.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR DISPLAY + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0 TO D-A.
#### jkl, r1411            SUBTRACT D-B FROM D-A END-SUBTRACT.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR DISPLAY - DISPLAY'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0 TO D-A.
#### jkl, r1411            SUBTRACT 10.0 FROM D-A END-SUBTRACT.
#### jkl, r1411            MOVE D-A  TO D-RES.
#### jkl, r1411            IF D-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR DISPLAY - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FD16-B  TO FD16-A END-ADD.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 + FLOAT-DECIMAL-16'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO FD16-A.
#### jkl, r1411            ADD  10.0  TO FD16-A END-ADD.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FD16-A.
#### jkl, r1411            SUBTRACT FD16-B FROM FD16-A END-SUBTRACT.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 - FLOAT-DECIMAL-16'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FD16-A.
#### jkl, r1411            SUBTRACT 10.0 FROM FD16-A END-SUBTRACT.
#### jkl, r1411            MOVE FD16-A  TO FD16-RES.
#### jkl, r1411            IF FD16-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-16 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FD34-B  TO FD34-A END-ADD.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 + FLOAT-DECIMAL-34'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO FD34-A.
#### jkl, r1411            ADD  10.0  TO FD34-A END-ADD.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FD34-A.
#### jkl, r1411            SUBTRACT FD34-B FROM FD34-A END-SUBTRACT.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 - FLOAT-DECIMAL-34'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FD34-A.
#### jkl, r1411            SUBTRACT 10.0 FROM FD34-A END-SUBTRACT.
#### jkl, r1411            MOVE FD34-A  TO FD34-RES.
#### jkl, r1411            IF FD34-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-DECIMAL-34 - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FL-B  TO FL-A END-ADD.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG + FLOAT-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO FL-A.
#### jkl, r1411            ADD  10.0  TO FL-A END-ADD.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FL-A.
#### jkl, r1411            SUBTRACT FL-B FROM FL-A END-SUBTRACT.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG - FLOAT-LONG'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FL-A.
#### jkl, r1411            SUBTRACT 10.0 FROM FL-A END-SUBTRACT.
#### jkl, r1411            MOVE FL-A  TO FL-RES.
#### jkl, r1411            IF FL-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-LONG - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            ADD  FS-B  TO FS-A END-ADD.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT + FLOAT-SHORT'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 1.0   TO FS-A.
#### jkl, r1411            ADD  10.0  TO FS-A END-ADD.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 11.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT + NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FS-A.
#### jkl, r1411            SUBTRACT FS-B FROM FS-A END-SUBTRACT.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT - FLOAT-SHORT'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE 11.0  TO FS-A.
#### jkl, r1411            SUBTRACT 10.0 FROM FS-A END-SUBTRACT.
#### jkl, r1411            MOVE FS-A  TO FS-RES.
#### jkl, r1411            IF FS-RES NOT = 1.0
#### jkl, r1411               DISPLAY 'ERROR FLOAT-SHORT - NUM'
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411       *
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fnotrunc prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([C/C++ reserved words/predefined identifiers])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411       *
#### jkl, r1411       * Reserved Words in C (that aren't reserved in COBOL)
#### jkl, r1411       * var names MUST BE IN LOWER CASE (!)
#### jkl, r1411       *
#### jkl, r1411        77  const                       PIC X VALUE "A".
#### jkl, r1411        77  double                      PIC X VALUE "B".
#### jkl, r1411        77  float                       PIC X VALUE "C".
#### jkl, r1411        77  int                         PIC X VALUE "D".
#### jkl, r1411        77  short                       PIC X VALUE "E".
#### jkl, r1411        77  struct                      PIC X VALUE "F".
#### jkl, r1411        77  break                       PIC X VALUE "G".
#### jkl, r1411        77  long                        PIC X VALUE "H".
#### jkl, r1411        77  switch                      PIC X VALUE "I".
#### jkl, r1411        77  void                        PIC X VALUE "J".
#### jkl, r1411        77  case                        PIC X VALUE "K".
#### jkl, r1411        77  enum                        PIC X VALUE "L".
#### jkl, r1411        77  goto                        PIC X VALUE "M".
#### jkl, r1411        77  register                    PIC X VALUE "N".
#### jkl, r1411        77  sizeof                      PIC X VALUE "O".
#### jkl, r1411        77  volatile                    PIC X VALUE "P".
#### jkl, r1411        77  char                        PIC X VALUE "Q".
#### jkl, r1411        77  do                          PIC X VALUE "R".
#### jkl, r1411        77  extern                      PIC X VALUE "S".
#### jkl, r1411        77  static                      PIC X VALUE "T".
#### jkl, r1411        77  union                       PIC X VALUE "U".
#### jkl, r1411        77  while                       PIC X VALUE "V".
#### jkl, r1411       *
#### jkl, r1411       * More Reserved Words in C++
#### jkl, r1411       * var names MUST BE IN LOWER CASE (!)
#### jkl, r1411       *
#### jkl, r1411        77  asm                         PIC X VALUE "W".
#### jkl, r1411        77  dynamic_cast                PIC X VALUE "X".
#### jkl, r1411        77  namespace                   PIC X VALUE "Y".
#### jkl, r1411        77  reinterpret_cast            PIC X VALUE "Z".
#### jkl, r1411        77  try                         PIC X VALUE "a".
#### jkl, r1411        77  bool                        PIC X VALUE "b".
#### jkl, r1411        77  explicit                    PIC X VALUE "c".
#### jkl, r1411       *77  new                         PIC X VALUE "d".
#### jkl, r1411        77  static_cast                 PIC X VALUE "e".
#### jkl, r1411        77  typeid                      PIC X VALUE "f".
#### jkl, r1411        77  catch                       PIC X VALUE "g".
#### jkl, r1411        77  operator                    PIC X VALUE "h".
#### jkl, r1411        77  template                    PIC X VALUE "i".
#### jkl, r1411        77  typename                    PIC X VALUE "j".
#### jkl, r1411        77  friend                      PIC X VALUE "k".
#### jkl, r1411        77  private                     PIC X VALUE "l".
#### jkl, r1411        77  this                        PIC X VALUE "m".
#### jkl, r1411        77  const_cast                  PIC X VALUE "n".
#### jkl, r1411        77  inline                      PIC X VALUE "o".
#### jkl, r1411        77  public                      PIC X VALUE "p".
#### jkl, r1411        77  throw                       PIC X VALUE "q".
#### jkl, r1411        77  virtual                     PIC X VALUE "r".
#### jkl, r1411        77  mutable                     PIC X VALUE "s".
#### jkl, r1411        77  protected                   PIC X VALUE "t".
#### jkl, r1411        77  wchar_t                     PIC X VALUE "u".
#### jkl, r1411       *
#### jkl, r1411       * More Reserved Words in C++ (not essential)
#### jkl, r1411       * var names MUST BE IN LOWER CASE (!)
#### jkl, r1411       *
#### jkl, r1411        77  bitand                      PIC X VALUE "v".
#### jkl, r1411        77  compl                       PIC X VALUE "w".
#### jkl, r1411        77  not_eq                      PIC X VALUE "x".
#### jkl, r1411        77  or_eq                       PIC X VALUE "y".
#### jkl, r1411        77  xor_eq                      PIC X VALUE "z".
#### jkl, r1411        77  and_eq                      PIC X VALUE "0".
#### jkl, r1411        77  bitor                       PIC X VALUE "1".
#### jkl, r1411        77  xor                         PIC X VALUE "2".
#### jkl, r1411       *
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" USING   const
#### jkl, r1411                                  double
#### jkl, r1411                                  float
#### jkl, r1411                                  int
#### jkl, r1411                                  short
#### jkl, r1411                                  struct
#### jkl, r1411                                  break
#### jkl, r1411                                  long
#### jkl, r1411                                  switch
#### jkl, r1411                                  void
#### jkl, r1411                                  case
#### jkl, r1411                                  enum
#### jkl, r1411                                  goto
#### jkl, r1411                                  register
#### jkl, r1411                                  sizeof
#### jkl, r1411                                  volatile
#### jkl, r1411                                  char
#### jkl, r1411                                  do
#### jkl, r1411                                  *>extern
#### jkl, r1411                                  *>static
#### jkl, r1411                                  union
#### jkl, r1411                                  while
#### jkl, r1411            END-CALL.
#### jkl, r1411            CALL "callee2" USING  asm
#### jkl, r1411                                  dynamic_cast
#### jkl, r1411                                  namespace
#### jkl, r1411                                  reinterpret_cast
#### jkl, r1411                                  try
#### jkl, r1411                                  bool
#### jkl, r1411                                  explicit
#### jkl, r1411       *                          new
#### jkl, r1411                                  static_cast
#### jkl, r1411                                  typeid
#### jkl, r1411                                  catch
#### jkl, r1411                                  operator
#### jkl, r1411                                  template
#### jkl, r1411                                  typename
#### jkl, r1411                                  friend
#### jkl, r1411                                  private
#### jkl, r1411                                  this
#### jkl, r1411                                  const_cast
#### jkl, r1411                                  inline
#### jkl, r1411                                  public
#### jkl, r1411                                  throw
#### jkl, r1411                                  virtual
#### jkl, r1411                                  mutable
#### jkl, r1411                                  protected
#### jkl, r1411                                  wchar_t
#### jkl, r1411                                  bitand
#### jkl, r1411                                  compl
#### jkl, r1411                                  not_eq
#### jkl, r1411                                  or_eq
#### jkl, r1411                                  xor_eq
#### jkl, r1411                                  and_eq
#### jkl, r1411                                  bitor
#### jkl, r1411                                  xor
#### jkl, r1411            END-CALL.
#### jkl, r1411            MOVE x'00' TO         const
#### jkl, r1411                                  double
#### jkl, r1411                                  float
#### jkl, r1411                                  int
#### jkl, r1411                                  short
#### jkl, r1411                                  struct
#### jkl, r1411                                  break
#### jkl, r1411                                  long
#### jkl, r1411                                  switch
#### jkl, r1411                                  void
#### jkl, r1411                                  case
#### jkl, r1411                                  enum
#### jkl, r1411                                  goto
#### jkl, r1411                                  register
#### jkl, r1411                                  sizeof
#### jkl, r1411                                  volatile
#### jkl, r1411                                  char
#### jkl, r1411                                  do
#### jkl, r1411                                  extern
#### jkl, r1411                                  static
#### jkl, r1411                                  union
#### jkl, r1411                                  while
#### jkl, r1411                                  asm
#### jkl, r1411                                  dynamic_cast
#### jkl, r1411                                  namespace
#### jkl, r1411                                  reinterpret_cast
#### jkl, r1411                                  try
#### jkl, r1411                                  bool
#### jkl, r1411                                  explicit
#### jkl, r1411       *                          new
#### jkl, r1411                                  static_cast
#### jkl, r1411                                  typeid
#### jkl, r1411                                  catch
#### jkl, r1411                                  operator
#### jkl, r1411                                  template
#### jkl, r1411                                  typename
#### jkl, r1411                                  friend
#### jkl, r1411                                  private
#### jkl, r1411                                  this
#### jkl, r1411                                  const_cast
#### jkl, r1411                                  inline
#### jkl, r1411                                  public
#### jkl, r1411                                  throw
#### jkl, r1411                                  virtual
#### jkl, r1411                                  mutable
#### jkl, r1411                                  protected
#### jkl, r1411                                  wchar_t
#### jkl, r1411                                  bitand
#### jkl, r1411                                  compl
#### jkl, r1411                                  not_eq
#### jkl, r1411                                  or_eq
#### jkl, r1411                                  xor_eq
#### jkl, r1411                                  and_eq
#### jkl, r1411                                  bitor
#### jkl, r1411                                  xor
#### jkl, r1411                                  .
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411       *
#### jkl, r1411       * Reserved Words in C (that aren't reserved in COBOL)
#### jkl, r1411       * var names MUST BE IN LOWER CASE (!)
#### jkl, r1411       *
#### jkl, r1411        77  const                       PIC X.
#### jkl, r1411        77  double                      PIC X.
#### jkl, r1411        77  float                       PIC X.
#### jkl, r1411        77  int                         PIC X.
#### jkl, r1411        77  short                       PIC X.
#### jkl, r1411        77  struct                      PIC X.
#### jkl, r1411        77  break                       PIC X.
#### jkl, r1411        77  long                        PIC X.
#### jkl, r1411        77  switch                      PIC X.
#### jkl, r1411        77  void                        PIC X.
#### jkl, r1411        77  case                        PIC X.
#### jkl, r1411        77  enum                        PIC X.
#### jkl, r1411        77  goto                        PIC X.
#### jkl, r1411        77  register                    PIC X.
#### jkl, r1411        77  sizeof                      PIC X.
#### jkl, r1411        77  volatile                    PIC X.
#### jkl, r1411        77  char                        PIC X.
#### jkl, r1411        77  do                          PIC X.
#### jkl, r1411       *77  extern                      PIC X.
#### jkl, r1411       *77  static                      PIC X.
#### jkl, r1411        77  union                       PIC X.
#### jkl, r1411        77  while                       PIC X.
#### jkl, r1411        PROCEDURE        DIVISION USING
#### jkl, r1411                                  const
#### jkl, r1411                                  double
#### jkl, r1411                                  float
#### jkl, r1411                                  int
#### jkl, r1411                                  short
#### jkl, r1411                                  struct
#### jkl, r1411                                  break
#### jkl, r1411                                  long
#### jkl, r1411                                  switch
#### jkl, r1411                                  void
#### jkl, r1411                                  case
#### jkl, r1411                                  enum
#### jkl, r1411                                  goto
#### jkl, r1411                                  register
#### jkl, r1411                                  sizeof
#### jkl, r1411                                  volatile
#### jkl, r1411                                  char
#### jkl, r1411                                  do
#### jkl, r1411                                 *>extern
#### jkl, r1411                                 *>static
#### jkl, r1411                                  union
#### jkl, r1411                                  while
#### jkl, r1411                                  .
#### jkl, r1411            IF (const                       NOT = "A") OR
#### jkl, r1411               (double                      NOT = "B") OR
#### jkl, r1411               (float                       NOT = "C") OR
#### jkl, r1411               (int                         NOT = "D") OR
#### jkl, r1411               (short                       NOT = "E") OR
#### jkl, r1411               (struct                      NOT = "F") OR
#### jkl, r1411               (break                       NOT = "G") OR
#### jkl, r1411               (long                        NOT = "H") OR
#### jkl, r1411               (switch                      NOT = "I") OR
#### jkl, r1411               (void                        NOT = "J") OR
#### jkl, r1411               (case                        NOT = "K") OR
#### jkl, r1411               (enum                        NOT = "L") OR
#### jkl, r1411               (goto                        NOT = "M") OR
#### jkl, r1411               (register                    NOT = "N") OR
#### jkl, r1411               (sizeof                      NOT = "O") OR
#### jkl, r1411               (volatile                    NOT = "P") OR
#### jkl, r1411               (char                        NOT = "Q") OR
#### jkl, r1411               (do                          NOT = "R") OR
#### jkl, r1411             *>(extern                      NOT = "S") OR
#### jkl, r1411             *>(static                      NOT = "T") OR
#### jkl, r1411               (union                       NOT = "U") OR
#### jkl, r1411               (while                       NOT = "V")
#### jkl, r1411               DISPLAY "At least one var has wrong content!"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE x'FF' TO         const
#### jkl, r1411                                  double
#### jkl, r1411                                  float
#### jkl, r1411                                  int
#### jkl, r1411                                  short
#### jkl, r1411                                  struct
#### jkl, r1411                                  break
#### jkl, r1411                                  long
#### jkl, r1411                                  switch
#### jkl, r1411                                  void
#### jkl, r1411                                  case
#### jkl, r1411                                  enum
#### jkl, r1411                                  goto
#### jkl, r1411                                  register
#### jkl, r1411                                  sizeof
#### jkl, r1411                                  volatile
#### jkl, r1411                                  char
#### jkl, r1411                                  do
#### jkl, r1411                                *>extern
#### jkl, r1411                                *>static
#### jkl, r1411                                  union
#### jkl, r1411                                  while
#### jkl, r1411                                  .
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411       *
#### jkl, r1411       * More Reserved Words in C++
#### jkl, r1411       * var names MUST BE IN LOWER CASE (!)
#### jkl, r1411       *
#### jkl, r1411        77  asm                         PIC X.
#### jkl, r1411        77  dynamic_cast                PIC X.
#### jkl, r1411        77  namespace                   PIC X.
#### jkl, r1411        77  reinterpret_cast            PIC X.
#### jkl, r1411        77  try                         PIC X.
#### jkl, r1411        77  bool                        PIC X.
#### jkl, r1411        77  explicit                    PIC X.
#### jkl, r1411       *77  new                         PIC X.
#### jkl, r1411        77  static_cast                 PIC X.
#### jkl, r1411        77  typeid                      PIC X.
#### jkl, r1411        77  catch                       PIC X.
#### jkl, r1411        77  operator                    PIC X.
#### jkl, r1411        77  template                    PIC X.
#### jkl, r1411        77  typename                    PIC X.
#### jkl, r1411        77  friend                      PIC X.
#### jkl, r1411        77  private                     PIC X.
#### jkl, r1411        77  this                        PIC X.
#### jkl, r1411        77  const_cast                  PIC X.
#### jkl, r1411        77  inline                      PIC X.
#### jkl, r1411        77  public                      PIC X.
#### jkl, r1411        77  throw                       PIC X.
#### jkl, r1411        77  virtual                     PIC X.
#### jkl, r1411        77  mutable                     PIC X.
#### jkl, r1411        77  protected                   PIC X.
#### jkl, r1411        77  wchar_t                     PIC X.
#### jkl, r1411       *
#### jkl, r1411       * More Reserved Words in C++ (not essential)
#### jkl, r1411       *
#### jkl, r1411        77  bitand                      PIC X.
#### jkl, r1411        77  compl                       PIC X.
#### jkl, r1411        77  not_eq                      PIC X.
#### jkl, r1411        77  or_eq                       PIC X.
#### jkl, r1411        77  xor_eq                      PIC X.
#### jkl, r1411        77  and_eq                      PIC X.
#### jkl, r1411        77  bitor                       PIC X.
#### jkl, r1411        77  xor                         PIC X.
#### jkl, r1411        PROCEDURE        DIVISION USING
#### jkl, r1411                                  asm
#### jkl, r1411                                  dynamic_cast
#### jkl, r1411                                  namespace
#### jkl, r1411                                  reinterpret_cast
#### jkl, r1411                                  try
#### jkl, r1411                                  bool
#### jkl, r1411                                  explicit
#### jkl, r1411       *                          new
#### jkl, r1411                                  static_cast
#### jkl, r1411                                  typeid
#### jkl, r1411                                  catch
#### jkl, r1411                                  operator
#### jkl, r1411                                  template
#### jkl, r1411                                  typename
#### jkl, r1411                                  friend
#### jkl, r1411                                  private
#### jkl, r1411                                  this
#### jkl, r1411                                  const_cast
#### jkl, r1411                                  inline
#### jkl, r1411                                  public
#### jkl, r1411                                  throw
#### jkl, r1411                                  virtual
#### jkl, r1411                                  mutable
#### jkl, r1411                                  protected
#### jkl, r1411                                  wchar_t
#### jkl, r1411                                  bitand
#### jkl, r1411                                  compl
#### jkl, r1411                                  not_eq
#### jkl, r1411                                  or_eq
#### jkl, r1411                                  xor_eq
#### jkl, r1411                                  and_eq
#### jkl, r1411                                  bitor
#### jkl, r1411                                  xor
#### jkl, r1411                                  .
#### jkl, r1411            IF (asm                         NOT = "W") OR
#### jkl, r1411               (dynamic_cast                NOT = "X") OR
#### jkl, r1411               (namespace                   NOT = "Y") OR
#### jkl, r1411               (reinterpret_cast            NOT = "Z") OR
#### jkl, r1411               (try                         NOT = "a") OR
#### jkl, r1411               (bool                        NOT = "b") OR
#### jkl, r1411               (explicit                    NOT = "c") OR
#### jkl, r1411       *       (new                         NOT = "d") OR
#### jkl, r1411               (static_cast                 NOT = "e") OR
#### jkl, r1411               (typeid                      NOT = "f") OR
#### jkl, r1411               (catch                       NOT = "g") OR
#### jkl, r1411               (operator                    NOT = "h") OR
#### jkl, r1411               (template                    NOT = "i") OR
#### jkl, r1411               (typename                    NOT = "j") OR
#### jkl, r1411               (friend                      NOT = "k") OR
#### jkl, r1411               (private                     NOT = "l") OR
#### jkl, r1411               (this                        NOT = "m") OR
#### jkl, r1411               (const_cast                  NOT = "n") OR
#### jkl, r1411               (inline                      NOT = "o") OR
#### jkl, r1411               (public                      NOT = "p") OR
#### jkl, r1411               (throw                       NOT = "q") OR
#### jkl, r1411               (virtual                     NOT = "r") OR
#### jkl, r1411               (mutable                     NOT = "s") OR
#### jkl, r1411               (protected                   NOT = "t") OR
#### jkl, r1411               (wchar_t                     NOT = "u") OR
#### jkl, r1411               (bitand                      NOT = "v") OR
#### jkl, r1411               (compl                       NOT = "w") OR
#### jkl, r1411               (not_eq                      NOT = "x") OR
#### jkl, r1411               (or_eq                       NOT = "y") OR
#### jkl, r1411               (xor_eq                      NOT = "z") OR
#### jkl, r1411               (and_eq                      NOT = "0") OR
#### jkl, r1411               (bitor                       NOT = "1") OR
#### jkl, r1411               (xor                         NOT = "2")
#### jkl, r1411               DISPLAY "At least one var has wrong content!"
#### jkl, r1411               END-DISPLAY
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE x'FF' TO         asm
#### jkl, r1411                                  dynamic_cast
#### jkl, r1411                                  namespace
#### jkl, r1411                                  reinterpret_cast
#### jkl, r1411                                  try
#### jkl, r1411                                  bool
#### jkl, r1411                                  explicit
#### jkl, r1411       *                          new
#### jkl, r1411                                  static_cast
#### jkl, r1411                                  typeid
#### jkl, r1411                                  catch
#### jkl, r1411                                  operator
#### jkl, r1411                                  template
#### jkl, r1411                                  typename
#### jkl, r1411                                  friend
#### jkl, r1411                                  private
#### jkl, r1411                                  this
#### jkl, r1411                                  const_cast
#### jkl, r1411                                  inline
#### jkl, r1411                                  public
#### jkl, r1411                                  throw
#### jkl, r1411                                  virtual
#### jkl, r1411                                  mutable
#### jkl, r1411                                  protected
#### jkl, r1411                                  wchar_t
#### jkl, r1411                                  bitand
#### jkl, r1411                                  compl
#### jkl, r1411                                  not_eq
#### jkl, r1411                                  or_eq
#### jkl, r1411                                  xor_eq
#### jkl, r1411                                  and_eq
#### jkl, r1411                                  bitor
#### jkl, r1411                                  xor
#### jkl, r1411                                  .
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE -fnot-reserved=double,float,new,volatile callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE -fnot-reserved=double,float,new,volatile -o prog caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([ON EXCEPTION clause of DISPLAY])
#### jkl, r1411 AT_KEYWORDS([runmisc exceptions screen])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            DISPLAY "hello" AT COLUMN 500
#### jkl, r1411                ON EXCEPTION
#### jkl, r1411                    GOBACK RETURNING 0
#### jkl, r1411                NOT ON EXCEPTION
#### jkl, r1411                    GOBACK RETURNING 1
#### jkl, r1411            END-DISPLAY
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([EC-SCREEN-LINE-NUMBER and -STARTING-COLUMN])
#### jkl, r1411 AT_KEYWORDS([runmisc exceptions screen])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID.    prog.
#### jkl, r1411 
#### jkl, r1411        DATA           DIVISION.
#### jkl, r1411        SCREEN         SECTION.
#### jkl, r1411        01  invalid-line.
#### jkl, r1411            03  a      VALUE "a" LINE 99999999.
#### jkl, r1411        01  invalid-col.
#### jkl, r1411            03  c      VALUE "c" COLUMN 99999999.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE      DIVISION.
#### jkl, r1411            DISPLAY invalid-line END-DISPLAY
#### jkl, r1411            IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-LINE-NUMBER"
#### jkl, r1411                CONTINUE
#### jkl, r1411            ELSE
#### jkl, r1411                GOBACK RETURNING 1
#### jkl, r1411            END-IF
#### jkl, r1411 
#### jkl, r1411            DISPLAY invalid-col END-DISPLAY
#### jkl, r1411            IF FUNCTION EXCEPTION-STATUS = "EC-SCREEN-STARTING-COLUMN"
#### jkl, r1411                CONTINUE
#### jkl, r1411            ELSE
#### jkl, r1411                GOBACK RETURNING 2
#### jkl, r1411            END-IF
#### jkl, r1411 
#### jkl, r1411            GOBACK RETURNING 0
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([LINE/COLUMN 0 exceptions])
#### jkl, r1411 AT_KEYWORDS([LINE COLUMN runmisc exceptions extensions screen])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([test "$COB_HAS_CURSES" = "yes" || exit 77])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      prog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  zero-var PIC 9 VALUE 0.
#### jkl, r1411 
#### jkl, r1411        SCREEN SECTION.
#### jkl, r1411        01  scr.
#### jkl, r1411            03  VALUE "a".
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            DISPLAY scr AT LINE zero-var
#### jkl, r1411            IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-LINE-NUMBER"
#### jkl, r1411                GOBACK RETURNING 1
#### jkl, r1411            END-IF
#### jkl, r1411 
#### jkl, r1411            DISPLAY scr AT COLUMN zero-var
#### jkl, r1411            IF FUNCTION EXCEPTION-STATUS <> "EC-SCREEN-STARTING-COLUMN"
#### jkl, r1411                GOBACK RETURNING 2
#### jkl, r1411            END-IF
#### jkl, r1411 
#### jkl, r1411            GOBACK RETURNING 0
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE  -faccept-display-extensions=error prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_EXIT_WAIT=0 ./prog], [0], ignore, [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([SET LAST EXCEPTION TO OFF])
#### jkl, r1411 AT_KEYWORDS([runmisc exceptions EXCEPTION-STATUS EXCEPTION-LOCATION])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  x PIC 9.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            COMPUTE x = 10
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
#### jkl, r1411            SET LAST EXCEPTION TO OFF
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-STATUS)
#### jkl, r1411            DISPLAY FUNCTION TRIM(FUNCTION EXCEPTION-LOCATION)
#### jkl, r1411            .
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE prog.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [EC-SIZE-OVERFLOW
#### jkl, r1411 prog; ; 10
#### jkl, r1411 EC-SIZE-OVERFLOW
#### jkl, r1411 prog; ; 10
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 ])
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 # PROCEDURE DIVISION RETURNING OMITTED
#### jkl, r1411 AT_SETUP([void PROCEDURE])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        PROCEDURE        DIVISION RETURNING OMITTED.
#### jkl, r1411            MOVE 42 TO RETURN-CODE
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            CALL "callee" RETURNING OMITTED
#### jkl, r1411            END-CALL.
#### jkl, r1411            DISPLAY RETURN-CODE WITH NO ADVANCING
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [0], [+000000000], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Figurative constants to numeric field])
#### jkl, r1411 AT_KEYWORDS([Numeric])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  NUM9    PIC 9(6).
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411            MOVE SPACES TO NUM9
#### jkl, r1411            DISPLAY "NUM9 value SPACES is " NUM9 "." UPON SYSOUT
#### jkl, r1411            MOVE LOW-VALUES TO NUM9
#### jkl, r1411            IF NUM9 = LOW-VALUES
#### jkl, r1411               DISPLAY "9(6) tests OK for LOW-VALUES" UPON SYSOUT
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "9(6) Does NOT test OK for LOW-VALUES"
#### jkl, r1411                  UPON SYSOUT
#### jkl, r1411               IF NUM9 = ZERO
#### jkl, r1411                  DISPLAY "9(6) tests as ZERO instead of LOW-VALUES"
#### jkl, r1411                     UPON SYSOUT
#### jkl, r1411               END-IF
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE HIGH-VALUES TO NUM9
#### jkl, r1411            IF NUM9 = HIGH-VALUES
#### jkl, r1411               DISPLAY "9(6) tests OK for HIGH-VALUES" UPON SYSOUT
#### jkl, r1411            ELSE
#### jkl, r1411               DISPLAY "9(6) Does NOT test OK for HIGH-VALUES"
#### jkl, r1411                  UPON SYSOUT
#### jkl, r1411               IF NUM9 = ZERO  
#### jkl, r1411                  DISPLAY "9(6) tests as ZERO instead of HIGH-VALUES"
#### jkl, r1411                     UPON SYSOUT
#### jkl, r1411               END-IF
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -std=mf prog.cob], [0], [],
#### jkl, r1411 [prog.cob:8: warning: source is non-numeric - substituting zero
#### jkl, r1411 prog.cob:10: warning: source is non-numeric - substituting zero
#### jkl, r1411 prog.cob:21: warning: source is non-numeric - substituting zero
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [NUM9 value SPACES is 000000.
#### jkl, r1411 9(6) Does NOT test OK for LOW-VALUES
#### jkl, r1411 9(6) tests as ZERO instead of LOW-VALUES
#### jkl, r1411 9(6) Does NOT test OK for HIGH-VALUES
#### jkl, r1411 9(6) tests as ZERO instead of HIGH-VALUES
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -std=acu prog.cob -o aprog], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./aprog], [0],
#### jkl, r1411 [NUM9 value SPACES is       .
#### jkl, r1411 9(6) tests OK for LOW-VALUES
#### jkl, r1411 9(6) tests OK for HIGH-VALUES
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([MF FIGURATIVE to NUMERIC])
#### jkl, r1411 AT_KEYWORDS([MOVE])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        WORKING-STORAGE  SECTION.
#### jkl, r1411        01  MYFLD        PIC 9(4) VALUE 96.
#### jkl, r1411        01  BIGFLT       COMP-1 VALUE 543.12345E10.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        MAIN-1.
#### jkl, r1411            DISPLAY "Initial value"
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE BIGFLT"
#### jkl, r1411            MOVE BIGFLT TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE SPACES"
#### jkl, r1411            MOVE SPACES TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE LOW-VALUES"
#### jkl, r1411            MOVE LOW-VALUES TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE HIGH-VALUES"
#### jkl, r1411            MOVE HIGH-VALUES TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE QUOTE"
#### jkl, r1411            MOVE QUOTE TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE ALL *"
#### jkl, r1411            MOVE ALL '*' TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE ALL 0"
#### jkl, r1411            MOVE ALL '0' TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE ALL 'A1'"
#### jkl, r1411            MOVE ALL 'A1' TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE ALL '21'"
#### jkl, r1411            MOVE ALL '21' TO MYFLD.
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411            DISPLAY "MOVE HIGH-VALUES TO (1:)"
#### jkl, r1411            MOVE HIGH-VALUES TO MYFLD (1:).
#### jkl, r1411            PERFORM SHOW-IT.
#### jkl, r1411 
#### jkl, r1411            DISPLAY "MOVE HIGH-VALUES TO BIGFLT"
#### jkl, r1411            MOVE HIGH-VALUES TO BIGFLT.
#### jkl, r1411            PERFORM SHOW-BIG.
#### jkl, r1411            DISPLAY "MOVE QUOTE TO BIGFLT"
#### jkl, r1411            MOVE QUOTE TO BIGFLT.
#### jkl, r1411            PERFORM SHOW-BIG.
#### jkl, r1411            DISPLAY "MOVE ALL * TO BIGFLT"
#### jkl, r1411            MOVE ALL '*' TO BIGFLT.
#### jkl, r1411            PERFORM SHOW-BIG.
#### jkl, r1411            DISPLAY "MOVE ALL '21' TO BIGFLT"
#### jkl, r1411            MOVE ALL '21' TO BIGFLT.
#### jkl, r1411            PERFORM SHOW-BIG.
#### jkl, r1411            STOP RUN.
#### jkl, r1411        SHOW-IT.
#### jkl, r1411            CALL "dump" USING MYFLD.
#### jkl, r1411        SHOW-BIG.
#### jkl, r1411            DISPLAY "BIGFLT is " BIGFLT.
#### jkl, r1411            CALL "dump" USING BIGFLT.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([cmod.c], [[
#### jkl, r1411 #include <stdio.h>
#### jkl, r1411 #include <libcob.h>
#### jkl, r1411 
#### jkl, r1411 COB_EXT_EXPORT int
#### jkl, r1411 dump (unsigned char *data)
#### jkl, r1411 {
#### jkl, r1411   int i;
#### jkl, r1411   for (i = 0; i < 4; i++)
#### jkl, r1411     printf ("%02X", data[i]);
#### jkl, r1411   puts (" .");
#### jkl, r1411   return 0;
#### jkl, r1411 }
#### jkl, r1411 ]])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -std=mf -fno-move-non-numeric-lit-to-numeric-is-zero prog.cob cmod.c], [0], [],
#### jkl, r1411 [prog.cob: in paragraph 'MAIN-1':
#### jkl, r1411 prog.cob:28: warning: numeric value is expected
#### jkl, r1411 prog.cob:6: warning: 'MYFLD' defined here as PIC 9(4)
#### jkl, r1411 prog.cob:34: warning: numeric value is expected
#### jkl, r1411 prog.cob:6: warning: 'MYFLD' defined here as PIC 9(4)
#### jkl, r1411 prog.cob:50: warning: numeric value is expected
#### jkl, r1411 prog.cob:7: warning: 'BIGFLT' defined here as USAGE FLOAT
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [Initial value
#### jkl, r1411 30303936 .
#### jkl, r1411 MOVE BIGFLT
#### jkl, r1411 38333034 .
#### jkl, r1411 MOVE SPACES
#### jkl, r1411 20202020 .
#### jkl, r1411 MOVE LOW-VALUES
#### jkl, r1411 00000000 .
#### jkl, r1411 MOVE HIGH-VALUES
#### jkl, r1411 FFFFFFFF .
#### jkl, r1411 MOVE QUOTE
#### jkl, r1411 22222222 .
#### jkl, r1411 MOVE ALL *
#### jkl, r1411 2A2A2A2A .
#### jkl, r1411 MOVE ALL 0
#### jkl, r1411 30303030 .
#### jkl, r1411 MOVE ALL 'A1'
#### jkl, r1411 41314131 .
#### jkl, r1411 MOVE ALL '21'
#### jkl, r1411 32313231 .
#### jkl, r1411 MOVE HIGH-VALUES TO (1:)
#### jkl, r1411 FFFFFFFF .
#### jkl, r1411 MOVE HIGH-VALUES TO BIGFLT
#### jkl, r1411 BIGFLT is NaN
#### jkl, r1411 FFFFFFFF .
#### jkl, r1411 MOVE QUOTE TO BIGFLT
#### jkl, r1411 BIGFLT is 2.1973164E-18
#### jkl, r1411 22222222 .
#### jkl, r1411 MOVE ALL * TO BIGFLT
#### jkl, r1411 BIGFLT is 5.4312347E+12
#### jkl, r1411 DA119E54 .
#### jkl, r1411 MOVE ALL '21' TO BIGFLT
#### jkl, r1411 BIGFLT is 2.1212121E+37
#### jkl, r1411 E5547F7D .
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 # PROCEDURE DIVISION RETURNING OMITTED, CALL RETURNING NOTHING
#### jkl, r1411 AT_SETUP([void PROCEDURE, NOTHING return])
#### jkl, r1411 AT_KEYWORDS([runmisc])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee.
#### jkl, r1411        DATA             DIVISION.
#### jkl, r1411        PROCEDURE        DIVISION RETURNING OMITTED.
#### jkl, r1411            MOVE 42 TO RETURN-CODE
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            MOVE 42 TO RETURN-CODE
#### jkl, r1411            CALL "callee" RETURNING NOTHING
#### jkl, r1411            END-CALL.
#### jkl, r1411            DISPLAY RETURN-CODE WITH NO ADVANCING
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COMPILE caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./caller], [42], [+000000042], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 # Checks both -ftrace(all), which needs to be manually set
#### jkl, r1411 # and    -fsource-location, which is implied by -debug/g
#### jkl, r1411 AT_SETUP([READY TRACE / RESET TRACE])
#### jkl, r1411 AT_KEYWORDS([runmisc -ftrace -ftraceall -fsource-location
#### jkl, r1411 COB_PHYSICAL_CANCEL COB_PRE_LOAD physical_cancel pre_load])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([caller.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      caller.
#### jkl, r1411       *
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            READY TRACE
#### jkl, r1411            MOVE 1 TO RETURN-CODE
#### jkl, r1411            RESET TRACE
#### jkl, r1411            CALL "callee1"
#### jkl, r1411            END-CALL
#### jkl, r1411            READY TRACE
#### jkl, r1411            MOVE 2 TO RETURN-CODE
#### jkl, r1411            CALL "callee1"
#### jkl, r1411            END-CALL
#### jkl, r1411            CALL "callee1"
#### jkl, r1411            END-CALL
#### jkl, r1411            CANCEL "callee1"
#### jkl, r1411            MOVE 0 TO RETURN-CODE
#### jkl, r1411            STOP RUN.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee1.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee1.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            ADD 1 TO RETURN-CODE
#### jkl, r1411              NOT ON SIZE ERROR
#### jkl, r1411                IF RETURN-CODE = 1
#### jkl, r1411                  CONTINUE
#### jkl, r1411                ELSE IF RETURN-CODE = 2
#### jkl, r1411                  CONTINUE
#### jkl, r1411                ELSE
#### jkl, r1411                  CONTINUE
#### jkl, r1411            .
#### jkl, r1411            EVALUATE RETURN-CODE
#### jkl, r1411            WHEN 1
#### jkl, r1411              CONTINUE
#### jkl, r1411            WHEN 2
#### jkl, r1411            WHEN 3
#### jkl, r1411              CONTINUE
#### jkl, r1411            WHEN OTHER
#### jkl, r1411              CONTINUE
#### jkl, r1411            END-EVALUATE
#### jkl, r1411            EVALUATE TRUE
#### jkl, r1411            WHEN RETURN-CODE = 1
#### jkl, r1411              CONTINUE
#### jkl, r1411            WHEN RETURN-CODE = 2
#### jkl, r1411            WHEN RETURN-CODE = 3
#### jkl, r1411              CONTINUE
#### jkl, r1411            WHEN OTHER
#### jkl, r1411              CONTINUE
#### jkl, r1411            END-EVALUATE
#### jkl, r1411            CALL "callee2"  END-CALL
#### jkl, r1411            CANCEL "callee2"  CALL "callee2b" END-CALL  CANCEL "callee2b"
#### jkl, r1411            SUBTRACT 1 FROM RETURN-CODE END-SUBTRACT
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411            COMPUTE RETURN-CODE
#### jkl, r1411                  = 1 + 1
#### jkl, r1411               ON SIZE ERROR
#### jkl, r1411                  MOVE -1 TO RETURN-CODE
#### jkl, r1411               NOT ON SIZE ERROR
#### jkl, r1411                  COMPUTE RETURN-CODE
#### jkl, r1411                        = 1 + 1
#### jkl, r1411                  END-COMPUTE
#### jkl, r1411            END-COMPUTE.
#### jkl, r1411            CALL "callee2c" END-CALL
#### jkl, r1411            CANCEL "callee2c"
#### jkl, r1411            MOVE 0 TO RETURN-CODE.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([preload.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2b.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        SOME-SEC SECTION.
#### jkl, r1411        SOME-PAR.
#### jkl, r1411            PERFORM OTHER-SEC
#### jkl, r1411            MOVE 0 TO RETURN-CODE.
#### jkl, r1411        ENTRY "LEAVE-ME".  
#### jkl, r1411        END-PAR.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411        OTHER-SEC SECTION.
#### jkl, r1411            COMPUTE RETURN-CODE = 1 + 2 END-COMPUTE.
#### jkl, r1411        EX. EXIT.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callee2c.cob], [
#### jkl, r1411        IDENTIFICATION   DIVISION.
#### jkl, r1411        PROGRAM-ID.      callee2c.
#### jkl, r1411        PROCEDURE        DIVISION.
#### jkl, r1411        SOME-SEC SECTION.
#### jkl, r1411        SOME-PAR.
#### jkl, r1411            PERFORM OTHER-SEC
#### jkl, r1411            MOVE 0 TO RETURN-CODE.
#### jkl, r1411        END-PAR.
#### jkl, r1411            EXIT PROGRAM.
#### jkl, r1411        OTHER-SEC SECTION.
#### jkl, r1411            COMPUTE RETURN-CODE = 1 + 2 END-COMPUTE.
#### jkl, r1411        EX. EXIT.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_OLD_TRACE=y \
#### jkl, r1411 $COBC -ftraceall callee1.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_OLD_TRACE=y \
#### jkl, r1411 $COBC callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_OLD_TRACE=y \
#### jkl, r1411 $COBC -ftrace preload.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_OLD_TRACE=y \
#### jkl, r1411 $COBC -fsource-location callee2c.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_OLD_TRACE=y \
#### jkl, r1411 $COBC -x -o prog -ftraceall caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD=preload ./prog], [0], [],
#### jkl, r1411 [Source :    'caller.cob'
#### jkl, r1411 Program-Id: caller           Statement: MOVE                   Line: 7
#### jkl, r1411 Program-Id: caller           Statement: RESET TRACE            Line: 8
#### jkl, r1411 Program-Id: caller           Statement: MOVE                   Line: 12
#### jkl, r1411 Program-Id: caller           Statement: CALL                   Line: 13
#### jkl, r1411 Source:     'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Entry:     callee1                Line: 4
#### jkl, r1411 Program-Id: callee1          Section:   (None)                 Line: 5
#### jkl, r1411 Program-Id: callee1          Paragraph: (None)                 Line: 5
#### jkl, r1411 Program-Id: callee1          Statement: ADD                    Line: 5
#### jkl, r1411 Program-Id: callee1          Statement: IF                     Line: 7
#### jkl, r1411 Program-Id: callee1          Statement: IF                     Line: 9
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 12
#### jkl, r1411 Program-Id: callee1          Statement: EVALUATE               Line: 14
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 15
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 21
#### jkl, r1411 Program-Id: callee1          Statement: EVALUATE               Line: 23
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 24
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 27
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 30
#### jkl, r1411 Program-Id: callee1          Statement: CALL                   Line: 32
#### jkl, r1411 Source :    'callee2c.cob'
#### jkl, r1411 Program-Id: callee2c         Statement: PERFORM                Line: 7
#### jkl, r1411 Program-Id: callee2c         Statement: COMPUTE                Line: 12
#### jkl, r1411 Program-Id: callee2c         Statement: EXIT                   Line: 13
#### jkl, r1411 Program-Id: callee2c         Statement: MOVE                   Line: 8
#### jkl, r1411 Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
#### jkl, r1411 Source :    'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Statement: CANCEL                 Line: 33
#### jkl, r1411 Program-Id: callee1          Statement: CALL                   Line: 33
#### jkl, r1411 Source:     'preload.cob'
#### jkl, r1411 Program-Id: callee2b         Entry:     callee2b               Line: 4
#### jkl, r1411 Program-Id: callee2b         Section:   SOME-SEC               Line: 5
#### jkl, r1411 Program-Id: callee2b         Paragraph: SOME-PAR               Line: 6
#### jkl, r1411 Program-Id: callee2b         Section:   OTHER-SEC              Line: 12
#### jkl, r1411 Program-Id: callee2b         Paragraph: (None)                 Line: 12
#### jkl, r1411 Program-Id: callee2b         Paragraph: EX                     Line: 14
#### jkl, r1411 Program-Id: callee2b         Entry:     LEAVE-ME               Line: 9
#### jkl, r1411 Program-Id: callee2b         Paragraph: END-PAR                Line: 10
#### jkl, r1411 Program-Id: callee2b         Exit:      callee2b
#### jkl, r1411 Source :    'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Statement: CANCEL                 Line: 33
#### jkl, r1411 Program-Id: callee1          Statement: SUBTRACT               Line: 34
#### jkl, r1411 Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
#### jkl, r1411 Program-Id: callee1          Exit:      callee1
#### jkl, r1411 Source :    'caller.cob'
#### jkl, r1411 Program-Id: caller           Statement: CALL                   Line: 15
#### jkl, r1411 Source:     'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Entry:     callee1                Line: 4
#### jkl, r1411 Program-Id: callee1          Section:   (None)                 Line: 5
#### jkl, r1411 Program-Id: callee1          Paragraph: (None)                 Line: 5
#### jkl, r1411 Program-Id: callee1          Statement: ADD                    Line: 5
#### jkl, r1411 Program-Id: callee1          Statement: IF                     Line: 7
#### jkl, r1411 Program-Id: callee1          Statement: IF                     Line: 9
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 12
#### jkl, r1411 Program-Id: callee1          Statement: EVALUATE               Line: 14
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 15
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 21
#### jkl, r1411 Program-Id: callee1          Statement: EVALUATE               Line: 23
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 24
#### jkl, r1411 Program-Id: callee1          Statement: WHEN                   Line: 27
#### jkl, r1411 Program-Id: callee1          Statement: CONTINUE               Line: 30
#### jkl, r1411 Program-Id: callee1          Statement: CALL                   Line: 32
#### jkl, r1411 Source :    'callee2c.cob'
#### jkl, r1411 Program-Id: callee2c         Statement: PERFORM                Line: 7
#### jkl, r1411 Program-Id: callee2c         Statement: COMPUTE                Line: 12
#### jkl, r1411 Program-Id: callee2c         Statement: EXIT                   Line: 13
#### jkl, r1411 Program-Id: callee2c         Statement: MOVE                   Line: 8
#### jkl, r1411 Program-Id: callee2c         Statement: EXIT PROGRAM           Line: 10
#### jkl, r1411 Source :    'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Statement: CANCEL                 Line: 33
#### jkl, r1411 Program-Id: callee1          Statement: CALL                   Line: 33
#### jkl, r1411 Source:     'preload.cob'
#### jkl, r1411 Program-Id: callee2b         Entry:     callee2b               Line: 4
#### jkl, r1411 Program-Id: callee2b         Section:   SOME-SEC               Line: 5
#### jkl, r1411 Program-Id: callee2b         Paragraph: SOME-PAR               Line: 6
#### jkl, r1411 Program-Id: callee2b         Section:   OTHER-SEC              Line: 12
#### jkl, r1411 Program-Id: callee2b         Paragraph: (None)                 Line: 12
#### jkl, r1411 Program-Id: callee2b         Paragraph: EX                     Line: 14
#### jkl, r1411 Program-Id: callee2b         Entry:     LEAVE-ME               Line: 9
#### jkl, r1411 Program-Id: callee2b         Paragraph: END-PAR                Line: 10
#### jkl, r1411 Program-Id: callee2b         Exit:      callee2b
#### jkl, r1411 Source :    'callee1.cob'
#### jkl, r1411 Program-Id: callee1          Statement: CANCEL                 Line: 33
#### jkl, r1411 Program-Id: callee1          Statement: SUBTRACT               Line: 34
#### jkl, r1411 Program-Id: callee1          Statement: EXIT PROGRAM           Line: 35
#### jkl, r1411 Program-Id: callee1          Exit:      callee1
#### jkl, r1411 Source :    'caller.cob'
#### jkl, r1411 Program-Id: caller           Statement: CANCEL                 Line: 17
#### jkl, r1411 Program-Id: caller           Statement: MOVE                   Line: 18
#### jkl, r1411 Program-Id: caller           Statement: STOP RUN               Line: 19
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COBC -ftraceall callee1.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC callee2.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC -ftrace preload.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC -fsource-location callee2c.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([$COBC -x -o prog -ftraceall caller.cob], [0], [], [])
#### jkl, r1411 AT_CHECK([COB_PHYSICAL_CANCEL=1 COB_PRE_LOAD=preload ./prog], [0], [],
#### jkl, r1411 [Source: 'caller.cob'
#### jkl, r1411 Program-Id:  caller
#### jkl, r1411 Program-Id:  caller                      MOVE                            Line:      7
#### jkl, r1411 Program-Id:  caller                      RESET TRACE                     Line:      8
#### jkl, r1411 Program-Id:  caller                      MOVE                            Line:     12
#### jkl, r1411 Program-Id:  caller                      CALL                            Line:     13
#### jkl, r1411 Source: 'callee1.cob'
#### jkl, r1411 Program-Id:  callee1
#### jkl, r1411 Program-Id:  callee1              Entry: callee1                         Line:      4
#### jkl, r1411 Program-Id:  callee1                     ADD                             Line:      5
#### jkl, r1411 Program-Id:  callee1                     IF                              Line:      7
#### jkl, r1411 Program-Id:  callee1                     IF                              Line:      9
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     12
#### jkl, r1411 Program-Id:  callee1                     EVALUATE                        Line:     14
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     15
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     21
#### jkl, r1411 Program-Id:  callee1                     EVALUATE                        Line:     23
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     24
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     27
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     30
#### jkl, r1411 Program-Id:  callee1                     CALL                            Line:     32
#### jkl, r1411 Program-Id:  callee1                     CANCEL                          Line:     33
#### jkl, r1411 Program-Id:  callee1                     CALL                            Line:     33
#### jkl, r1411 Source: 'preload.cob'
#### jkl, r1411 Program-Id:  callee2b
#### jkl, r1411 Program-Id:  callee2b             Entry: callee2b                        Line:      4
#### jkl, r1411 Program-Id:  callee2b           Section: SOME-SEC                        Line:      5
#### jkl, r1411 Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:      6
#### jkl, r1411 Program-Id:  callee2b           Section: OTHER-SEC                       Line:     12
#### jkl, r1411 Program-Id:  callee2b         Paragraph: EX                              Line:     14
#### jkl, r1411 Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     14
#### jkl, r1411 Program-Id:  callee2b         Paragraph: END-PAR                         Line:     10
#### jkl, r1411 Program-Id:  callee2b              Exit: callee2b                        Line:     10
#### jkl, r1411 Source: 'callee1.cob'
#### jkl, r1411 Program-Id:  callee1
#### jkl, r1411 Program-Id:  callee1                     CANCEL                          Line:     33
#### jkl, r1411 Program-Id:  callee1                     SUBTRACT                        Line:     34
#### jkl, r1411 Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
#### jkl, r1411 Program-Id:  callee1               Exit: callee1                         Line:     35
#### jkl, r1411 Source: 'caller.cob'
#### jkl, r1411 Program-Id:  caller
#### jkl, r1411 Program-Id:  caller                      CALL                            Line:     15
#### jkl, r1411 Source: 'callee1.cob'
#### jkl, r1411 Program-Id:  callee1
#### jkl, r1411 Program-Id:  callee1              Entry: callee1                         Line:      4
#### jkl, r1411 Program-Id:  callee1                     ADD                             Line:      5
#### jkl, r1411 Program-Id:  callee1                     IF                              Line:      7
#### jkl, r1411 Program-Id:  callee1                     IF                              Line:      9
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     12
#### jkl, r1411 Program-Id:  callee1                     EVALUATE                        Line:     14
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     15
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     21
#### jkl, r1411 Program-Id:  callee1                     EVALUATE                        Line:     23
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     24
#### jkl, r1411 Program-Id:  callee1                     WHEN                            Line:     27
#### jkl, r1411 Program-Id:  callee1                     CONTINUE                        Line:     30
#### jkl, r1411 Program-Id:  callee1                     CALL                            Line:     32
#### jkl, r1411 Program-Id:  callee1                     CANCEL                          Line:     33
#### jkl, r1411 Program-Id:  callee1                     CALL                            Line:     33
#### jkl, r1411 Source: 'preload.cob'
#### jkl, r1411 Program-Id:  callee2b
#### jkl, r1411 Program-Id:  callee2b             Entry: callee2b                        Line:      4
#### jkl, r1411 Program-Id:  callee2b           Section: SOME-SEC                        Line:      5
#### jkl, r1411 Program-Id:  callee2b         Paragraph: SOME-PAR                        Line:      6
#### jkl, r1411 Program-Id:  callee2b           Section: OTHER-SEC                       Line:     12
#### jkl, r1411 Program-Id:  callee2b         Paragraph: EX                              Line:     14
#### jkl, r1411 Program-Id:  callee2b             Entry: LEAVE-ME                        Line:     14
#### jkl, r1411 Program-Id:  callee2b         Paragraph: END-PAR                         Line:     10
#### jkl, r1411 Program-Id:  callee2b              Exit: callee2b                        Line:     10
#### jkl, r1411 Source: 'callee1.cob'
#### jkl, r1411 Program-Id:  callee1
#### jkl, r1411 Program-Id:  callee1                     CANCEL                          Line:     33
#### jkl, r1411 Program-Id:  callee1                     SUBTRACT                        Line:     34
#### jkl, r1411 Program-Id:  callee1                     EXIT PROGRAM                    Line:     35
#### jkl, r1411 Program-Id:  callee1               Exit: callee1                         Line:     35
#### jkl, r1411 Source: 'caller.cob'
#### jkl, r1411 Program-Id:  caller
#### jkl, r1411 Program-Id:  caller                      CANCEL                          Line:     17
#### jkl, r1411 Program-Id:  caller                      MOVE                            Line:     18
#### jkl, r1411 Program-Id:  caller                      STOP RUN                        Line:     19
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Trace feature with subroutine])
#### jkl, r1411 AT_KEYWORDS([Trace])
#### jkl, r1411 
#### jkl, r1411 # FIXME: check if the one above is enough and either
#### jkl, r1411 #        remove this test or exchange by a non-IDX version
#### jkl, r1411 AT_SKIP_IF([test "$COB_HAS_ISAM" = "no"])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([callsub.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. callsub.
#### jkl, r1411 
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01 NUM-A     PIC 9(3) VALUE 399.
#### jkl, r1411        01 NUM-B     PIC 9(3) VALUE 211.
#### jkl, r1411        01 RSLT      PIC 9(5)V99.
#### jkl, r1411 
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01  n PIC 99.
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING n.
#### jkl, r1411        MAIN-10.
#### jkl, r1411            ADD 1 TO n.
#### jkl, r1411            COMPUTE RSLT = ((NUM-A / (100.55 + -0.550))
#### jkl, r1411                          -  (NUM-B / (10.11 * 10 - 1.1)))
#### jkl, r1411                              * (220 / 2.2) * n.
#### jkl, r1411        END PROGRAM callsub.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE_MODULE callsub.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411 
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411 
#### jkl, r1411        INPUT-OUTPUT SECTION.
#### jkl, r1411        FILE-CONTROL.
#### jkl, r1411            SELECT OPTIONAL TSPFILE
#### jkl, r1411            ASSIGN TO "testisam"
#### jkl, r1411            ORGANIZATION INDEXED ACCESS DYNAMIC
#### jkl, r1411            RECORD KEY IS CM-CUST-NUM
#### jkl, r1411            ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
#### jkl, r1411            ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
#### jkl, r1411            FILE STATUS IS CUST-STAT.
#### jkl, r1411 
#### jkl, r1411            SELECT TSTFILE
#### jkl, r1411            ASSIGN TO "testisam"
#### jkl, r1411            ORGANIZATION INDEXED ACCESS DYNAMIC
#### jkl, r1411            RECORD KEY IS TS-CUST-NUM
#### jkl, r1411            ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
#### jkl, r1411            ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
#### jkl, r1411            FILE STATUS IS CUST-STAT.
#### jkl, r1411 
#### jkl, r1411            SELECT FLATFILE
#### jkl, r1411            ASSIGN EXTERNAL RELFIX
#### jkl, r1411            ORGANIZATION RELATIVE
#### jkl, r1411            ACCESS IS RANDOM RELATIVE KEY IS REC-NUM
#### jkl, r1411            FILE STATUS IS CUST-STAT.
#### jkl, r1411 
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        FILE SECTION.
#### jkl, r1411        FD  TSPFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411 
#### jkl, r1411        01  TSPFL-RECORD.
#### jkl, r1411            05  TSPFL-REC.
#### jkl, r1411            10  CM-CUST-NUM.
#### jkl, r1411              15  CM-CUST-PRE                   PICTURE X(3).
#### jkl, r1411              15  CM-CUST-NNN                   PICTURE X(5).
#### jkl, r1411            10  CM-STATUS                       PICTURE X.
#### jkl, r1411            10  CM-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  CM-ADDRESS-1                    PICTURE X(25).
#### jkl, r1411            10  CM-ADDRESS-2                    PICTURE X(25).
#### jkl, r1411            10  CM-ADDRESS-3                    PICTURE X(25).
#### jkl, r1411            10  CM-TELEPHONE                    PICTURE 9(10).
#### jkl, r1411            10  CM-DP-MGR                       PICTURE X(25).
#### jkl, r1411            10  CM-MACHINE                      PICTURE X(8).
#### jkl, r1411            10  CM-MEMORY                       PICTURE X(4).
#### jkl, r1411            10  CM-DISK                         PICTURE X(8).
#### jkl, r1411            10  CM-TAPE                         PICTURE X(8).
#### jkl, r1411            10  CM-NO-TERMINALS                 PICTURE 9(5).
#### jkl, r1411 
#### jkl, r1411        FD  TSTFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411 
#### jkl, r1411        01  TSTFL-RECORD.
#### jkl, r1411            05  TSTFL-REC.
#### jkl, r1411            10  TS-CUST-NUM                     PICTURE X(8).
#### jkl, r1411            10  TS-STATUS                       PICTURE X.
#### jkl, r1411            10  TS-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  TS-ADDRESS-1                    PICTURE X(25).
#### jkl, r1411            10  TS-ADDRESS-2                    PICTURE X(25).
#### jkl, r1411            10  TS-ADDRESS-3                    PICTURE X(25).
#### jkl, r1411            10  TS-TELEPHONE                    PICTURE 9(10).
#### jkl, r1411            10  TS-DP-MGR                       PICTURE X(25).
#### jkl, r1411            10  TS-MACHINE                      PICTURE X(8).
#### jkl, r1411            10  TS-MEMORY                       PICTURE X(4).
#### jkl, r1411            10  TS-DISK                         PICTURE X(8).
#### jkl, r1411            10  TS-TAPE                         PICTURE X(8).
#### jkl, r1411 
#### jkl, r1411        FD  FLATFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411 
#### jkl, r1411        01  TSP2-RECORD.
#### jkl, r1411            10  C2-CUST-NUM                     PICTURE X(8).
#### jkl, r1411            10  C2-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  C2-DISK                         PICTURE X(8).
#### jkl, r1411            10  C2-NO-TERMINALS                 PICTURE 9(4) COMP-4.
#### jkl, r1411            10  C2-PK-DATE                      PICTURE S9(14) COMP-3.
#### jkl, r1411 
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411 
#### jkl, r1411        01  CUST-STAT.
#### jkl, r1411            05  FILLER PICTURE XX.
#### jkl, r1411        77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
#### jkl, r1411        77  CALL-NUM          VALUE  00         PICTURE 99.
#### jkl, r1411 
#### jkl, r1411        01  TEST-DATA.
#### jkl, r1411 
#### jkl, r1411          02  DATA-CUST-NUM-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(8) VALUE "ALP00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "BET00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "GAM00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "DEL00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "EPS00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "FOR00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "GIB00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "H&J00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "INC00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "JOH00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "KON00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "LEW00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "MOR00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "NEW00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "OLD00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "PRE00000".
#### jkl, r1411 
#### jkl, r1411          02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
#### jkl, r1411                                        PIC X(8) OCCURS 16.
#### jkl, r1411          02  DATA-COMPANY-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
#### jkl, r1411 
#### jkl, r1411          02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
#### jkl, r1411                                        PIC X(25) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-1-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
#### jkl, r1411 
#### jkl, r1411          02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
#### jkl, r1411                                        PIC X(25) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-2-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW YORK  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "ATLANTA   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WASHINGTON".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "TORONTO   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CALGARY   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "SAN DIEGO ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "LOS RIOS  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "MADISON   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WILBUR    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "TOPEKA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "SEATTLE   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW JERSEY".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "FORT WAYNE".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "COLUMBUS  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "RICHMOND  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WHITEPLAIN".
#### jkl, r1411 
#### jkl, r1411          02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
#### jkl, r1411                                        PIC X(10) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-3-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.Y.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "GEORGIA   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "D.C.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CANADA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CANADA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CALIFORNIA".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW MEXICO".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WISCONSIN ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "DELAWARE  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "KANSAS    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WASHINGTON".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.J.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "COLORADO  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "OHIO      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "VIRGINIA  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.Y.      ".
#### jkl, r1411 
#### jkl, r1411          02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
#### jkl, r1411                                        PIC X(10) OCCURS 16.
#### jkl, r1411          02  DATA-TELEPHONE-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 3131234432.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4082938498.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8372487274.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 5292398745.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8009329492.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6456445643.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6546456333.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 3455445444.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6456445643.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 7456434355.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6554456433.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 7534587453.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8787458374.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411 
#### jkl, r1411          02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
#### jkl, r1411                                        PIC 9(10) OCCURS 16.
#### jkl, r1411          02  DATA-DP-MGR-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
#### jkl, r1411 
#### jkl, r1411          02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
#### jkl, r1411                                        PIC X(20) OCCURS 16.
#### jkl, r1411          02  DATA-MACHINE-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9030".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/3".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/5".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411 
#### jkl, r1411          02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
#### jkl, r1411                                        PIC X(8) OCCURS 16.
#### jkl, r1411          02  DATA-NO-TERMINALS-TBL.
#### jkl, r1411 
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 85.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 34.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 75.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 45.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 90.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 107.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 67.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 32.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 16.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 34.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 128.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 64.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 110.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 324.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 124.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 86.
#### jkl, r1411 
#### jkl, r1411          02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
#### jkl, r1411                                        PIC 9(3) COMP-3 OCCURS 16.
#### jkl, r1411 
#### jkl, r1411        01  WORK-AREA.
#### jkl, r1411            05  REC-NUM                         PICTURE 9(6) VALUE 0.
#### jkl, r1411            05  REC-MAX                         PICTURE 9(6) VALUE 10.
#### jkl, r1411            05  SUB                             PICTURE 9(4) COMP SYNC.
#### jkl, r1411                88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
#### jkl, r1411 
#### jkl, r1411            05  TSPFL-KEY                       PICTURE X(8).
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411 
#### jkl, r1411        MAINFILE.
#### jkl, r1411            OPEN OUTPUT TSPFILE
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            OPEN I-O TSPFILE
#### jkl, r1411            MOVE '99' TO CUST-STAT
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "10"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on read of empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE LOW-VALUES                     TO TSPFL-RECORD.
#### jkl, r1411            START TSPFILE KEY GREATER THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "23"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "46"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " start/read of empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            DISPLAY "OK: Operations on empty file"
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            PERFORM LOADFILE.
#### jkl, r1411            PERFORM LISTFILE.
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411           *> check that multiple empty lines are handled correctly
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411            STOP RUN.
#### jkl, r1411 
#### jkl, r1411        LOADFILE.
#### jkl, r1411            DISPLAY "Loading sample data file."
#### jkl, r1411                             UPON CONSOLE.
#### jkl, r1411 
#### jkl, r1411            OPEN OUTPUT TSPFILE
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT
#### jkl, r1411                " opening 'testisam' file" UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411 
#### jkl, r1411            PERFORM 1000-LOAD-RECORD
#### jkl, r1411                         VARYING SUB FROM 1 BY 1
#### jkl, r1411                           UNTIL SUB > MAX-SUB.
#### jkl, r1411 
#### jkl, r1411            DISPLAY "Sample data file load complete."
#### jkl, r1411                             UPON CONSOLE.
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411       *---------------------------------------------------------------*
#### jkl, r1411       *         LOAD A RECORD FROM DATA TABLES                        *
#### jkl, r1411       *---------------------------------------------------------------*
#### jkl, r1411 
#### jkl, r1411        1000-LOAD-RECORD.
#### jkl, r1411 
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
#### jkl, r1411            MOVE CM-CUST-NUM                  TO TSPFL-KEY.
#### jkl, r1411            MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
#### jkl, r1411            MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
#### jkl, r1411            MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
#### jkl, r1411            MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
#### jkl, r1411            MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
#### jkl, r1411            MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
#### jkl, r1411            MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
#### jkl, r1411 
#### jkl, r1411            IF  ODD-RECORD
#### jkl, r1411                MOVE "8417"                   TO CM-DISK
#### jkl, r1411                MOVE "1600 BPI"               TO CM-TAPE
#### jkl, r1411                MOVE "1MEG"                   TO CM-MEMORY
#### jkl, r1411            ELSE
#### jkl, r1411                MOVE "8470"                   TO CM-DISK
#### jkl, r1411                MOVE "6250 BPI"               TO CM-TAPE
#### jkl, r1411                MOVE "3MEG"                   TO CM-MEMORY.
#### jkl, r1411 
#### jkl, r1411            WRITE TSPFL-RECORD.
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411            AND CUST-STAT NOT = "02"
#### jkl, r1411                DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT
#### jkl, r1411                                  UPON CONSOLE.
#### jkl, r1411 
#### jkl, r1411        LISTFILE.
#### jkl, r1411            DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
#### jkl, r1411            OPEN INPUT TSTFILE
#### jkl, r1411            MOVE SPACES                       TO TSTFL-RECORD.
#### jkl, r1411            MOVE "PRE00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
#### jkl, r1411            READ  TSTFILE NEXT RECORD
#### jkl, r1411            READ  TSTFILE NEXT RECORD
#### jkl, r1411            CLOSE TSTFILE.
#### jkl, r1411 
#### jkl, r1411            MOVE ZERO TO REC-NUM
#### jkl, r1411            OPEN INPUT TSPFILE
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
#### jkl, r1411                                              UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE "PRE00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
#### jkl, r1411            READ  TSPFILE NEXT RECORD
#### jkl, r1411            READ  TSPFILE NEXT RECORD
#### jkl, r1411 
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE "DEL00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSPFILE KEY GREATER THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on 1st read of file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            PERFORM UNTIL CUST-STAT NOT = "00"
#### jkl, r1411                       OR REC-NUM > REC-MAX
#### jkl, r1411                DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411                CALL "callsub" USING CALL-NUM
#### jkl, r1411                READ TSPFILE NEXT RECORD
#### jkl, r1411                     AT END
#### jkl, r1411                         MOVE "99" TO CUST-STAT
#### jkl, r1411                 END-READ
#### jkl, r1411                 ADD 1 TO REC-NUM
#### jkl, r1411            END-PERFORM
#### jkl, r1411            IF CUST-STAT = "99"
#### jkl, r1411                DISPLAY "Hit End of File: " CALL-NUM UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Stop read after: " CALL-NUM UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411 
#### jkl, r1411            DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
#### jkl, r1411            MOVE ZERO TO REC-NUM
#### jkl, r1411            START TSPFILE KEY LESS THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on 1st read of file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            PERFORM UNTIL CUST-STAT NOT = "00"
#### jkl, r1411                       OR REC-NUM > REC-MAX
#### jkl, r1411                DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411                READ TSPFILE PREVIOUS RECORD
#### jkl, r1411                     AT END
#### jkl, r1411                         MOVE "99" TO CUST-STAT
#### jkl, r1411                 END-READ
#### jkl, r1411                 ADD 1 TO REC-NUM
#### jkl, r1411            END-PERFORM.
#### jkl, r1411 
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            OPEN I-O TSPFILE.
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE 'X'                          TO CM-CUST-NUM (5:1).
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            IF  CUST-STAT NOT = "23"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 23."
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on primary read ."
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            READ TSPFILE NEXT RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on next read"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
#### jkl, r1411            READ TSPFILE KEY IS CM-TELEPHONE
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 23"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Mach=" CM-MACHINE "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            WRITE TSPFL-RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "22"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 22"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            DISPLAY "   Read: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected "
#### jkl, r1411                          CM-NO-TERMINALS " terminals"
#### jkl, r1411                          UPON CONSOLE.
#### jkl, r1411            ADD 5 TO CM-NO-TERMINALS
#### jkl, r1411            REWRITE TSPFL-RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 00"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411 
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                        CUST-STAT " as expected "
#### jkl, r1411                        CM-NO-TERMINALS " terminals"
#### jkl, r1411                        UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            DISPLAY "   Read: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected "
#### jkl, r1411                          CM-NO-TERMINALS " terminals"
#### jkl, r1411                          UPON CONSOLE.
#### jkl, r1411            MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
#### jkl, r1411            REWRITE TSPFL-RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "02"
#### jkl, r1411            AND CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 00/02"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                        "00/02 as expected"
#### jkl, r1411                         UPON CONSOLE
#### jkl, r1411            END-IF
#### jkl, r1411            MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
#### jkl, r1411            REWRITE TSPFL-RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "02"
#### jkl, r1411            AND CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 00/02"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                        "00/02 as expected"
#### jkl, r1411                        UPON CONSOLE
#### jkl, r1411            END-IF
#### jkl, r1411            DELETE TSPFILE
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411        LOADFLAT.
#### jkl, r1411            OPEN OUTPUT FLATFILE.
#### jkl, r1411            PERFORM FLAT-RECORD
#### jkl, r1411                         VARYING SUB FROM 1 BY 1
#### jkl, r1411                           UNTIL SUB > MAX-SUB
#### jkl, r1411                              OR SUB > 5.
#### jkl, r1411            CLOSE FLATFILE.
#### jkl, r1411            OPEN INPUT FLATFILE.
#### jkl, r1411            MOVE 3 TO REC-NUM
#### jkl, r1411            READ FLATFILE
#### jkl, r1411            MOVE 999 TO REC-NUM
#### jkl, r1411            READ FLATFILE
#### jkl, r1411            CLOSE FLATFILE.
#### jkl, r1411 
#### jkl, r1411        FLAT-RECORD.
#### jkl, r1411 
#### jkl, r1411            MOVE SPACES                       TO TSP2-RECORD.
#### jkl, r1411            MOVE SUB                          TO REC-NUM.
#### jkl, r1411            MOVE DATA-CUST-NUM      (SUB)     TO C2-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (SUB)     TO C2-COMPANY.
#### jkl, r1411            MOVE DATA-NO-TERMINALS  (SUB)     TO C2-NO-TERMINALS.
#### jkl, r1411            MOVE 20070319                     TO C2-PK-DATE.
#### jkl, r1411            IF  ODD-RECORD
#### jkl, r1411                MOVE "8417"                   TO C2-DISK
#### jkl, r1411            ELSE
#### jkl, r1411                MOVE "8470"                   TO C2-DISK.
#### jkl, r1411            WRITE TSP2-RECORD.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -ftraceall prog.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 # first run without runtime tracing
#### jkl, r1411 AT_CHECK([$COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [OK: Operations on empty file
#### jkl, r1411 Loading sample data file.
#### jkl, r1411 Sample data file load complete.
#### jkl, r1411 LIST SAMPLE FILE
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Stop read after: 11
#### jkl, r1411 LIST SAMPLE FILE DESCENDING
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
#### jkl, r1411 Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
#### jkl, r1411 Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
#### jkl, r1411   Write: GIB00000 got 22 as expected
#### jkl, r1411    Read: GAM00000 got 00 as expected 00075 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00 as expected 00080 terminals
#### jkl, r1411    Read: BET00000 got 00 as expected 00034 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00/02 as expected
#### jkl, r1411 ReWrite: FOR00000 got 00/02 as expected
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 # not merged yet:
#### jkl, r1411 #export COB_TRACE_IO=Y
#### jkl, r1411 #export IO_TSPFILE=trace
#### jkl, r1411 #export IO_TSTFILE=no-trace
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_TRACE_FILE=trace.txt \
#### jkl, r1411 COB_SET_TRACE=Y \
#### jkl, r1411 COB_TRACE_FORMAT="Line: %L %S" \
#### jkl, r1411 $COBCRUN_DIRECT ./prog], [0],
#### jkl, r1411 [OK: Operations on empty file
#### jkl, r1411 Loading sample data file.
#### jkl, r1411 Sample data file load complete.
#### jkl, r1411 LIST SAMPLE FILE
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Stop read after: 11
#### jkl, r1411 LIST SAMPLE FILE DESCENDING
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
#### jkl, r1411 Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
#### jkl, r1411 Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
#### jkl, r1411   Write: GIB00000 got 22 as expected
#### jkl, r1411    Read: GAM00000 got 00 as expected 00075 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00 as expected 00080 terminals
#### jkl, r1411    Read: BET00000 got 00 as expected 00034 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00/02 as expected
#### jkl, r1411 ReWrite: FOR00000 got 00/02 as expected
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_CAPTURE_FILE(./trace.txt)
#### jkl, r1411 
#### jkl, r1411 # variant with file trace:
#### jkl, r1411 #AT_DATA([reference],
#### jkl, r1411 #[Source: 'prog.cob'
#### jkl, r1411 #Program-Id:  prog
#### jkl, r1411 #Line:    292     Entry: prog
#### jkl, r1411 #Line:    292 Paragraph: MAINFILE
#### jkl, r1411 #Line:    293            OPEN
#### jkl, r1411 #           OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411 #Line:    294            CLOSE
#### jkl, r1411 #           CLOSE TSPFILE Status: 00
#### jkl, r1411 #Line:    296            OPEN
#### jkl, r1411 #           OPEN I_O TSPFILE -> 'testisam' Status: 00
#### jkl, r1411 #Line:    297            MOVE
#### jkl, r1411 #Line:    298            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 10
#### jkl, r1411 #Line:    299            IF
#### jkl, r1411 #Line:    304            MOVE
#### jkl, r1411 #Line:    305            START
#### jkl, r1411 #           START TSPFILE Status: 23
#### jkl, r1411 #           Key : ALL LOW-VALUES
#### jkl, r1411 #Line:    306            IF
#### jkl, r1411 #Line:    311            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 46
#### jkl, r1411 #Line:    312            IF
#### jkl, r1411 #Line:    317            DISPLAY
#### jkl, r1411 #Line:    318            CLOSE
#### jkl, r1411 #           CLOSE TSPFILE Status: 00
#### jkl, r1411 #Line:    320            PERFORM
#### jkl, r1411 #Line:    335 Paragraph: LOADFILE
#### jkl, r1411 #Line:    336            DISPLAY
#### jkl, r1411 #Line:    339            OPEN
#### jkl, r1411 #           OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411 #Line:    340            IF
#### jkl, r1411 #Line:    346            PERFORM
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 00
#### jkl, r1411 #        Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
#### jkl, r1411 #                 '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
#### jkl, r1411 #                 '    1600 BPI00085'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 00
#### jkl, r1411 #        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411 #                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00034'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411 #                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411 #                 '    1600 BPI00075'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411 #                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411 #                 '    6250 BPI00045'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411 #                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00090'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411 #                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00067'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411 #                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00032'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411 #                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00016'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411 #                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00034'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    373            MOVE
#### jkl, r1411 #Line:    374            MOVE
#### jkl, r1411 #Line:    375            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411 #                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00128'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411 #                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00064'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411 #                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00110'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411 #                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00324'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#### jkl, r1411 #                 '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00124'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 #Line:    360            MOVE
#### jkl, r1411 #Line:    361            MOVE
#### jkl, r1411 #Line:    362            MOVE
#### jkl, r1411 #Line:    363            MOVE
#### jkl, r1411 #Line:    364            MOVE
#### jkl, r1411 #Line:    365            MOVE
#### jkl, r1411 #Line:    366            MOVE
#### jkl, r1411 #Line:    367            MOVE
#### jkl, r1411 #Line:    368            MOVE
#### jkl, r1411 #Line:    369            MOVE
#### jkl, r1411 #Line:    370            MOVE
#### jkl, r1411 #Line:    372            IF
#### jkl, r1411 #Line:    377            MOVE
#### jkl, r1411 #Line:    378            MOVE
#### jkl, r1411 #Line:    379            MOVE
#### jkl, r1411 #Line:    381            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#### jkl, r1411 #                 '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00086'
#### jkl, r1411 #Line:    382            IF
#### jkl, r1411 #Line:    350            DISPLAY
#### jkl, r1411 #Line:    352            CLOSE
#### jkl, r1411 #           CLOSE TSPFILE Status: 00
#### jkl, r1411 #Line:    321            PERFORM
#### jkl, r1411 #Line:    387 Paragraph: LISTFILE
#### jkl, r1411 #Line:    388            DISPLAY
#### jkl, r1411 #Line:    389            OPEN
#### jkl, r1411 #Line:    390            MOVE
#### jkl, r1411 #Line:    391            MOVE
#### jkl, r1411 #Line:    392            START
#### jkl, r1411 #Line:    393            READ
#### jkl, r1411 #Line:    394            READ
#### jkl, r1411 #Line:    395            CLOSE
#### jkl, r1411 #Line:    397            MOVE
#### jkl, r1411 #Line:    398            OPEN
#### jkl, r1411 #           OPEN INPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411 #Line:    399            IF
#### jkl, r1411 #Line:    404            MOVE
#### jkl, r1411 #Line:    405            MOVE
#### jkl, r1411 #Line:    406            START
#### jkl, r1411 #           START TSPFILE Status: 00
#### jkl, r1411 #           Key : 'PRE00000'
#### jkl, r1411 #Line:    407            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#### jkl, r1411 #                 '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00086'
#### jkl, r1411 #Line:    408            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 10
#### jkl, r1411 #Line:    410            MOVE
#### jkl, r1411 #Line:    411            MOVE
#### jkl, r1411 #Line:    412            START
#### jkl, r1411 #           START TSPFILE Status: 00
#### jkl, r1411 #           Key : 'DEL00000'
#### jkl, r1411 #Line:    413            IF
#### jkl, r1411 #Line:    418            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411 #                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00090'
#### jkl, r1411 #Line:    419            IF
#### jkl, r1411 #Line:    424            PERFORM
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411 #                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411 #                 '    1600 BPI00075'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411 #                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00067'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411 #                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00032'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411 #                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00016'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411 #                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00034'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411 #                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00128'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411 #                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00064'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411 #                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00110'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411 #                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00324'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    426            DISPLAY
#### jkl, r1411 #Line:    429            CALL
#### jkl, r1411 #Line:    430            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#### jkl, r1411 #                 '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00124'
#### jkl, r1411 #Line:    434            ADD
#### jkl, r1411 #Line:    436            IF
#### jkl, r1411 #Line:    439            DISPLAY
#### jkl, r1411 #Line:    442            DISPLAY
#### jkl, r1411 #Line:    443            MOVE
#### jkl, r1411 #Line:    444            START
#### jkl, r1411 #           START TSPFILE Status: 00
#### jkl, r1411 #           Key : 'OLD00000'
#### jkl, r1411 #Line:    445            IF
#### jkl, r1411 #Line:    450            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411 #                 '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00324'
#### jkl, r1411 #Line:    451            IF
#### jkl, r1411 #Line:    456            PERFORM
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411 #                 '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00110'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411 #                 '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00064'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411 #                 '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00128'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411 #                 '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00034'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411 #                 '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411 #                 '    1600 BPI00016'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411 #                 '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411 #                 '    6250 BPI00032'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411 #                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00067'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411 #                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411 #                 '    1600 BPI00075'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411 #                 '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00090'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    458            DISPLAY
#### jkl, r1411 #Line:    461            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411 #                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411 #                 '    6250 BPI00045'
#### jkl, r1411 #Line:    465            ADD
#### jkl, r1411 #Line:    468            CLOSE
#### jkl, r1411 #           CLOSE TSPFILE Status: 00
#### jkl, r1411 #Line:    470            OPEN
#### jkl, r1411 #           OPEN I_O TSPFILE -> 'testisam' Status: 00
#### jkl, r1411 #Line:    471            MOVE
#### jkl, r1411 #Line:    472            MOVE
#### jkl, r1411 #Line:    473            MOVE
#### jkl, r1411 #Line:    474            READ
#### jkl, r1411 #           READ TSPFILE Status: 23
#### jkl, r1411 #           Key : 'BET0X000'
#### jkl, r1411 #Line:    475            IF
#### jkl, r1411 #Line:    479            MOVE
#### jkl, r1411 #Line:    480            MOVE
#### jkl, r1411 #Line:    481            READ
#### jkl, r1411 #           READ TSPFILE Status: 00
#### jkl, r1411 #        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411 #                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00034'
#### jkl, r1411 #           Key : 'BET00000'
#### jkl, r1411 #Line:    482            IF
#### jkl, r1411 #Line:    486            DISPLAY
#### jkl, r1411 #Line:    490            READ
#### jkl, r1411 #           READ Sequential TSPFILE Status: 00
#### jkl, r1411 #        Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411 #                 '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411 #                 '    6250 BPI00045'
#### jkl, r1411 #Line:    491            IF
#### jkl, r1411 #Line:    495            DISPLAY
#### jkl, r1411 #Line:    499            MOVE
#### jkl, r1411 #Line:    500            MOVE
#### jkl, r1411 #Line:    501            READ
#### jkl, r1411 #           READ TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411 #                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00067'
#### jkl, r1411 #           Key :  6456445643
#### jkl, r1411 #Line:    502            IF
#### jkl, r1411 #Line:    506            DISPLAY
#### jkl, r1411 #Line:    510            WRITE
#### jkl, r1411 #           WRITE TSPFILE Status: 22
#### jkl, r1411 #        Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411 #                 '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411 #                 '    1600 BPI00067'
#### jkl, r1411 #Line:    511            IF
#### jkl, r1411 #Line:    515            DISPLAY
#### jkl, r1411 #Line:    518            MOVE
#### jkl, r1411 #Line:    519            MOVE
#### jkl, r1411 #Line:    520            READ
#### jkl, r1411 #           READ TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411 #                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411 #                 '    1600 BPI00075'
#### jkl, r1411 #           Key : 'GAM00000'
#### jkl, r1411 #Line:    521            DISPLAY
#### jkl, r1411 #Line:    525            ADD
#### jkl, r1411 #Line:    526            REWRITE
#### jkl, r1411 #           REWRITE TSPFILE Status: 00
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411 #                 '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411 #                 '    1600 BPI00080'
#### jkl, r1411 #Line:    527            IF
#### jkl, r1411 #Line:    532            DISPLAY
#### jkl, r1411 #Line:    537            MOVE
#### jkl, r1411 #Line:    538            MOVE
#### jkl, r1411 #Line:    539            READ
#### jkl, r1411 #           READ TSPFILE Status: 00
#### jkl, r1411 #        Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411 #                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00034'
#### jkl, r1411 #           Key : 'BET00000'
#### jkl, r1411 #Line:    540            DISPLAY
#### jkl, r1411 #Line:    544            MOVE
#### jkl, r1411 #Line:    545            MOVE
#### jkl, r1411 #Line:    546            REWRITE
#### jkl, r1411 #           REWRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411 #                 '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411 #                 '    6250 BPI00034'
#### jkl, r1411 #Line:    547            IF
#### jkl, r1411 #Line:    552            DISPLAY
#### jkl, r1411 #Line:    556            MOVE
#### jkl, r1411 #Line:    557            MOVE
#### jkl, r1411 #Line:    558            READ
#### jkl, r1411 #           READ TSPFILE Status: 00
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #           Key : 'FOR00000'
#### jkl, r1411 #Line:    559            MOVE
#### jkl, r1411 #Line:    560            MOVE
#### jkl, r1411 #Line:    561            REWRITE
#### jkl, r1411 #           REWRITE TSPFILE Status: 02
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #Line:    562            IF
#### jkl, r1411 #Line:    567            DISPLAY
#### jkl, r1411 #Line:    571            DELETE
#### jkl, r1411 #           DELETE TSPFILE Status: 00
#### jkl, r1411 #        Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411 #                 '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411 #                 '    6250 BPI00107'
#### jkl, r1411 #Line:    572            CLOSE
#### jkl, r1411 #           CLOSE TSPFILE Status: 00
#### jkl, r1411 #Line:    333            STOP RUN
#### jkl, r1411 #])
#### jkl, r1411 
#### jkl, r1411 # variant without file trace
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_DATA([reference],
#### jkl, r1411 [Source: 'prog.cob'
#### jkl, r1411 Program-Id:  prog
#### jkl, r1411 Line:    290     Entry: prog
#### jkl, r1411 Line:    292 Paragraph: MAINFILE
#### jkl, r1411 Line:    293            OPEN
#### jkl, r1411 Line:    294            CLOSE
#### jkl, r1411 Line:    296            OPEN
#### jkl, r1411 Line:    297            MOVE
#### jkl, r1411 Line:    298            READ
#### jkl, r1411 Line:    299            IF
#### jkl, r1411 Line:    304            MOVE
#### jkl, r1411 Line:    305            START
#### jkl, r1411 Line:    306            IF
#### jkl, r1411 Line:    311            READ
#### jkl, r1411 Line:    312            IF
#### jkl, r1411 Line:    317            DISPLAY
#### jkl, r1411 Line:    318            CLOSE
#### jkl, r1411 Line:    320            PERFORM
#### jkl, r1411 Line:    335 Paragraph: LOADFILE
#### jkl, r1411 Line:    336            DISPLAY
#### jkl, r1411 Line:    339            OPEN
#### jkl, r1411 Line:    340            IF
#### jkl, r1411 Line:    346            PERFORM
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    373            MOVE
#### jkl, r1411 Line:    374            MOVE
#### jkl, r1411 Line:    375            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    358 Paragraph: 1000-LOAD-RECORD
#### jkl, r1411 Line:    360            MOVE
#### jkl, r1411 Line:    361            MOVE
#### jkl, r1411 Line:    362            MOVE
#### jkl, r1411 Line:    363            MOVE
#### jkl, r1411 Line:    364            MOVE
#### jkl, r1411 Line:    365            MOVE
#### jkl, r1411 Line:    366            MOVE
#### jkl, r1411 Line:    367            MOVE
#### jkl, r1411 Line:    368            MOVE
#### jkl, r1411 Line:    369            MOVE
#### jkl, r1411 Line:    370            MOVE
#### jkl, r1411 Line:    372            IF
#### jkl, r1411 Line:    377            MOVE
#### jkl, r1411 Line:    378            MOVE
#### jkl, r1411 Line:    379            MOVE
#### jkl, r1411 Line:    381            WRITE
#### jkl, r1411 Line:    382            IF
#### jkl, r1411 Line:    350            DISPLAY
#### jkl, r1411 Line:    352            CLOSE
#### jkl, r1411 Line:    321            PERFORM
#### jkl, r1411 Line:    387 Paragraph: LISTFILE
#### jkl, r1411 Line:    388            DISPLAY
#### jkl, r1411 Line:    389            OPEN
#### jkl, r1411 Line:    390            MOVE
#### jkl, r1411 Line:    391            MOVE
#### jkl, r1411 Line:    392            START
#### jkl, r1411 Line:    393            READ
#### jkl, r1411 Line:    394            READ
#### jkl, r1411 Line:    395            CLOSE
#### jkl, r1411 Line:    397            MOVE
#### jkl, r1411 Line:    398            OPEN
#### jkl, r1411 Line:    399            IF
#### jkl, r1411 Line:    404            MOVE
#### jkl, r1411 Line:    405            MOVE
#### jkl, r1411 Line:    406            START
#### jkl, r1411 Line:    407            READ
#### jkl, r1411 Line:    408            READ
#### jkl, r1411 Line:    410            MOVE
#### jkl, r1411 Line:    411            MOVE
#### jkl, r1411 Line:    412            START
#### jkl, r1411 Line:    413            IF
#### jkl, r1411 Line:    418            READ
#### jkl, r1411 Line:    419            IF
#### jkl, r1411 Line:    424            PERFORM
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    426            DISPLAY
#### jkl, r1411 Line:    429            CALL
#### jkl, r1411 Line:    430            READ
#### jkl, r1411 Line:    434            ADD
#### jkl, r1411 Line:    436            IF
#### jkl, r1411 Line:    439            DISPLAY
#### jkl, r1411 Line:    442            DISPLAY
#### jkl, r1411 Line:    443            MOVE
#### jkl, r1411 Line:    444            START
#### jkl, r1411 Line:    445            IF
#### jkl, r1411 Line:    450            READ
#### jkl, r1411 Line:    451            IF
#### jkl, r1411 Line:    456            PERFORM
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    458            DISPLAY
#### jkl, r1411 Line:    461            READ
#### jkl, r1411 Line:    465            ADD
#### jkl, r1411 Line:    468            CLOSE
#### jkl, r1411 Line:    470            OPEN
#### jkl, r1411 Line:    471            MOVE
#### jkl, r1411 Line:    472            MOVE
#### jkl, r1411 Line:    473            MOVE
#### jkl, r1411 Line:    474            READ
#### jkl, r1411 Line:    475            IF
#### jkl, r1411 Line:    479            MOVE
#### jkl, r1411 Line:    480            MOVE
#### jkl, r1411 Line:    481            READ
#### jkl, r1411 Line:    482            IF
#### jkl, r1411 Line:    486            DISPLAY
#### jkl, r1411 Line:    490            READ
#### jkl, r1411 Line:    491            IF
#### jkl, r1411 Line:    495            DISPLAY
#### jkl, r1411 Line:    499            MOVE
#### jkl, r1411 Line:    500            MOVE
#### jkl, r1411 Line:    501            READ
#### jkl, r1411 Line:    502            IF
#### jkl, r1411 Line:    506            DISPLAY
#### jkl, r1411 Line:    510            WRITE
#### jkl, r1411 Line:    511            IF
#### jkl, r1411 Line:    515            DISPLAY
#### jkl, r1411 Line:    518            MOVE
#### jkl, r1411 Line:    519            MOVE
#### jkl, r1411 Line:    520            READ
#### jkl, r1411 Line:    521            DISPLAY
#### jkl, r1411 Line:    525            ADD
#### jkl, r1411 Line:    526            REWRITE
#### jkl, r1411 Line:    527            IF
#### jkl, r1411 Line:    532            DISPLAY
#### jkl, r1411 Line:    537            MOVE
#### jkl, r1411 Line:    538            MOVE
#### jkl, r1411 Line:    539            READ
#### jkl, r1411 Line:    540            DISPLAY
#### jkl, r1411 Line:    544            MOVE
#### jkl, r1411 Line:    545            MOVE
#### jkl, r1411 Line:    546            REWRITE
#### jkl, r1411 Line:    547            IF
#### jkl, r1411 Line:    552            DISPLAY
#### jkl, r1411 Line:    556            MOVE
#### jkl, r1411 Line:    557            MOVE
#### jkl, r1411 Line:    558            READ
#### jkl, r1411 Line:    559            MOVE
#### jkl, r1411 Line:    560            MOVE
#### jkl, r1411 Line:    561            REWRITE
#### jkl, r1411 Line:    562            IF
#### jkl, r1411 Line:    567            DISPLAY
#### jkl, r1411 Line:    571            DELETE
#### jkl, r1411 Line:    572            CLOSE
#### jkl, r1411 Line:    333            STOP RUN
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([diff reference trace.txt], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -ftrace prog.cob -o prog_s], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_TRACE_FILE=+trace_append.txt \
#### jkl, r1411 COB_SET_TRACE=Y \
#### jkl, r1411 COB_TRACE_FORMAT="%S and now ... %L" \
#### jkl, r1411 $COBCRUN_DIRECT ./prog_s], [0],
#### jkl, r1411 [OK: Operations on empty file
#### jkl, r1411 Loading sample data file.
#### jkl, r1411 Sample data file load complete.
#### jkl, r1411 LIST SAMPLE FILE
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Stop read after: 11
#### jkl, r1411 LIST SAMPLE FILE DESCENDING
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
#### jkl, r1411 Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
#### jkl, r1411 Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
#### jkl, r1411   Write: GIB00000 got 22 as expected
#### jkl, r1411    Read: GAM00000 got 00 as expected 00075 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00 as expected 00080 terminals
#### jkl, r1411    Read: BET00000 got 00 as expected 00034 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00/02 as expected
#### jkl, r1411 ReWrite: FOR00000 got 00/02 as expected
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_TRACE_FILE=+trace_append.txt \
#### jkl, r1411 COB_SET_TRACE=Y \
#### jkl, r1411 COB_TRACE_FORMAT="%S - %L"\
#### jkl, r1411 $COBCRUN_DIRECT ./prog_s], [0],
#### jkl, r1411 [OK: Operations on empty file
#### jkl, r1411 Loading sample data file.
#### jkl, r1411 Sample data file load complete.
#### jkl, r1411 LIST SAMPLE FILE
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Stop read after: 11
#### jkl, r1411 LIST SAMPLE FILE DESCENDING
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
#### jkl, r1411 Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
#### jkl, r1411 Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
#### jkl, r1411   Write: GIB00000 got 22 as expected
#### jkl, r1411    Read: GAM00000 got 00 as expected 00075 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00 as expected 00080 terminals
#### jkl, r1411    Read: BET00000 got 00 as expected 00034 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00/02 as expected
#### jkl, r1411 ReWrite: FOR00000 got 00/02 as expected
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_DATA([reference_append],
#### jkl, r1411 [Source: 'prog.cob'
#### jkl, r1411 Program-Id:  prog
#### jkl, r1411     Entry: prog                            and now ...    290
#### jkl, r1411 Paragraph: MAINFILE                        and now ...    292
#### jkl, r1411 Paragraph: LOADFILE                        and now ...    335
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                and now ...    358
#### jkl, r1411 Paragraph: LISTFILE                        and now ...    387
#### jkl, r1411 Source: 'prog.cob'
#### jkl, r1411 Program-Id:  prog
#### jkl, r1411     Entry: prog                            -    290
#### jkl, r1411 Paragraph: MAINFILE                        -    292
#### jkl, r1411 Paragraph: LOADFILE                        -    335
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: 1000-LOAD-RECORD                -    358
#### jkl, r1411 Paragraph: LISTFILE                        -    387
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 # AT_DATA workaround via sed:
#### jkl, r1411 AT_CAPTURE_FILE(./trace_append.txt)
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([diff reference_append trace_append.txt], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Test dump feature])
#### jkl, r1411 AT_KEYWORDS([Dump])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([./cpyabrt], [
#### jkl, r1411             MOVE "Quick brown fox jumped over the dog"
#### jkl, r1411               TO TSTTAILX (1:40).
#### jkl, r1411             MOVE CM-COMPANY TO TSTTAILX (42:20).
#### jkl, r1411       *     DISPLAY ':' X ':'.
#### jkl, r1411       *     DISPLAY CM-COMPANY.
#### jkl, r1411       *     DISPLAY '>' CM-COMPANY '<'.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411 
#### jkl, r1411        INPUT-OUTPUT SECTION.
#### jkl, r1411        FILE-CONTROL.
#### jkl, r1411            SELECT FLATFILE ASSIGN EXTERNAL RELFIX
#### jkl, r1411            ORGANIZATION RELATIVE
#### jkl, r1411            ACCESS IS SEQUENTIAL RELATIVE KEY IS REC-NUM
#### jkl, r1411            FILE STATUS IS CUST-STAT.
#### jkl, r1411 
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        FILE SECTION.
#### jkl, r1411        FD  FLATFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411 
#### jkl, r1411        01  TSPFL-RECORD.
#### jkl, r1411            10  CM-CUST-NUM                     PICTURE X(8).
#### jkl, r1411            10  CM-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  CM-DISK                         PICTURE X(8).
#### jkl, r1411            10  CM-NO-TERMINALS                 PICTURE 9(4).
#### jkl, r1411 
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        77  MAX-SUB           VALUE  6          PICTURE 9(4) COMP SYNC.
#### jkl, r1411        77  CUST-STAT                           PICTURE X(2).
#### jkl, r1411        77  REC-NUM           VALUE  1          PICTURE 9(4).
#### jkl, r1411        01  BIN                      PIC 9(9) BINARY VALUE 0.
#### jkl, r1411 
#### jkl, r1411        01  TEST-DATA.
#### jkl, r1411          02  DATA-CUST-NUM-TBL.
#### jkl, r1411            05  FILLER PIC X(8) VALUE "ALP00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "BET00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "DEL00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "EPS00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "FOR00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "GAM00000".
#### jkl, r1411 
#### jkl, r1411          02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
#### jkl, r1411                                        PIC X(8) OCCURS 6.
#### jkl, r1411          02  DATA-COMPANY-TBL.
#### jkl, r1411            05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
#### jkl, r1411          02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
#### jkl, r1411                                        PIC X(25) OCCURS 6.
#### jkl, r1411          02  DATA-ADDRESS-2-TBL.
#### jkl, r1411            05  FILLER PIC X(10) VALUE "ATLANTA   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CALGARY   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW YORK  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "TORONTO   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WASHINGTON".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WHITEPLAIN".
#### jkl, r1411          02  DATA-ADDRESS   REDEFINES DATA-ADDRESS-2-TBL
#### jkl, r1411                                        PIC X(10) OCCURS 6.
#### jkl, r1411 
#### jkl, r1411          02  DATA-NO-TERMINALS-TBL.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 10.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 13.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 75.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 10.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 90.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 254.
#### jkl, r1411          02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
#### jkl, r1411                                        PIC 9(3) COMP-3 OCCURS 6.
#### jkl, r1411        01  WORK-AREA IS EXTERNAL.
#### jkl, r1411            05  SUB                             PICTURE 9(4) COMP SYNC.
#### jkl, r1411                88  ODD-RECORD                  VALUE 1 3 5.
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411 
#### jkl, r1411            PERFORM LOADFILE.
#### jkl, r1411 
#### jkl, r1411            OPEN INPUT FLATFILE.
#### jkl, r1411            READ FLATFILE.
#### jkl, r1411 
#### jkl, r1411        MAIN-100.
#### jkl, r1411            PERFORM CALL-SUB-1.
#### jkl, r1411            PERFORM CALL-SUB-2.
#### jkl, r1411            PERFORM CALL-IT-OMIT.
#### jkl, r1411            STOP RUN.
#### jkl, r1411 
#### jkl, r1411        LOADFILE.
#### jkl, r1411            OPEN OUTPUT FLATFILE.
#### jkl, r1411 
#### jkl, r1411            PERFORM LOAD-RECORD
#### jkl, r1411                         VARYING SUB FROM 1 BY 1
#### jkl, r1411                           UNTIL SUB > MAX-SUB.
#### jkl, r1411 
#### jkl, r1411            CLOSE FLATFILE.
#### jkl, r1411 
#### jkl, r1411        LOAD-RECORD.
#### jkl, r1411 
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
#### jkl, r1411            MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
#### jkl, r1411            IF  ODD-RECORD
#### jkl, r1411                MOVE "8417"                   TO CM-DISK
#### jkl, r1411            ELSE
#### jkl, r1411                MOVE "8470"                   TO CM-DISK.
#### jkl, r1411            WRITE TSPFL-RECORD.
#### jkl, r1411 
#### jkl, r1411        CALL-SUB-1 SECTION.
#### jkl, r1411            CALL "sub1" USING bin, TSPFL-RECORD.
#### jkl, r1411 
#### jkl, r1411        CALL-SUB-2 SECTION.
#### jkl, r1411            MOVE 4096 TO bin
#### jkl, r1411            CALL "sub2" USING bin, TSPFL-RECORD.
#### jkl, r1411 
#### jkl, r1411        CALL-IT-OMIT SECTION.
#### jkl, r1411            MOVE 5440 TO bin
#### jkl, r1411            CALL "sub1" USING bin, OMITTED.
#### jkl, r1411 
#### jkl, r1411            END PROGRAM prog.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. sub1.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  ZRO PIC 9(9) BINARY VALUE 0.
#### jkl, r1411        01  HEXV PIC X  COMP-X.
#### jkl, r1411        01  HEXC REDEFINES HEXV PIC X.
#### jkl, r1411 
#### jkl, r1411        01 TEST-BASED BASED.
#### jkl, r1411           05 TEST-BASED-SUB PIC X(00000100000).
#### jkl, r1411 
#### jkl, r1411        01 TEST-ALLOCED BASED.
#### jkl, r1411           05 TEST-ALLOCED-SUB1 PIC X(010).
#### jkl, r1411           05 TEST-ALLOCED-SUB2 PIC 9(006).
#### jkl, r1411 
#### jkl, r1411        01  IDX PIC 9(9) BINARY VALUE 0.
#### jkl, r1411        01  TSTREC.
#### jkl, r1411          05  TSTDEP  PIC XXX.
#### jkl, r1411          05  TSTX OCCURS 4 TIMES.
#### jkl, r1411            15  TSTG-1 PIC 99.
#### jkl, r1411            15  TSTX-2 PIC XX OCCURS 4 TIMES.
#### jkl, r1411          05  TSTTAIL1  PIC 99.
#### jkl, r1411          05  TSTCOMP3  PIC 9(5) COMP-3.
#### jkl, r1411          05  TSTLONG   PIC X(100).
#### jkl, r1411          05  TSTHEX    PIC X(100).
#### jkl, r1411          05  TSTHEX2   PIC X(60).
#### jkl, r1411          05  TSTTAILX  PIC X(80).
#### jkl, r1411 
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01  X  PIC 9(9) BINARY.
#### jkl, r1411        01  TSPFL-RECORD.
#### jkl, r1411            10  CM-CUST-NUM                     PICTURE X(8).
#### jkl, r1411            10  CM-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  CM-DISK                         PICTURE X(8).
#### jkl, r1411            10  CM-NO-TERMINALS                 PICTURE 9(4).
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING X, TSPFL-RECORD.
#### jkl, r1411        MAIN-1 SECTION.
#### jkl, r1411             MOVE ALL "X" TO TSTREC.
#### jkl, r1411             MOVE 1 TO TSTG-1 (1).
#### jkl, r1411             MOVE 2 TO TSTG-1 (2).
#### jkl, r1411             MOVE 3 TO TSTG-1 (3).
#### jkl, r1411             MOVE 'A' TO TSTX-2 (1,1).
#### jkl, r1411             MOVE 'B' TO TSTX-2 (2,1).
#### jkl, r1411             MOVE 'C' TO TSTX-2 (3,1).
#### jkl, r1411             MOVE 'xx' TO TSTX-2 (1,4).
#### jkl, r1411             MOVE 'yy' TO TSTX-2 (2,4).
#### jkl, r1411             MOVE 'zz' TO TSTX-2 (3,4).
#### jkl, r1411             MOVE SPACES TO TSTX-2 (1,3).
#### jkl, r1411             MOVE HIGH-VALUES TO TSTX (4).
#### jkl, r1411             MOVE LOW-VALUES TO TSTX-2 (2,3).
#### jkl, r1411             MOVE HIGH-VALUES TO TSTX-2 (3,3).
#### jkl, r1411             MOVE "Quick brown fox jumped over the dog"
#### jkl, r1411               TO TSTLONG, TSTLONG (50:36).
#### jkl, r1411             MOVE "Quicker grey fox jumped the cougar"
#### jkl, r1411               TO TSTHEX (1:35).
#### jkl, r1411        MAIN-2.
#### jkl, r1411             MOVE 17 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (39:1).
#### jkl, r1411             MOVE HEXC TO TSTTAIL1 (2:1).
#### jkl, r1411             MOVE 7 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (47:1).
#### jkl, r1411             MOVE 13 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (59:1).
#### jkl, r1411             MOVE 0 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
#### jkl, r1411             MOVE 9 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (47:1).
#### jkl, r1411             MOVE '\' TO TSTHEX2 (32:1).
#### jkl, r1411             MOVE 13 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (59:1).
#### jkl, r1411             MOVE 'A' TO TSTHEX2 (54:1).
#### jkl, r1411             MOVE LOW-VALUES TO TSTTAILX
#### jkl, r1411             ADD 1 TO X.
#### jkl, r1411             DISPLAY "X is " X.
#### jkl, r1411             ALLOCATE TEST-ALLOCED INITIALIZED.
#### jkl, r1411             COPY cpyabrt.
#### jkl, r1411             IF ADDRESS OF TEST-BASED NOT = NULL
#### jkl, r1411               DISPLAY TEST-BASED-SUB
#### jkl, r1411             END-IF.
#### jkl, r1411             GOBACK.
#### jkl, r1411        END PROGRAM sub1.
#### jkl, r1411 
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. sub2.
#### jkl, r1411        DATA DIVISION.
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411        01  ZRO PIC 9(9) BINARY VALUE 0.
#### jkl, r1411        01  HEXV PIC X  COMP-X.
#### jkl, r1411        01  HEXC REDEFINES HEXV PIC X.
#### jkl, r1411 
#### jkl, r1411        01  IDX PIC 9(9) BINARY VALUE 0.
#### jkl, r1411        01  TSTREC.
#### jkl, r1411          05  TSTDEP  PIC XXX.
#### jkl, r1411          05  TSTX OCCURS 4 TIMES.
#### jkl, r1411            15  TSTG-1 PIC 99.
#### jkl, r1411            15  TSTX-2 PIC XX OCCURS 4 TIMES.
#### jkl, r1411          05  TSTTAIL1  PIC 99.
#### jkl, r1411          05  TSTCOMP3  PIC 9(5) COMP-3.
#### jkl, r1411          05  TSTLONG   PIC X(100).
#### jkl, r1411          05  TSTHEX    PIC X(100).
#### jkl, r1411          05  TSTHEX2   PIC X(60).
#### jkl, r1411          05  TSTTAILX  PIC X(80).
#### jkl, r1411 
#### jkl, r1411        LINKAGE SECTION.
#### jkl, r1411        01  X  PIC 9(9) BINARY.
#### jkl, r1411        01  TSPFL-RECORD.
#### jkl, r1411            10  CM-CUST-NUM                     PICTURE X(8).
#### jkl, r1411            10  CM-COMPANY                      PICTURE X(25).
#### jkl, r1411            10  CM-DISK                         PICTURE X(8).
#### jkl, r1411            10  CM-NO-TERMINALS                 PICTURE 9(4).
#### jkl, r1411 
#### jkl, r1411        PROCEDURE DIVISION USING X, TSPFL-RECORD.
#### jkl, r1411             MOVE ALL "X" TO TSTREC.
#### jkl, r1411             MOVE 1 TO TSTG-1 (1).
#### jkl, r1411             MOVE 2 TO TSTG-1 (2).
#### jkl, r1411             MOVE 3 TO TSTG-1 (3).
#### jkl, r1411             MOVE 'A' TO TSTX-2 (1,1).
#### jkl, r1411             MOVE 'B' TO TSTX-2 (2,1).
#### jkl, r1411             MOVE 'C' TO TSTX-2 (3,1).
#### jkl, r1411             MOVE 'xx' TO TSTX-2 (1,4).
#### jkl, r1411             MOVE 'yy' TO TSTX-2 (2,4).
#### jkl, r1411             MOVE 'zz' TO TSTX-2 (3,4).
#### jkl, r1411             MOVE SPACES TO TSTX-2 (1,3).
#### jkl, r1411             MOVE HIGH-VALUES TO TSTX (4).
#### jkl, r1411             MOVE LOW-VALUES TO TSTX-2 (2,3).
#### jkl, r1411             MOVE HIGH-VALUES TO TSTX-2 (3,3).
#### jkl, r1411             MOVE "Quick brown fox jumped over the dog"
#### jkl, r1411               TO TSTLONG, TSTLONG (50:36).
#### jkl, r1411             MOVE "Quicker grey fox jumped the cougar"
#### jkl, r1411               TO TSTHEX (1:35).
#### jkl, r1411             MOVE 17 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (39:1).
#### jkl, r1411             MOVE HEXC TO TSTTAIL1 (2:1).
#### jkl, r1411             MOVE 7 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (47:1).
#### jkl, r1411             MOVE 13 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX (59:1).
#### jkl, r1411             MOVE 0 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (39:1), TSTHEX2 (10:1).
#### jkl, r1411             MOVE 9 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (47:1).
#### jkl, r1411             MOVE '\' TO TSTHEX2 (32:1).
#### jkl, r1411             MOVE 13 TO HEXV.
#### jkl, r1411             MOVE HEXC TO TSTHEX2 (59:1).
#### jkl, r1411             MOVE 'A' TO TSTHEX2 (54:1).
#### jkl, r1411             MOVE LOW-VALUES TO TSTTAILX.
#### jkl, r1411             COPY cpyabrt.
#### jkl, r1411        END PROGRAM sub2.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fdump=ALL prog.cob], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_DUMP_FILE=tstdump.txt \
#### jkl, r1411 $COBCRUN_DIRECT ./prog], [1],
#### jkl, r1411 [X is 000000001
#### jkl, r1411 X is 000005441
#### jkl, r1411 ],
#### jkl, r1411 [libcob: cpyabrt:4: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#### jkl, r1411 libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CAPTURE_FILE(./tstdump.txt)
#### jkl, r1411 
#### jkl, r1411 AT_DATA([reference_tmpl],
#### jkl, r1411 [Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#### jkl, r1411  Last statement of sub1 was Line 4 of cpyabrt
#### jkl, r1411  Last statement of prog was Line 118 of prog.cob
#### jkl, r1411 
#### jkl, r1411 Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS
#### jkl, r1411 
#### jkl, r1411 WORKING-STORAGE
#### jkl, r1411 **********************
#### jkl, r1411 01        ZRO                             000000000
#### jkl, r1411 01        HEXV                            13
#### jkl, r1411 01        TEST-BASED.                     <NULL> address
#### jkl, r1411 01        TEST-ALLOCED.
#### jkl, r1411   05      TEST-ALLOCED-SUB1              ALL SPACES
#### jkl, r1411   05      TEST-ALLOCED-SUB2               000000
#### jkl, r1411 01        IDX                             000000000
#### jkl, r1411 01        TSTREC.
#### jkl, r1411   05      TSTDEP                         'XXX'
#### jkl, r1411   05      TSTX.
#### jkl, r1411        15 TSTG-1 (1)                      01
#### jkl, r1411        15 TSTX-2 (1,1)                   'A'
#### jkl, r1411        15 TSTX-2 (1,2)                   'XX'
#### jkl, r1411        15 TSTX-2 (1,3)                   ALL SPACES
#### jkl, r1411        15 TSTX-2 (1,4)                   'xx'
#### jkl, r1411        15 TSTG-1 (2)                      02
#### jkl, r1411        15 TSTX-2 (2,1)                   'B'
#### jkl, r1411        15 TSTX-2 (2,2)                   'XX'
#### jkl, r1411        15 TSTX-2 (2,3)                   ALL LOW-VALUES
#### jkl, r1411        15 TSTX-2 (2,4)                   'yy'
#### jkl, r1411        15 TSTG-1 (3)                      03
#### jkl, r1411        15 TSTX-2 (3,1)                   'C'
#### jkl, r1411        15 TSTX-2 (3,2)                   'XX'
#### jkl, r1411        15 TSTX-2 (3,3)                   ALL HIGH-VALUES
#### jkl, r1411        15 TSTX-2 (3,4)                   'zz'
#### jkl, r1411        15 TSTG-1 (4)                     ALL HIGH-VALUES
#### jkl, r1411        15 TSTX-2 (4,1)                   ALL HIGH-VALUES
#### jkl, r1411        15 TSTX-2 (4,2)                   ALL HIGH-VALUES
#### jkl, r1411        15 TSTX-2 (4,3)                   ALL HIGH-VALUES
#### jkl, r1411        15 TSTX-2 (4,4)                   ALL HIGH-VALUES
#### jkl, r1411   05      TSTTAIL1                        X  _
#### jkl, r1411                                      1 x 5811
#### jkl, r1411   05      TSTCOMP3                        58585
#### jkl, r1411   05      TSTLONG                        'Quick brown fox jumped over the dog              Quick br'
#### jkl, r1411                                          'own fox jumped over the dog'
#### jkl, r1411   05      TSTHEX                          Q u i c  k e r    g r e y    f o x    j u m  p e d   _
#### jkl, r1411                                      1 x 51756963 6B657220 67726579 20666F78 206A756D 70656420 _
#### jkl, r1411                                           t h e    c o u g  a r   X  X X   X  X X X X  X X   X _
#### jkl, r1411                                     25 x 74686520 636F7567 61722058 58581158 58585858 58580758 _
#### jkl, r1411                                           X X X X  X X X X  X X   X  X X X X  X X X X  X X X X _
#### jkl, r1411                                     49 x 58585858 58585858 58580D58 58585858 58585858 58585858 _
#### jkl, r1411                                           X X X X  X X X X  X X X X  X X X X  X X X X  X X X X _
#### jkl, r1411                                     73 x 58585858 58585858 58585858 58585858 58585858 58585858 _
#### jkl, r1411                                           X X X X
#### jkl, r1411                                     97 x 58585858
#### jkl, r1411   05      TSTHEX2                        XXXXXXXXX\0XXXXXXXXXXXXXXXXXXXXX\\XXXXXX\0XXXXXXX\tXXXXXX
#### jkl, r1411                                     54 : AXXXX\rX
#### jkl, r1411   05      TSTTAILX                       'Quick brown fox jumped over the dog     '
#### jkl, r1411                                   trailing LOW-VALUES
#### jkl, r1411 
#### jkl, r1411 LINKAGE
#### jkl, r1411 **********************
#### jkl, r1411 01        X                               000005441
#### jkl, r1411 01        TSPFL-RECORD.                   <NULL> address
#### jkl, r1411 
#### jkl, r1411 Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS
#### jkl, r1411 
#### jkl, r1411 FD FLATFILE
#### jkl, r1411 **********************
#### jkl, r1411    File is OPEN
#### jkl, r1411    FILE STATUS  '00'
#### jkl, r1411 01        TSPFL-RECORD.
#### jkl, r1411      10   CM-CUST-NUM                    'ALP00000'
#### jkl, r1411      10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
#### jkl, r1411      10   CM-DISK                        '8417'
#### jkl, r1411      10   CM-NO-TERMINALS                 0010
#### jkl, r1411 
#### jkl, r1411 WORKING-STORAGE
#### jkl, r1411 **********************
#### jkl, r1411 77        MAX-SUB                         0006
#### jkl, r1411 77        CUST-STAT                      '00'
#### jkl, r1411 77        REC-NUM                         0001
#### jkl, r1411 01        BIN                             000005441
#### jkl, r1411 01        TEST-DATA.
#### jkl, r1411  02       DATA-CUST-NUM-TBL.
#### jkl, r1411   05      FILLER                         'ALP00000'
#### jkl, r1411   05      FILLER                         'BET00000'
#### jkl, r1411   05      FILLER                         'DEL00000'
#### jkl, r1411   05      FILLER                         'EPS00000'
#### jkl, r1411   05      FILLER                         'FOR00000'
#### jkl, r1411   05      FILLER                         'GAM00000'
#### jkl, r1411  02       DATA-COMPANY-TBL.
#### jkl, r1411   05      FILLER                         'ALPHA ELECTRICAL CO. LTD.'
#### jkl, r1411   05      FILLER                         'BETA SHOE MFG. INC.'
#### jkl, r1411   05      FILLER                         'DELTA LUGGAGE REPAIRS'
#### jkl, r1411   05      FILLER                         'EPSILON EQUIPMENT SUPPLY'
#### jkl, r1411   05      FILLER                         'FORTUNE COOKIE COMPANY'
#### jkl, r1411   05      FILLER                         'GAMMA X-RAY TECHNOLOGY'
#### jkl, r1411  02       DATA-ADDRESS-2-TBL.
#### jkl, r1411   05      FILLER                         'ATLANTA'
#### jkl, r1411   05      FILLER                         'CALGARY'
#### jkl, r1411   05      FILLER                         'NEW YORK'
#### jkl, r1411   05      FILLER                         'TORONTO'
#### jkl, r1411   05      FILLER                         'WASHINGTON'
#### jkl, r1411   05      FILLER                         'WHITEPLAIN'
#### jkl, r1411  02       DATA-NO-TERMINALS-TBL.
#### jkl, r1411   05      FILLER                          010
#### jkl, r1411   05      FILLER                          013
#### jkl, r1411   05      FILLER                          075
#### jkl, r1411   05      FILLER                          010
#### jkl, r1411   05      FILLER                          090
#### jkl, r1411   05      FILLER                          254
#### jkl, r1411 01        WORK-AREA.
#### jkl, r1411   05      SUB                             0007
#### jkl, r1411 
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 # AT_DATA workaround via sed:
#### jkl, r1411 AT_CHECK([sed -e 's/_$//' reference_tmpl > reference], [0], [], [])
#### jkl, r1411 AT_CHECK([sed -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
#### jkl, r1411 tstdump.txt > tstdump.sed], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([diff reference tstdump.sed], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -fdump=FD,LS prog.cob -o prog_fdls], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([COB_DUMP_FILE=tstdump_fdls.txt \
#### jkl, r1411 $COBCRUN_DIRECT ./prog_fdls], [1],
#### jkl, r1411 [X is 000000001
#### jkl, r1411 X is 000005441
#### jkl, r1411 ],
#### jkl, r1411 [libcob: cpyabrt:4: LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#### jkl, r1411 libcob: cpyabrt:4: warning: implicit CLOSE of FLATFILE ('RELFIX')
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_CAPTURE_FILE(./tstdump_fdls.txt)
#### jkl, r1411 
#### jkl, r1411 AT_DATA([reference_fdls_tmpl],
#### jkl, r1411 [Module dump due to LINKAGE item 'TSPFL-RECORD' (accessed by 'CM-COMPANY') not passed by caller
#### jkl, r1411  Last statement of sub1 was Line 4 of cpyabrt
#### jkl, r1411  Last statement of prog was Line 118 of prog.cob
#### jkl, r1411 
#### jkl, r1411 Dump Program-Id sub1 from prog.cob compiled MMM DD YYYY HH:MM:SS
#### jkl, r1411 
#### jkl, r1411 LINKAGE
#### jkl, r1411 **********************
#### jkl, r1411 01        X                               000005441
#### jkl, r1411 01        TSPFL-RECORD.                   <NULL> address
#### jkl, r1411 
#### jkl, r1411 Dump Program-Id prog from prog.cob compiled MMM DD YYYY HH:MM:SS
#### jkl, r1411 
#### jkl, r1411 FD FLATFILE
#### jkl, r1411 **********************
#### jkl, r1411    File is OPEN
#### jkl, r1411    FILE STATUS  '00'
#### jkl, r1411 01        TSPFL-RECORD.
#### jkl, r1411      10   CM-CUST-NUM                    'ALP00000'
#### jkl, r1411      10   CM-COMPANY                     'ALPHA ELECTRICAL CO. LTD.'
#### jkl, r1411      10   CM-DISK                        '8417'
#### jkl, r1411      10   CM-NO-TERMINALS                 0010
#### jkl, r1411 
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 # AT_DATA workaround via sed:
#### jkl, r1411 AT_CHECK([sed -e 's/_$//' reference_fdls_tmpl > reference], [0], [], [])
#### jkl, r1411 AT_CHECK([sed -e 's/compiled ... .. .... ..:..:../compiled MMM DD YYYY HH:MM:SS/g' \
#### jkl, r1411 tstdump_fdls.txt > tstdump.sed], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([diff reference tstdump.sed], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411 AT_SETUP([Test trace feature])
#### jkl, r1411 AT_KEYWORDS([Trace])
#### jkl, r1411 
#### jkl, r1411 AT_DATA([prog.cob], [
#### jkl, r1411        IDENTIFICATION DIVISION.
#### jkl, r1411        PROGRAM-ID. prog.
#### jkl, r1411       
#### jkl, r1411        ENVIRONMENT DIVISION.
#### jkl, r1411        CONFIGURATION SECTION.
#### jkl, r1411       
#### jkl, r1411        INPUT-OUTPUT SECTION.
#### jkl, r1411        FILE-CONTROL.
#### jkl, r1411            SELECT OPTIONAL TSPFILE 
#### jkl, r1411            ASSIGN TO "testisam"
#### jkl, r1411            ORGANIZATION INDEXED ACCESS DYNAMIC
#### jkl, r1411            RECORD KEY IS CM-CUST-NUM
#### jkl, r1411            ALTERNATE RECORD KEY IS CM-TELEPHONE WITH DUPLICATES
#### jkl, r1411            ALTERNATE RECORD KEY IS CM-DISK WITH DUPLICATES
#### jkl, r1411            FILE STATUS IS CUST-STAT .
#### jkl, r1411 
#### jkl, r1411            SELECT TSTFILE 
#### jkl, r1411            ASSIGN TO "testisam"
#### jkl, r1411            ORGANIZATION INDEXED ACCESS DYNAMIC
#### jkl, r1411            RECORD KEY IS TS-CUST-NUM
#### jkl, r1411            ALTERNATE RECORD KEY IS TS-TELEPHONE WITH DUPLICATES
#### jkl, r1411            ALTERNATE RECORD KEY IS TS-DISK WITH DUPLICATES
#### jkl, r1411            FILE STATUS IS CUST-STAT .
#### jkl, r1411 
#### jkl, r1411        DATA  DIVISION.
#### jkl, r1411        FILE SECTION.
#### jkl, r1411        FD  TSPFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411       
#### jkl, r1411        01  TSPFL-RECORD.
#### jkl, r1411            05  TSPFL-REC. 
#### jkl, r1411            10  CM-CUST-NUM.
#### jkl, r1411              15  CM-CUST-PRE                   PICTURE X(3). 
#### jkl, r1411              15  CM-CUST-NNN                   PICTURE X(5). 
#### jkl, r1411            10  CM-STATUS                       PICTURE X. 
#### jkl, r1411            10  CM-COMPANY                      PICTURE X(25). 
#### jkl, r1411            10  CM-ADDRESS-1                    PICTURE X(25). 
#### jkl, r1411            10  CM-ADDRESS-2                    PICTURE X(25). 
#### jkl, r1411            10  CM-ADDRESS-3                    PICTURE X(25). 
#### jkl, r1411            10  CM-TELEPHONE                    PICTURE 9(10). 
#### jkl, r1411            10  CM-DP-MGR                       PICTURE X(25). 
#### jkl, r1411            10  CM-MACHINE                      PICTURE X(8). 
#### jkl, r1411            10  CM-MEMORY                       PICTURE X(4). 
#### jkl, r1411            10  CM-DISK                         PICTURE X(8). 
#### jkl, r1411            10  CM-TAPE                         PICTURE X(8). 
#### jkl, r1411            10  CM-NO-TERMINALS                 PICTURE 9(5). 
#### jkl, r1411        
#### jkl, r1411        FD  TSTFILE
#### jkl, r1411            BLOCK CONTAINS 5 RECORDS.
#### jkl, r1411       
#### jkl, r1411        01  TSTFL-RECORD.
#### jkl, r1411            05  TSTFL-REC. 
#### jkl, r1411            10  TS-CUST-NUM                     PICTURE X(8). 
#### jkl, r1411            10  TS-STATUS                       PICTURE X. 
#### jkl, r1411            10  TS-COMPANY                      PICTURE X(25). 
#### jkl, r1411            10  TS-ADDRESS-1                    PICTURE X(25). 
#### jkl, r1411            10  TS-ADDRESS-2                    PICTURE X(25). 
#### jkl, r1411            10  TS-ADDRESS-3                    PICTURE X(25). 
#### jkl, r1411            10  TS-TELEPHONE                    PICTURE 9(10). 
#### jkl, r1411            10  TS-DP-MGR                       PICTURE X(25). 
#### jkl, r1411            10  TS-MACHINE                      PICTURE X(8). 
#### jkl, r1411            10  TS-MEMORY                       PICTURE X(4). 
#### jkl, r1411            10  TS-DISK                         PICTURE X(8). 
#### jkl, r1411            10  TS-TAPE                         PICTURE X(8). 
#### jkl, r1411        
#### jkl, r1411       
#### jkl, r1411        WORKING-STORAGE SECTION.
#### jkl, r1411       
#### jkl, r1411        01  CUST-STAT.
#### jkl, r1411            05  STAT-1 PICTURE 9(4) COMP SYNC.
#### jkl, r1411            05  FILLER REDEFINES STAT-1.
#### jkl, r1411                10  STAT-X1 PIC X COMP-X.
#### jkl, r1411                10  STAT-X2 PIC X COMP-X.
#### jkl, r1411        77  BYTE-1  PICTURE 9(3).
#### jkl, r1411        77  BYTE-2  PICTURE 9(3).
#### jkl, r1411        77  MAX-SUB           VALUE  16         PICTURE 9(5) COMP SYNC.
#### jkl, r1411       
#### jkl, r1411        01  TEST-DATA.
#### jkl, r1411       
#### jkl, r1411          02  DATA-CUST-NUM-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(8) VALUE "ALP00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "BET00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "GAM00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "DEL00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "EPS00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "FOR00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "GIB00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "H&J00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "INC00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "JOH00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "KON00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "LEW00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "MOR00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "NEW00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "OLD00000".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "PRE00000".
#### jkl, r1411       
#### jkl, r1411          02  DATA-CUST-NUM REDEFINES DATA-CUST-NUM-TBL
#### jkl, r1411                                        PIC X(8) OCCURS 16.
#### jkl, r1411          02  DATA-COMPANY-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(25) VALUE "ALPHA ELECTRICAL CO. LTD.".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "BETA SHOE MFG. INC.      ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "GAMMA X-RAY TECHNOLOGY   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "DELTA LUGGAGE REPAIRS    ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "EPSILON EQUIPMENT SUPPLY ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "FORTUNE COOKIE COMPANY   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "GIBRALTER LIFE INSURANCE ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "H & J PLUMBING SUPPLIES  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "INCREMENTAL BACKUP CORP. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "JOHNSON BOATING SUPPLIES ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "KONFLAB PLASTIC PRODUCTS.".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "LEWISTON GRAPHICS LTD.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "MORNINGSIDE CARPENTRY.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "NEW WAVE SURF SHOPS INC. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "OLD TYME PIZZA MFG. CO.  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "PRESTIGE OFFICE FURNITURE".
#### jkl, r1411       
#### jkl, r1411          02  DATA-COMPANY  REDEFINES DATA-COMPANY-TBL
#### jkl, r1411                                        PIC X(25) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-1-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(25) VALUE "123 MAIN STREET          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1090 2ND AVE. WEST       ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1401 JEFFERSON BLVD.     ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1620 ARIZONA WAY         ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1184 EAST FIRST STREET   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "114 JOHN F. KENNEDY AVE. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "650 LIBERTY CRESCENT     ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "77 SUNSET BLVD.          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "10908 SANTA MONICA BLVD. ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1134 PARIS ROAD          ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "808 NORTHWEST MAIN ST.   ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "9904 QUEEN STREET        ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1709 DUNDAS CRESCENT W.  ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "3240 MARIS AVENUE        ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "1705 WISCONSIN ROAD      ".
#### jkl, r1411            05  FILLER PIC X(25) VALUE "114A MAPLE GROVE         ".
#### jkl, r1411       
#### jkl, r1411          02  DATA-ADDRESS-1 REDEFINES DATA-ADDRESS-1-TBL
#### jkl, r1411                                        PIC X(25) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-2-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW YORK  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "ATLANTA   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WASHINGTON".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "TORONTO   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CALGARY   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "SAN DIEGO ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "LOS RIOS  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "MADISON   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WILBUR    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "TOPEKA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "SEATTLE   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW JERSEY".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "FORT WAYNE".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "COLUMBUS  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "RICHMOND  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WHITEPLAIN".
#### jkl, r1411       
#### jkl, r1411          02  DATA-ADDRESS-2 REDEFINES DATA-ADDRESS-2-TBL
#### jkl, r1411                                        PIC X(10) OCCURS 16.
#### jkl, r1411          02  DATA-ADDRESS-3-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.Y.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "GEORGIA   ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "D.C.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CANADA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CANADA    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "CALIFORNIA".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "NEW MEXICO".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WISCONSIN ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "DELAWARE  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "KANSAS    ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "WASHINGTON".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.J.      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "COLORADO  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "OHIO      ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "VIRGINIA  ".
#### jkl, r1411            05  FILLER PIC X(10) VALUE "N.Y.      ".
#### jkl, r1411       
#### jkl, r1411          02  DATA-ADDRESS-3 REDEFINES DATA-ADDRESS-3-TBL
#### jkl, r1411                                        PIC X(10) OCCURS 16.
#### jkl, r1411          02  DATA-TELEPHONE-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 3131234432.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4082938498.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8372487274.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 5292398745.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8009329492.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6456445643.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6546456333.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 3455445444.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6456445643.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 7456434355.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 6554456433.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 7534587453.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 8787458374.
#### jkl, r1411            05  FILLER PIC 9(10) VALUE 4169898509.
#### jkl, r1411       
#### jkl, r1411          02  DATA-TELEPHONE REDEFINES DATA-TELEPHONE-TBL
#### jkl, r1411                                        PIC 9(10) OCCURS 16.
#### jkl, r1411          02  DATA-DP-MGR-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DAVE HARRIS     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. JANICE SILCOX   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. ALLAN JONES     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. PETER MACKAY    ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MRS. DONNA BREWER   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. MICHAEL SMYTHE  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. D.A. MORRISON   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. BRIAN PATTERSON ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DARRYL TOWNSEND ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. VALERIE HARPER  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. FRED MILLER     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. DONALD FISCHER  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. STEVEN YOURDIN  ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. Goldie Hawn     ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MS. ALICE WINSTON   ".
#### jkl, r1411            05  FILLER PIC X(20) VALUE "MR. THOMAS JEFFERSON".
#### jkl, r1411       
#### jkl, r1411          02  DATA-DP-MGR    REDEFINES DATA-DP-MGR-TBL
#### jkl, r1411                                        PIC X(20) OCCURS 16.
#### jkl, r1411          02  DATA-MACHINE-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9030".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/3".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/5".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/6".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-80/8".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411            05  FILLER PIC X(8) VALUE "UNI-9040".
#### jkl, r1411       
#### jkl, r1411          02  DATA-MACHINE   REDEFINES DATA-MACHINE-TBL
#### jkl, r1411                                        PIC X(8) OCCURS 16.
#### jkl, r1411          02  DATA-NO-TERMINALS-TBL.
#### jkl, r1411       
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 85.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 34.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 75.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 45.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 90.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 107.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 67.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 32.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 16.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 34.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 128.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 64.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 110.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 324.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 124.
#### jkl, r1411            05  FILLER PIC 9(3) COMP-3 VALUE 86.
#### jkl, r1411       
#### jkl, r1411          02  DATA-NO-TERMINALS REDEFINES DATA-NO-TERMINALS-TBL
#### jkl, r1411                                        PIC 9(3) COMP-3 OCCURS 16.
#### jkl, r1411 
#### jkl, r1411        01  WORK-AREA.
#### jkl, r1411            05  REC-NUM                         PICTURE 9(6) VALUE 0.
#### jkl, r1411            05  REC-MAX                         PICTURE 9(6) VALUE 10.
#### jkl, r1411            05  SUB                             PICTURE 9(4) COMP SYNC.
#### jkl, r1411                88  ODD-RECORD                  VALUE 1 3 5 7 9 10 11.
#### jkl, r1411       
#### jkl, r1411            05  TSPFL-KEY                       PICTURE X(8).
#### jkl, r1411       
#### jkl, r1411        PROCEDURE DIVISION.
#### jkl, r1411       
#### jkl, r1411        MAINFILE.
#### jkl, r1411            OPEN OUTPUT TSPFILE 
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            OPEN I-O TSPFILE 
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "10"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on read of empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE LOW-VALUES                     TO TSPFL-RECORD.
#### jkl, r1411            START TSPFILE KEY GREATER THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "23"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "46"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " start/read of empty file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            DISPLAY "OK: Operations on empty file"
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            PERFORM LOADFILE.
#### jkl, r1411            PERFORM LISTFILE.
#### jkl, r1411            OPEN INPUT TSTFILE
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Expected ERROR " CUST-STAT 
#### jkl, r1411                        " opening TSTFILE, Record size different" 
#### jkl, r1411                        UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Un-Expected open TSTFILE, Record size different" 
#### jkl, r1411                        UPON CONSOLE
#### jkl, r1411                CLOSE TSTFILE
#### jkl, r1411            END-IF.
#### jkl, r1411            STOP RUN.
#### jkl, r1411       
#### jkl, r1411        LOADFILE.
#### jkl, r1411            DISPLAY "Loading sample data file."
#### jkl, r1411                             UPON CONSOLE.
#### jkl, r1411       
#### jkl, r1411            OPEN OUTPUT TSPFILE
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DIVIDE STAT-1 BY 256 GIVING BYTE-1 REMAINDER BYTE-2
#### jkl, r1411                DISPLAY "Error " CUST-STAT " " BYTE-1 " " BYTE-2
#### jkl, r1411                " opening 'testisam' file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411       
#### jkl, r1411            PERFORM 1000-LOAD-RECORD
#### jkl, r1411                         VARYING SUB FROM 1 BY 1 
#### jkl, r1411                           UNTIL SUB > MAX-SUB.
#### jkl, r1411       
#### jkl, r1411            DISPLAY "Sample data file load complete."
#### jkl, r1411                             UPON CONSOLE.
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411       
#### jkl, r1411       *---------------------------------------------------------------*
#### jkl, r1411       *         LOAD A RECORD FROM DATA TABLES                        *
#### jkl, r1411       *---------------------------------------------------------------*
#### jkl, r1411       
#### jkl, r1411        1000-LOAD-RECORD.
#### jkl, r1411       
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE DATA-CUST-NUM      (SUB)     TO CM-CUST-NUM.
#### jkl, r1411            MOVE CM-CUST-NUM                  TO TSPFL-KEY.
#### jkl, r1411            MOVE DATA-COMPANY       (SUB)     TO CM-COMPANY.
#### jkl, r1411            MOVE DATA-ADDRESS-1     (SUB)     TO CM-ADDRESS-1.
#### jkl, r1411            MOVE DATA-ADDRESS-2     (SUB)     TO CM-ADDRESS-2.
#### jkl, r1411            MOVE DATA-ADDRESS-3     (SUB)     TO CM-ADDRESS-3.
#### jkl, r1411            MOVE DATA-TELEPHONE     (SUB)     TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-DP-MGR        (SUB)     TO CM-DP-MGR.
#### jkl, r1411            MOVE DATA-MACHINE       (SUB)     TO CM-MACHINE.
#### jkl, r1411            MOVE DATA-NO-TERMINALS  (SUB)     TO CM-NO-TERMINALS.
#### jkl, r1411       
#### jkl, r1411            IF  ODD-RECORD
#### jkl, r1411                MOVE "8417"                   TO CM-DISK 
#### jkl, r1411                MOVE "1600 BPI"               TO CM-TAPE
#### jkl, r1411                MOVE "1MEG"                   TO CM-MEMORY
#### jkl, r1411            ELSE
#### jkl, r1411                MOVE "8470"                   TO CM-DISK
#### jkl, r1411                MOVE "6250 BPI"               TO CM-TAPE
#### jkl, r1411                MOVE "3MEG"                   TO CM-MEMORY.
#### jkl, r1411       
#### jkl, r1411            WRITE TSPFL-RECORD.
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411            AND CUST-STAT NOT = "02"
#### jkl, r1411                DISPLAY "Load - Key: " TSPFL-KEY ", Status: " CUST-STAT 
#### jkl, r1411                                  UPON CONSOLE.
#### jkl, r1411       
#### jkl, r1411        LISTFILE.
#### jkl, r1411            DISPLAY "LIST SAMPLE FILE" UPON CONSOLE.
#### jkl, r1411            OPEN INPUT TSTFILE
#### jkl, r1411            MOVE SPACES                       TO TSTFL-RECORD.
#### jkl, r1411            MOVE "PRE00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSTFILE KEY GREATER THAN OR EQUAL TO TS-CUST-NUM
#### jkl, r1411            READ  TSTFILE NEXT RECORD 
#### jkl, r1411            READ  TSTFILE NEXT RECORD 
#### jkl, r1411            CLOSE TSTFILE.
#### jkl, r1411 
#### jkl, r1411            MOVE ZERO TO REC-NUM
#### jkl, r1411            OPEN INPUT TSPFILE
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "ERROR " CUST-STAT " OPENING INPUT FILE"
#### jkl, r1411                                              UPON CONSOLE
#### jkl, r1411                IF CUST-STAT (1:1) = "9"
#### jkl, r1411                    DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
#### jkl, r1411                END-IF
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE "PRE00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSPFILE KEY GREATER THAN OR EQUAL TO CM-CUST-NUM
#### jkl, r1411            READ  TSPFILE NEXT RECORD 
#### jkl, r1411            READ  TSPFILE NEXT RECORD 
#### jkl, r1411 
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE "DEL00000" TO CM-CUST-NUM.
#### jkl, r1411            START TSPFILE KEY GREATER THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                IF CUST-STAT (1:1) = "9"
#### jkl, r1411                    DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
#### jkl, r1411                END-IF
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE NEXT RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on 1st read of file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                IF CUST-STAT (1:1) = "9"
#### jkl, r1411                    DISPLAY "Sub Error " STAT-X2 UPON CONSOLE
#### jkl, r1411                END-IF
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            PERFORM UNTIL CUST-STAT NOT = "00"
#### jkl, r1411                       OR REC-NUM > REC-MAX
#### jkl, r1411                DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411                READ TSPFILE NEXT RECORD
#### jkl, r1411                     AT END
#### jkl, r1411                         MOVE "99" TO CUST-STAT
#### jkl, r1411                 END-READ
#### jkl, r1411                 ADD 1 TO REC-NUM
#### jkl, r1411            END-PERFORM
#### jkl, r1411            IF CUST-STAT = "99"
#### jkl, r1411                DISPLAY "Hit End of File" UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411 
#### jkl, r1411            DISPLAY "LIST SAMPLE FILE DESCENDING" UPON CONSOLE.
#### jkl, r1411            MOVE ZERO TO REC-NUM
#### jkl, r1411            START TSPFILE KEY LESS THAN CM-CUST-NUM
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " starting file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            READ  TSPFILE PREVIOUS RECORD WITH NO LOCK
#### jkl, r1411            IF CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on 1st read of file"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411                STOP RUN
#### jkl, r1411            END-IF.
#### jkl, r1411            PERFORM UNTIL CUST-STAT NOT = "00"
#### jkl, r1411                       OR REC-NUM > REC-MAX
#### jkl, r1411                DISPLAY "Key: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411                READ TSPFILE PREVIOUS RECORD
#### jkl, r1411                     AT END
#### jkl, r1411                         MOVE "99" TO CUST-STAT
#### jkl, r1411                 END-READ
#### jkl, r1411                 ADD 1 TO REC-NUM
#### jkl, r1411            END-PERFORM.
#### jkl, r1411 
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 
#### jkl, r1411            OPEN I-O TSPFILE.
#### jkl, r1411            MOVE SPACES                       TO TSPFL-RECORD.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE 'X'                          TO CM-CUST-NUM (5:1).
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            IF  CUST-STAT NOT = "23"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 23."
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on primary read ."
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Got: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            READ TSPFILE NEXT RECORD
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " on next read"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Nxt: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Disk=" CM-DISK "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
#### jkl, r1411            READ TSPFILE KEY IS CM-TELEPHONE
#### jkl, r1411            IF  CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 23"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "Ky2: " CM-CUST-NUM " is " CM-COMPANY
#### jkl, r1411                         " Mach=" CM-MACHINE "."
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            WRITE TSPFL-RECORD 
#### jkl, r1411            IF  CUST-STAT NOT = "22"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 22"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "  Write: " CM-CUST-NUM " got 22 as expected"
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            DISPLAY "   Read: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected "
#### jkl, r1411                          CM-NO-TERMINALS " terminals"
#### jkl, r1411                          UPON CONSOLE.
#### jkl, r1411            ADD 5 TO CM-NO-TERMINALS
#### jkl, r1411            REWRITE TSPFL-RECORD 
#### jkl, r1411            IF  CUST-STAT NOT = "02"
#### jkl, r1411            AND CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 02"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected "
#### jkl, r1411                          CM-NO-TERMINALS " terminals"
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (2)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (2)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            DISPLAY "   Read: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected "
#### jkl, r1411                          CM-NO-TERMINALS " terminals"
#### jkl, r1411                          UPON CONSOLE.
#### jkl, r1411            MOVE DATA-CUST-NUM      (3)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (3)       TO CM-COMPANY.
#### jkl, r1411            REWRITE TSPFL-RECORD 
#### jkl, r1411            IF  CUST-STAT NOT = "02"
#### jkl, r1411            AND CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 02"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected"
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            MOVE DATA-CUST-NUM      (6)       TO CM-CUST-NUM.
#### jkl, r1411            MOVE DATA-COMPANY       (6)       TO CM-COMPANY.
#### jkl, r1411            READ TSPFILE KEY IS CM-CUST-NUM
#### jkl, r1411            MOVE DATA-TELEPHONE     (7)       TO CM-TELEPHONE.
#### jkl, r1411            MOVE DATA-MACHINE       (7)       TO CM-MACHINE.
#### jkl, r1411            REWRITE TSPFL-RECORD 
#### jkl, r1411            IF  CUST-STAT NOT = "02"
#### jkl, r1411            AND CUST-STAT NOT = "00"
#### jkl, r1411                DISPLAY "Error " CUST-STAT " instead of 02"
#### jkl, r1411                                 UPON CONSOLE
#### jkl, r1411            ELSE
#### jkl, r1411                DISPLAY "ReWrite: " CM-CUST-NUM " got "
#### jkl, r1411                          CUST-STAT " as expected"
#### jkl, r1411                          UPON CONSOLE
#### jkl, r1411            END-IF.
#### jkl, r1411            CLOSE TSPFILE.
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([$COMPILE -ftraceall prog.cob ], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([export COB_TRACE_FILE=trace.txt
#### jkl, r1411 export COB_TRACE_IO=Y
#### jkl, r1411 export COB_SET_TRACE=Y
#### jkl, r1411 export COB_TRACE_FORMAT=%L%S
#### jkl, r1411 export IO_TSPFILE=trace
#### jkl, r1411 export IO_TSTFILE=no-trace
#### jkl, r1411 ./prog], [0], [OK: Operations on empty file
#### jkl, r1411 Loading sample data file.
#### jkl, r1411 Sample data file load complete.
#### jkl, r1411 LIST SAMPLE FILE
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 LIST SAMPLE FILE DESCENDING
#### jkl, r1411 Key: NEW00000 is NEW WAVE SURF SHOPS INC.  Disk=8470    .
#### jkl, r1411 Key: MOR00000 is MORNINGSIDE CARPENTRY.    Disk=8470    .
#### jkl, r1411 Key: LEW00000 is LEWISTON GRAPHICS LTD.    Disk=8470    .
#### jkl, r1411 Key: KON00000 is KONFLAB PLASTIC PRODUCTS. Disk=8417    .
#### jkl, r1411 Key: JOH00000 is JOHNSON BOATING SUPPLIES  Disk=8417    .
#### jkl, r1411 Key: INC00000 is INCREMENTAL BACKUP CORP.  Disk=8417    .
#### jkl, r1411 Key: H&J00000 is H & J PLUMBING SUPPLIES   Disk=8470    .
#### jkl, r1411 Key: GIB00000 is GIBRALTER LIFE INSURANCE  Disk=8417    .
#### jkl, r1411 Key: GAM00000 is GAMMA X-RAY TECHNOLOGY    Disk=8417    .
#### jkl, r1411 Key: FOR00000 is FORTUNE COOKIE COMPANY    Disk=8470    .
#### jkl, r1411 Key: EPS00000 is EPSILON EQUIPMENT SUPPLY  Disk=8417    .
#### jkl, r1411 Got: BET00000 is BETA SHOE MFG. INC.       Disk=8470    .
#### jkl, r1411 Nxt: DEL00000 is DELTA LUGGAGE REPAIRS     Disk=8470    .
#### jkl, r1411 Ky2: GIB00000 is GIBRALTER LIFE INSURANCE  Mach=UNI-80/6.
#### jkl, r1411   Write: GIB00000 got 22 as expected
#### jkl, r1411    Read: GAM00000 got 00 as expected 00075 terminals
#### jkl, r1411 ReWrite: GAM00000 got 00 as expected 00080 terminals
#### jkl, r1411    Read: BET00000 got 00 as expected 00034 terminals
#### jkl, r1411 ReWrite: GAM00000 got 02 as expected
#### jkl, r1411 ReWrite: FOR00000 got 02 as expected
#### jkl, r1411 Expected ERROR 39 opening TSTFILE, Record size different
#### jkl, r1411 ], [])
#### jkl, r1411 
#### jkl, r1411 
#### jkl, r1411 AT_CAPTURE_FILE(./trace.txt)
#### jkl, r1411 
#### jkl, r1411 AT_DATA([reference], [Source: 'prog.cob'
#### jkl, r1411 Program-Id: prog            
#### jkl, r1411  Line:    281     Entry: prog                            
#### jkl, r1411  Line:    281 Paragraph: MAINFILE                        
#### jkl, r1411  Line:    282             OPEN                           
#### jkl, r1411             OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411  Line:    283             CLOSE                          
#### jkl, r1411             CLOSE TSPFILE Status: 00
#### jkl, r1411  Line:    285             OPEN                           
#### jkl, r1411             OPEN I_O TSPFILE -> 'testisam' Status: 00
#### jkl, r1411  Line:    286             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 10
#### jkl, r1411  Line:    287             IF                             
#### jkl, r1411  Line:    292             MOVE                           
#### jkl, r1411  Line:    293             START                          
#### jkl, r1411             START TSPFILE Status: 23
#### jkl, r1411             Key : ALL LOW-VALUES
#### jkl, r1411  Line:    294             IF                             
#### jkl, r1411  Line:    299             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 46
#### jkl, r1411  Line:    300             IF                             
#### jkl, r1411  Line:    305             DISPLAY                        
#### jkl, r1411  Line:    306             CLOSE                          
#### jkl, r1411             CLOSE TSPFILE Status: 00
#### jkl, r1411  Line:    308             PERFORM                        
#### jkl, r1411  Line:    322 Paragraph: LOADFILE                        
#### jkl, r1411  Line:    323             DISPLAY                        
#### jkl, r1411  Line:    326             OPEN                           
#### jkl, r1411             OPEN OUTPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411  Line:    327             IF                             
#### jkl, r1411  Line:    335             PERFORM                        
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 00
#### jkl, r1411          Record : 'ALP00000 ALPHA ELECTRICAL CO. LTD.123 MAIN STREET          NEW YORK             '
#### jkl, r1411                   '    N.Y.                     3131234432MR. DAVE HARRIS          UNI-90301MEG8417'
#### jkl, r1411                   '    1600 BPI00085'
#### jkl, r1411             Key : 'ALP00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 00
#### jkl, r1411          Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411                   '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00034'
#### jkl, r1411             Key : 'BET00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411                   '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411                   '    1600 BPI00075'
#### jkl, r1411             Key : 'GAM00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411                   '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411                   '    6250 BPI00045'
#### jkl, r1411             Key : 'DEL00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411                   '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00090'
#### jkl, r1411             Key : 'EPS00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411                   '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411                   '    6250 BPI00107'
#### jkl, r1411             Key : 'FOR00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411                   '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00067'
#### jkl, r1411             Key : 'GIB00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411                   '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00032'
#### jkl, r1411             Key : 'H&J00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411                   '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00016'
#### jkl, r1411             Key : 'INC00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411                   '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00034'
#### jkl, r1411             Key : 'JOH00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    362             MOVE                           
#### jkl, r1411  Line:    363             MOVE                           
#### jkl, r1411  Line:    364             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411                   '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00128'
#### jkl, r1411             Key : 'KON00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411                   '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00064'
#### jkl, r1411             Key : 'LEW00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411                   '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00110'
#### jkl, r1411             Key : 'MOR00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411                   '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00324'
#### jkl, r1411             Key : 'NEW00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#### jkl, r1411                   '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00124'
#### jkl, r1411             Key : 'OLD00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    347 Paragraph: 1000-LOAD-RECORD                
#### jkl, r1411  Line:    349             MOVE                           
#### jkl, r1411  Line:    350             MOVE                           
#### jkl, r1411  Line:    351             MOVE                           
#### jkl, r1411  Line:    352             MOVE                           
#### jkl, r1411  Line:    353             MOVE                           
#### jkl, r1411  Line:    354             MOVE                           
#### jkl, r1411  Line:    355             MOVE                           
#### jkl, r1411  Line:    356             MOVE                           
#### jkl, r1411  Line:    357             MOVE                           
#### jkl, r1411  Line:    358             MOVE                           
#### jkl, r1411  Line:    359             MOVE                           
#### jkl, r1411  Line:    361             IF                             
#### jkl, r1411  Line:    366             MOVE                           
#### jkl, r1411  Line:    367             MOVE                           
#### jkl, r1411  Line:    368             MOVE                           
#### jkl, r1411  Line:    370             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#### jkl, r1411                   '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00086'
#### jkl, r1411             Key : 'PRE00000'
#### jkl, r1411  Line:    371             IF                             
#### jkl, r1411  Line:    339             DISPLAY                        
#### jkl, r1411  Line:    341             CLOSE                          
#### jkl, r1411             CLOSE TSPFILE Status: 00
#### jkl, r1411  Line:    309             PERFORM                        
#### jkl, r1411  Line:    376 Paragraph: LISTFILE                        
#### jkl, r1411  Line:    377             DISPLAY                        
#### jkl, r1411  Line:    378             OPEN                           
#### jkl, r1411  Line:    379             MOVE                           
#### jkl, r1411  Line:    380             MOVE                           
#### jkl, r1411  Line:    381             START                          
#### jkl, r1411  Line:    382             READ                           
#### jkl, r1411  Line:    383             READ                           
#### jkl, r1411  Line:    384             CLOSE                          
#### jkl, r1411  Line:    386             MOVE                           
#### jkl, r1411  Line:    387             OPEN                           
#### jkl, r1411             OPEN INPUT TSPFILE -> 'testisam' Status: 00
#### jkl, r1411  Line:    388             IF                             
#### jkl, r1411  Line:    396             MOVE                           
#### jkl, r1411  Line:    397             MOVE                           
#### jkl, r1411  Line:    398             START                          
#### jkl, r1411             START TSPFILE Status: 00
#### jkl, r1411             Key : 'PRE00000'
#### jkl, r1411  Line:    399             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'PRE00000 PRESTIGE OFFICE FURNITURE114A MAPLE GROVE         WHITEPLAIN           '
#### jkl, r1411                   '    N.Y.                     4169898509MR. THOMAS JEFFERSON     UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00086'
#### jkl, r1411  Line:    400             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 10
#### jkl, r1411  Line:    402             MOVE                           
#### jkl, r1411  Line:    403             MOVE                           
#### jkl, r1411  Line:    404             START                          
#### jkl, r1411             START TSPFILE Status: 00
#### jkl, r1411             Key : 'DEL00000'
#### jkl, r1411  Line:    405             IF                             
#### jkl, r1411  Line:    413             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411                   '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00090'
#### jkl, r1411  Line:    414             IF                             
#### jkl, r1411  Line:    422             PERFORM                        
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411                   '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411                   '    6250 BPI00107'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411                   '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411                   '    1600 BPI00075'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411                   '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00067'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411                   '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00032'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411                   '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00016'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411                   '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00034'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411                   '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00128'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411                   '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00064'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411                   '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00110'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411                   '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00324'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    424             DISPLAY                        
#### jkl, r1411  Line:    427             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'OLD00000 OLD TYME PIZZA MFG. CO.  1705 WISCONSIN ROAD      RICHMOND             '
#### jkl, r1411                   '    VIRGINIA                 8787458374MS. ALICE WINSTON        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00124'
#### jkl, r1411  Line:    431             ADD                            
#### jkl, r1411  Line:    433             IF                             
#### jkl, r1411  Line:    437             DISPLAY                        
#### jkl, r1411  Line:    438             MOVE                           
#### jkl, r1411  Line:    439             START                          
#### jkl, r1411             START TSPFILE Status: 00
#### jkl, r1411             Key : 'OLD00000'
#### jkl, r1411  Line:    440             IF                             
#### jkl, r1411  Line:    445             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'NEW00000 NEW WAVE SURF SHOPS INC. 3240 MARIS AVENUE        COLUMBUS             '
#### jkl, r1411                   '    OHIO                     7534587453MS. Goldie Hawn          UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00324'
#### jkl, r1411  Line:    446             IF                             
#### jkl, r1411  Line:    451             PERFORM                        
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'MOR00000 MORNINGSIDE CARPENTRY.   1709 DUNDAS CRESCENT W.  FORT WAYNE           '
#### jkl, r1411                   '    COLORADO                 4169898509MR. STEVEN YOURDIN       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00110'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'LEW00000 LEWISTON GRAPHICS LTD.   9904 QUEEN STREET        NEW JERSEY           '
#### jkl, r1411                   '    N.J.                     6554456433MR. DONALD FISCHER       UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00064'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'KON00000 KONFLAB PLASTIC PRODUCTS.808 NORTHWEST MAIN ST.   SEATTLE              '
#### jkl, r1411                   '    WASHINGTON               7456434355MR. FRED MILLER          UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00128'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'JOH00000 JOHNSON BOATING SUPPLIES 1134 PARIS ROAD          TOPEKA               '
#### jkl, r1411                   '    KANSAS                   6456445643MS. VALERIE HARPER       UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00034'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'INC00000 INCREMENTAL BACKUP CORP. 10908 SANTA MONICA BLVD. WILBUR               '
#### jkl, r1411                   '    DELAWARE                 3455445444MR. DARRYL TOWNSEND      UNI-80/81MEG8417'
#### jkl, r1411                   '    1600 BPI00016'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'H&J00000 H & J PLUMBING SUPPLIES  77 SUNSET BLVD.          MADISON              '
#### jkl, r1411                   '    WISCONSIN                6546456333MR. BRIAN PATTERSON      UNI-80/83MEG8470'
#### jkl, r1411                   '    6250 BPI00032'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411                   '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00067'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411                   '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411                   '    1600 BPI00075'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411                   '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411                   '    6250 BPI00107'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'EPS00000 EPSILON EQUIPMENT SUPPLY 1184 EAST FIRST STREET   CALGARY              '
#### jkl, r1411                   '    CANADA                   5292398745MRS. DONNA BREWER        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00090'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    453             DISPLAY                        
#### jkl, r1411  Line:    456             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411                   '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411                   '    6250 BPI00045'
#### jkl, r1411  Line:    460             ADD                            
#### jkl, r1411  Line:    463             CLOSE                          
#### jkl, r1411             CLOSE TSPFILE Status: 00
#### jkl, r1411  Line:    465             OPEN                           
#### jkl, r1411             OPEN I_O TSPFILE -> 'testisam' Status: 00
#### jkl, r1411  Line:    466             MOVE                           
#### jkl, r1411  Line:    467             MOVE                           
#### jkl, r1411  Line:    468             MOVE                           
#### jkl, r1411  Line:    469             READ                           
#### jkl, r1411             READ TSPFILE Status: 23
#### jkl, r1411             Key : 'BET0X000'
#### jkl, r1411  Line:    470             IF                             
#### jkl, r1411  Line:    474             MOVE                           
#### jkl, r1411  Line:    475             MOVE                           
#### jkl, r1411  Line:    476             READ                           
#### jkl, r1411             READ TSPFILE Status: 00
#### jkl, r1411          Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411                   '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00034'
#### jkl, r1411             Key : 'BET00000'
#### jkl, r1411  Line:    477             IF                             
#### jkl, r1411  Line:    481             DISPLAY                        
#### jkl, r1411  Line:    485             READ                           
#### jkl, r1411             READ Sequential TSPFILE Status: 00
#### jkl, r1411          Record : 'DEL00000 DELTA LUGGAGE REPAIRS    1620 ARIZONA WAY         TORONTO              '
#### jkl, r1411                   '    CANADA                   4169898509MR. PETER MACKAY         UNI-80/53MEG8470'
#### jkl, r1411                   '    6250 BPI00045'
#### jkl, r1411  Line:    486             IF                             
#### jkl, r1411  Line:    490             DISPLAY                        
#### jkl, r1411  Line:    494             MOVE                           
#### jkl, r1411  Line:    495             MOVE                           
#### jkl, r1411  Line:    496             READ                           
#### jkl, r1411             READ TSPFILE Status: 00
#### jkl, r1411          Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411                   '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00067'
#### jkl, r1411             Key :  6456445643
#### jkl, r1411  Line:    497             IF                             
#### jkl, r1411  Line:    501             DISPLAY                        
#### jkl, r1411  Line:    505             WRITE                          
#### jkl, r1411             WRITE TSPFILE Status: 22
#### jkl, r1411          Record : 'GIB00000 GIBRALTER LIFE INSURANCE 650 LIBERTY CRESCENT     LOS RIOS             '
#### jkl, r1411                   '    NEW MEXICO               6456445643MR. D.A. MORRISON        UNI-80/61MEG8417'
#### jkl, r1411                   '    1600 BPI00067'
#### jkl, r1411             Key :  6456445643
#### jkl, r1411  Line:    506             IF                             
#### jkl, r1411  Line:    510             DISPLAY                        
#### jkl, r1411  Line:    513             MOVE                           
#### jkl, r1411  Line:    514             MOVE                           
#### jkl, r1411  Line:    515             READ                           
#### jkl, r1411             READ TSPFILE Status: 00
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411                   '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411                   '    1600 BPI00075'
#### jkl, r1411             Key : 'GAM00000'
#### jkl, r1411  Line:    516             DISPLAY                        
#### jkl, r1411  Line:    520             ADD                            
#### jkl, r1411  Line:    521             REWRITE                        
#### jkl, r1411             REWRITE TSPFILE Status: 00
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1401 JEFFERSON BLVD.     WASHINGTON           '
#### jkl, r1411                   '    D.C.                     8372487274MR. ALLAN JONES          UNI-80/31MEG8417'
#### jkl, r1411                   '    1600 BPI00080'
#### jkl, r1411             Key : 'GAM00000'
#### jkl, r1411  Line:    522             IF                             
#### jkl, r1411  Line:    527             DISPLAY                        
#### jkl, r1411  Line:    532             MOVE                           
#### jkl, r1411  Line:    533             MOVE                           
#### jkl, r1411  Line:    534             READ                           
#### jkl, r1411             READ TSPFILE Status: 00
#### jkl, r1411          Record : 'BET00000 BETA SHOE MFG. INC.      1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411                   '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00034'
#### jkl, r1411             Key : 'BET00000'
#### jkl, r1411  Line:    535             DISPLAY                        
#### jkl, r1411  Line:    539             MOVE                           
#### jkl, r1411  Line:    540             MOVE                           
#### jkl, r1411  Line:    541             REWRITE                        
#### jkl, r1411             REWRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'GAM00000 GAMMA X-RAY TECHNOLOGY   1090 2ND AVE. WEST       ATLANTA              '
#### jkl, r1411                   '    GEORGIA                  4082938498MS. JANICE SILCOX        UNI-90403MEG8470'
#### jkl, r1411                   '    6250 BPI00034'
#### jkl, r1411             Key : 'GAM00000'
#### jkl, r1411  Line:    542             IF                             
#### jkl, r1411  Line:    547             DISPLAY                        
#### jkl, r1411  Line:    551             MOVE                           
#### jkl, r1411  Line:    552             MOVE                           
#### jkl, r1411  Line:    553             READ                           
#### jkl, r1411             READ TSPFILE Status: 00
#### jkl, r1411          Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411                   '    CALIFORNIA               8009329492MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411                   '    6250 BPI00107'
#### jkl, r1411             Key : 'FOR00000'
#### jkl, r1411  Line:    554             MOVE                           
#### jkl, r1411  Line:    555             MOVE                           
#### jkl, r1411  Line:    556             REWRITE                        
#### jkl, r1411             REWRITE TSPFILE Status: 02
#### jkl, r1411          Record : 'FOR00000 FORTUNE COOKIE COMPANY   114 JOHN F. KENNEDY AVE. SAN DIEGO            '
#### jkl, r1411                   '    CALIFORNIA               6456445643MR. MICHAEL SMYTHE       UNI-80/63MEG8470'
#### jkl, r1411                   '    6250 BPI00107'
#### jkl, r1411             Key : 'FOR00000'
#### jkl, r1411  Line:    557             IF                             
#### jkl, r1411  Line:    562             DISPLAY                        
#### jkl, r1411  Line:    566             CLOSE                          
#### jkl, r1411             CLOSE TSPFILE Status: 00
#### jkl, r1411  Line:    310             OPEN                           
#### jkl, r1411  Line:    311             IF                             
#### jkl, r1411  Line:    312             DISPLAY                        
#### jkl, r1411  Line:    320             STOP RUN                       
#### jkl, r1411 ])
#### jkl, r1411 
#### jkl, r1411 AT_CHECK([gcdiff reference trace.txt], [0], [], [])
#### jkl, r1411 
#### jkl, r1411 AT_CLEANUP
#### jkl, r1411 
#### jkl, r1411

#### jkl: added for 1547:

AT_SETUP([Test COBOL-C interface])
AT_KEYWORDS([CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  SUB-NAME PIC X(10) VALUE "SUB2".
       01  FLT9  USAGE COMP-1 VALUE 9.0.
       01  NUMPI PIC 9(6) VALUE 314.
       01  NUM5  PIC 9(5) VALUE 12345.
       01  NUM9  PIC 9(7)V99 VALUE 1234567.88.
       01  NUMED PIC Z(5)9.99CR.
       PROCEDURE DIVISION.
           CALL "SUB" USING BY VALUE 1, 
                            BY REFERENCE "Fun and games for you".
           CALL "SUB" USING BY VALUE 2, 
                            BY REFERENCE "More Fun and games for all".
           CALL "SUB2"   USING "Fun and games", BY VALUE 3.
           CALL SUB-NAME USING "More Fun and games ....", BY VALUE 4.
           CALL "SUB3" .
           CALL "COBCSUB" USING BY VALUE 6, 
                            BY REFERENCE "Hi to C Code...".
           CALL "COBCSUB" USING BY VALUE NUMPI, 
                            BY REFERENCE "Pass PI to C...".
           CALL "COBCSUB" USING BY VALUE NUM9, 
                            BY REFERENCE "Pass V99 to C...".
           CALL "CSUB4" USING FLT9, "Hi from COBOL!.".
           ADD 1.4 TO FLT9.
           CALL "CSUB5" USING FLT9, "Called from COBOL instead of C!.".
           CALL "SUB6" USING NUM5.
           CALL "SUB6" USING NUM9.
           CALL "SUB6" USING NUMPI.
           CALL "SUB6" USING FLT9.
           CALL "SUB6" USING "31415926".
           MOVE 10.50 TO NUMED.
           CALL "SUB6" USING NUMED.
           MOVE -4510.66 TO NUMED.
           CALL "SUB6" USING NUMED.
           STOP RUN.
           END PROGRAM prog.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SUB.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  xn PIC 9(8) BINARY VALUE 99.
       01  xx PIC X(13) VALUE '"x" was NULL!'.
       01  yy PIC X(8)  VALUE "Garbage!".
       LINKAGE SECTION.
       01  n PIC 9(8).
       01  x PIC X ANY LENGTH.
       01  y PIC X ANY LENGTH.
       01  z PIC X ANY LENGTH.
       01  num PIC 9 ANY NUMERIC.
       01  cn PIC 9(9) COMP-5.
       01  flt1 USAGE COMP-1.
       01  cx PIC X(15).
       PROCEDURE DIVISION USING BY VALUE n, x, BY REFERENCE y.
           DISPLAY n " '" x "'".
           EXIT PROGRAM.
       ENTRY "SUB2" USING z, BY VALUE n.
           DISPLAY n " '" z "' via SUB2".
           EXIT PROGRAM.
       ENTRY "SUB3".
           IF ADDRESS OF n = NULL
              SET ADDRESS OF n TO ADDRESS OF xn.
           IF ADDRESS OF x = NULL
              SET ADDRESS OF x TO ADDRESS OF xx.
           DISPLAY n " '" x "' via SUB3".
           EXIT PROGRAM.
       ENTRY "CSUB4" USING BY VALUE cn, BY REFERENCE cx.
           DISPLAY cn " '" cx "' via CSUB4".
           EXIT PROGRAM.
       ENTRY "CSUB5" USING BY VALUE cn, BY REFERENCE z.
           DISPLAY cn " '" z "' via CSUB5".
           EXIT PROGRAM.
       ENTRY "SUB6" USING num.
           DISPLAY 'ANY NUMERIC is ' num ' Length ' LENGTH OF num.
           EXIT PROGRAM.
       ENTRY "CSUB7" USING VALUE flt1.
           DISPLAY 'Float value is ' flt1 ' via CSUB7'.
           EXIT PROGRAM.
       ENTRY "CSUB8" USING flt1.
           DISPLAY 'Float reference is ' flt1 ' via CSUB8'.
           EXIT PROGRAM.
       END PROGRAM SUB.
])

AT_DATA([cmod.c], [[
#include <stdio.h>
#include <stdio.h>
extern int CSUB4();
extern int CSUB5();
extern int SUB6();
extern int CSUB7(float f);
extern int CSUB8(float *f);
int
COBCSUB(int y, unsigned char x[15])
{
   float flt1;
   printf("C routine passed: Y is %d; X is '%.15s'\n",y,x);
   CSUB4(y, x);
   CSUB4(y+1, "A C-String is being passed");
   CSUB5(y+2, "A much longer C-String is being passed");
   SUB6("314159265358");
   SUB6("31415926");
   SUB6("000314");
   flt1 = 3.1415926;
   CSUB7(flt1);
   flt1 = 2.71828;
   CSUB8(&flt1);
   return 0;
}                           

]])

AT_CHECK([cobc -x -std=ibm -debug -Wall prog.cob cmod.c], [0], [], [])

AT_CHECK([./prog], [0], [00000001 'Fun and games for you'
00000002 'More Fun and games for all'
00000003 'Fun and games' via SUB2
00000004 'More Fun and games ....' via SUB2
00000004 'More Fun and games for all' via SUB3
C routine passed: Y is 6; X is 'Hi to C Code...'
0000000006 'Hi to C Code...' via CSUB4
0000000007 'A C-String is b' via CSUB4
0000000008 'A much longer C-String is being passed' via CSUB5
ANY NUMERIC is 314159265358 Length 0000000012
ANY NUMERIC is 31415926 Length 0000000008
ANY NUMERIC is 000314 Length 0000000006
Float value is 3.1415925 via CSUB7
Float reference is 2.7182801 via CSUB8
C routine passed: Y is 314; X is 'Pass PI to C...'
0000000314 'Pass PI to C...' via CSUB4
0000000315 'A C-String is b' via CSUB4
0000000316 'A much longer C-String is being passed' via CSUB5
ANY NUMERIC is 314159265358 Length 0000000012
ANY NUMERIC is 31415926 Length 0000000008
ANY NUMERIC is 000314 Length 0000000006
Float value is 3.1415925 via CSUB7
Float reference is 2.7182801 via CSUB8
C routine passed: Y is 1234567; X is 'Pass V99 to C..'
0001234567 'Pass V99 to C..' via CSUB4
0001234568 'A C-String is b' via CSUB4
0001234569 'A much longer C-String is being passed' via CSUB5
ANY NUMERIC is 314159265358 Length 0000000012
ANY NUMERIC is 31415926 Length 0000000008
ANY NUMERIC is 000314 Length 0000000006
Float value is 3.1415925 via CSUB7
Float reference is 2.7182801 via CSUB8
0000000009 'Hi from COBOL!.' via CSUB4
0000000010 'Called from COBOL instead of C!.' via CSUB5
ANY NUMERIC is 12345 Length 0000000005
ANY NUMERIC is 123456788 Length 0000000009
ANY NUMERIC is 000314 Length 0000000006
ANY NUMERIC is 10.4 Length 0000000004
ANY NUMERIC is 31415926 Length 0000000008
ANY NUMERIC is     10.50   Length 0000000011
ANY NUMERIC is   4510.66CR Length 0000000011
], [])

AT_CLEANUP

#### reportwriter r1727
AT_SETUP([COBOL2002 SYNC])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA  DIVISION.
       FILE SECTION.
      
       WORKING-STORAGE SECTION.
      
       77  VLEN                   PIC 99 VALUE 1.
       01  TSTREC1.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD1          PICTURE S9(2) COMP-4. 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC2.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD2          PICTURE S9(4) COMP-4 SYNC . 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC3.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD3          PICTURE S9(6) COMP-4 SYNC. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECL.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDL          PICTURE S9(2) COMP-4 SYNC LEFT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECR.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDR          PICTURE S9(2) COMP-4 SYNC RIGHT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECS.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDS      PICTURE S9(4) COMP-4 SYNC . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTRECO.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDO      PICTURE S9(4) COMP-4 . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTGRP SYNC COMP-4.
         05  GRP1.
           10  FILLER             PICTURE X(5). 
           10  COM1-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD3          PICTURE S9(18). 

       01  TSTGRP2 SIGN LEADING SEPARATE.
         05  GRP2-1.
           10  FILLER             PICTURE X(5). 
           10  COM2-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD2          PICTURE S9(6) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD3          PICTURE S9(7). 

       01  TSTGRP3 COMP-3.
         05  GRP3-1.
           10  FILLER             PICTURE X(5). 
      * Following is not allowed by Micro Focus
      *    10  COM3-FLD1          PICTURE S9(4) COMP-4. 
           10  COM3-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM3-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
         05  GRP3-2.
           10  COM3-FLD3          PICTURE S9(13). 

       01  TSTGRP4 COMP-4.
         05  GRP4-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD2          PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 
         05  GRP4-2.
           10  COM4-FLD3          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD4          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5 COMP-4.
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5S COMP-4 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD1         PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD2         PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP6 COMP-3.
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP7 COMP-1.
           10  COM7-FLD1          .
           10  COM7-FLD2          .

       01  TSTGRP8 COMP-2.
           10  COM8-FLD1          .
           10  COM8-FLD2          .

       01  TSTGRP9.
         05  GRP9-1 SIGN LEADING SEPARATE.
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD1          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD2          PICTURE S9(2) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(1). 
         05  GRP9-2 SIGN TRAILING SEPARATE.
           10  COM9-FLD3          PICTURE S9(2) SIGN LEADING SEPARATE. 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD4          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRPX.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD1          PICTURE X(3) COMP-X SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD2          PICTURE X(7) COMP-X.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLT           COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-DBL           COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BSHORT.
           10  FILLER             PICTURE X(1). 
           10  COMS-FLD1          BINARY-SHORT.
           10  FILLER             PICTURE X(2). 
           10  COMS-FLD2          BINARY-SHORT SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BLONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD1          BINARY-LONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD2          BINARY-LONG SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BDBL.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD1          BINARY-DOUBLE.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD2          BINARY-DOUBLE UNSIGNED SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD1          PIC 9(18) COMP-5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD2          PIC 9(18) COMP-5 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD1          COMP-1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD2          COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD1          COMP-2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD2          COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       PROCEDURE DIVISION.

           MOVE ALL "x"    TO TSTREC1.
           MOVE LENGTH OF COMP-FLD1 TO VLEN.
           MOVE "11"       TO COMP-FLD1 (1:VLEN).
           IF VLEN = 1
               DISPLAY "NOIBMCOMP: " TSTREC1
           ELSE
               DISPLAY "IBMCOMP  : " TSTREC1.
           MOVE ALL "x"    TO TSTREC2.
           MOVE LENGTH OF COMP-FLD2 TO VLEN.
           MOVE "22"       TO COMP-FLD2 (1:VLEN).
           DISPLAY "      " VLEN " : " TSTREC2.
           MOVE ALL "x"    TO TSTRECO.
           MOVE '----:'    TO TSTRECO (1:5).
           MOVE "11"       TO COMP-FLDO (1) (1:2)
           MOVE "22"       TO COMP-FLDO (2) (1:2)
           MOVE "33"       TO COMP-FLDO (3) (1:2)
           MOVE LENGTH OF COMP-FLDO (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECO.
           MOVE ALL "x"    TO TSTRECS.
           MOVE '----:'    TO TSTRECS (1:5).
           MOVE "11"       TO COMP-FLDS (1) (1:2)
           MOVE "22"       TO COMP-FLDS (2) (1:2)
           MOVE "33"       TO COMP-FLDS (3) (1:2)
           MOVE LENGTH OF COMP-FLDS (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECS.
           MOVE ALL "x"    TO TSTREC3.
           MOVE LENGTH OF COMP-FLD3 TO VLEN.
           MOVE "1234678"  TO TSTREC3 (6:VLEN).
           DISPLAY "      " VLEN " : " TSTREC3.
           MOVE ALL "x"    TO TSTRECL.
           MOVE LENGTH OF COMP-FLDL TO VLEN.
           MOVE "12345678" TO TSTRECL (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECL.
           MOVE ALL "x"    TO TSTRECR.
           MOVE LENGTH OF COMP-FLDR TO VLEN.
           MOVE "12345678" TO TSTRECR (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECR.
           MOVE ALL "x"    TO TSTGRP.
           MOVE "12345678" TO COM1-FLD1 (1:).
           MOVE "12345678" TO COM1-FLD2 (1:).
           MOVE "12345678" TO COM1-FLD3 (1:).
           MOVE LENGTH OF COM1-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP.
           MOVE ALL "x"    TO TSTGRP2.
           MOVE "12345678" TO COM2-FLD1 (1:).
           MOVE "12345678" TO COM2-FLD2 (1:).
           MOVE "12345678" TO COM2-FLD3 (1:).
           MOVE LENGTH OF COM2-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP2.
           MOVE ALL "x"    TO TSTGRP3.
           MOVE "12345678" TO COM3-FLD1 (1:).
           MOVE "12345678" TO COM3-FLD2 (1:).
           MOVE "12345678" TO COM3-FLD3 (1:).
           MOVE LENGTH OF COM3-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP3.
           MOVE ALL "x"    TO TSTGRP4.
           MOVE "12345678" TO COM4-FLD1 (1:).
           MOVE "12345678" TO COM4-FLD2 (1:).
           MOVE "12345678" TO COM4-FLD3 (1:).
           MOVE "12345678" TO COM4-FLD4 (1:).
           MOVE LENGTH OF COM4-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP4.
           MOVE ALL "x"    TO TSTGRP5.
           MOVE "12345678" TO COM5-FLD1 (1:).
           MOVE "12345678" TO COM5-FLD2 (1:).
           DISPLAY "NOSYNC   : " TSTGRP5.
           MOVE ALL "x"    TO TSTGRP5S.
           MOVE "12345678" TO COM5S-FLD1 (1:).
           MOVE "12345678" TO COM5S-FLD2 (1:).
           DISPLAY "SYNC     : " TSTGRP5S.
           MOVE ALL "x"    TO TSTGRP6.
           MOVE "12345678" TO COM6-FLD1 (1:).
           MOVE "12345678" TO COM6-FLD2 (1:).
           DISPLAY "COMP-3   : " TSTGRP6.
           MOVE ALL "x"    TO TSTGRP7.
           MOVE "12345678" TO COM7-FLD1 (1:).
           MOVE "12345678" TO COM7-FLD2 (1:).
           DISPLAY "COMP-1   : " TSTGRP7.
           MOVE ALL "x"    TO TSTGRP8.
           MOVE "12345678" TO COM8-FLD1 (1:).
           MOVE "12345678" TO COM8-FLD2 (1:).
           DISPLAY "COMP-2   : " TSTGRP8.
           MOVE ALL "x"    TO TSTGRP9.
           MOVE -1 TO COM9-FLD1 .
           MOVE -2 TO COM9-FLD2 .
           MOVE -3 TO COM9-FLD3 .
           MOVE -4 TO COM9-FLD4 .
           DISPLAY "SIGN L/T : " TSTGRP9.
           MOVE ALL "x"    TO TSTGRPX.
           MOVE "12345678" TO COMX-FLD1 (1:).
           MOVE "12345678" TO COMX-FLD2 (1:).
           MOVE "12345678" TO COMX-FLT (1:).
           MOVE "12345678" TO COMX-DBL (1:).
           DISPLAY "COMP-X   : " TSTGRPX.
           MOVE ALL "x"    TO TST-BLONG.
           MOVE "12345678" TO COML-FLD1 (1:).
           MOVE "12345678" TO COML-FLD2 (1:).
           IF COML-FLD2 = 875770417
             DISPLAY "BIN-LONG : " TST-BLONG " : Little-Endian"
           ELSE
             DISPLAY "BIN-LONG : " TST-BLONG " : Big-Endian"
           END-IF.
           MOVE ALL "x"    TO TST-BSHORT.
           MOVE "12345678" TO COMS-FLD1 (1:).
           MOVE "12345678" TO COMS-FLD2 (1:).
           DISPLAY "BIN-SHORT: " TST-BSHORT.
           MOVE ALL "x"    TO TST-BDBL.
           MOVE "12345678" TO COMD-FLD1 (1:).
           MOVE "12345678" TO COMD-FLD2 (1:).
           DISPLAY "BIN-DBL  : " TST-BDBL.
           MOVE ALL "x"    TO TST-CMP5.
           MOVE "12345678" TO CMP5-FLD1 (1:).
           MOVE "12345678" TO CMP5-FLD2 (1:).
           DISPLAY "COMP-5   : " TST-CMP5.
           MOVE ALL "x"    TO TST-CMP1.
           MOVE "12345678" TO CMP1-FLD1 (1:).
           MOVE "12345678" TO CMP1-FLD2 (1:).
           DISPLAY "COMP-1   : " TST-CMP1.
           MOVE ALL "x"    TO TST-CMP2.
           MOVE "12345678" TO CMP2-FLD1 (1:).
           MOVE "12345678" TO CMP2-FLD2 (1:).
           DISPLAY "COMP-2   : " TST-CMP2.
           STOP RUN RETURNING 0.
])

AT_CHECK([cobc -x -std=cobol2002 -w prog.cob ], [0], [], [])

AT_CHECK([./prog], [0], [NOIBMCOMP: xxxxx1xxxxx
      02 : xxxxxx22xxxxx
      02 : ----:xx11xxx22xxx33xx
      02 : ----:xxx11xxxx22xxxx33xx
      04 : xxxxx1234xxxxxxxx
      01 : xxxxx1xxxxx
      01 : xxxxx1xxxxx
      04 : xxxxxx12xxxx1234xxxxxxxx12345678
      07 : xxxxx12345xxx1234567xxx12345678
      04 : xxxxx123xxx1234xxx1234567
      04 : xxxxxxxx12345678xxxx1234x12345678x1234x
NOSYNC   : x12345678x1234x
SYNC     : xxxxxxxx12345678xxxx1234x
COMP-3   : x1234567x1234x
COMP-1   : 12341234
COMP-2   : 1234567812345678
SIGN L/T : x-01x02-x-03x04-x
COMP-X   : x123x1234567xxxx1234xxxx12345678x
BIN-LONG : x1234xxx1234x : Little-Endian
BIN-SHORT: x12xxx12x
BIN-DBL  : x12345678xxxxxxx12345678x
COMP-5   : x12345678xxxxxxx12345678x
COMP-1   : x1234xxx1234x
COMP-2   : x12345678xxxxxxx12345678x
], [])

AT_CLEANUP


AT_SETUP([MF SYNC])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA  DIVISION.
       FILE SECTION.
      
       WORKING-STORAGE SECTION.
      
       77  VLEN                   PIC 99 VALUE 1.
       01  TSTREC1.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD1          PICTURE S9(2) COMP-4. 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC2.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD2          PICTURE S9(4) COMP-4 SYNC . 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC3.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD3          PICTURE S9(6) COMP-4 SYNC. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECL.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDL          PICTURE S9(2) COMP-4 SYNC LEFT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECR.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDR          PICTURE S9(2) COMP-4 SYNC RIGHT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECS.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDS      PICTURE S9(4) COMP-4 SYNC . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTRECO.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDO      PICTURE S9(4) COMP-4 . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTGRP SYNC COMP-4.
         05  GRP1.
           10  FILLER             PICTURE X(5). 
           10  COM1-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD3          PICTURE S9(18). 

       01  TSTGRP2 SIGN LEADING SEPARATE.
         05  GRP2-1.
           10  FILLER             PICTURE X(5). 
           10  COM2-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD2          PICTURE S9(6) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD3          PICTURE S9(7). 

       01  TSTGRP3 COMP-3.
         05  GRP3-1.
           10  FILLER             PICTURE X(5). 
      * Following is not allowed by Micro Focus
      *    10  COM3-FLD1          PICTURE S9(4) COMP-4. 
           10  COM3-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM3-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
         05  GRP3-2.
           10  COM3-FLD3          PICTURE S9(13). 

       01  TSTGRP4 COMP-4.
         05  GRP4-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD2          PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 
         05  GRP4-2.
           10  COM4-FLD3          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD4          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5 COMP-4.
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5S COMP-4 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD1         PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD2         PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP6 COMP-3.
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP7 COMP-1.
           10  COM7-FLD1          .
           10  COM7-FLD2          .

       01  TSTGRP8 COMP-2.
           10  COM8-FLD1          .
           10  COM8-FLD2          .

       01  TSTGRP9.
         05  GRP9-1 SIGN LEADING SEPARATE.
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD1          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD2          PICTURE S9(2) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(1). 
         05  GRP9-2 SIGN TRAILING SEPARATE.
           10  COM9-FLD3          PICTURE S9(2) SIGN LEADING SEPARATE. 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD4          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRPX.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD1          PICTURE X(3) COMP-X SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD2          PICTURE X(7) COMP-X.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLT           COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-DBL           COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BSHORT.
           10  FILLER             PICTURE X(1). 
           10  COMS-FLD1          BINARY-SHORT.
           10  FILLER             PICTURE X(2). 
           10  COMS-FLD2          BINARY-SHORT SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BLONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD1          BINARY-LONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD2          BINARY-LONG SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BDBL.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD1          BINARY-DOUBLE.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD2          BINARY-DOUBLE UNSIGNED SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD1          PIC 9(18) COMP-5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD2          PIC 9(18) COMP-5 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD1          COMP-1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD2          COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD1          COMP-2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD2          COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       PROCEDURE DIVISION.

           MOVE ALL "x"    TO TSTREC1.
           MOVE LENGTH OF COMP-FLD1 TO VLEN.
           MOVE "11"       TO COMP-FLD1 (1:VLEN).
           IF VLEN = 1
               DISPLAY "NOIBMCOMP: " TSTREC1
           ELSE
               DISPLAY "IBMCOMP  : " TSTREC1.
           MOVE ALL "x"    TO TSTREC2.
           MOVE LENGTH OF COMP-FLD2 TO VLEN.
           MOVE "22"       TO COMP-FLD2 (1:VLEN).
           DISPLAY "      " VLEN " : " TSTREC2.
           MOVE ALL "x"    TO TSTRECO.
           MOVE '----:'    TO TSTRECO (1:5).
           MOVE "11"       TO COMP-FLDO (1) (1:2)
           MOVE "22"       TO COMP-FLDO (2) (1:2)
           MOVE "33"       TO COMP-FLDO (3) (1:2)
           MOVE LENGTH OF COMP-FLDO (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECO.
           MOVE ALL "x"    TO TSTRECS.
           MOVE '----:'    TO TSTRECS (1:5).
           MOVE "11"       TO COMP-FLDS (1) (1:2)
           MOVE "22"       TO COMP-FLDS (2) (1:2)
           MOVE "33"       TO COMP-FLDS (3) (1:2)
           MOVE LENGTH OF COMP-FLDS (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECS.
           MOVE ALL "x"    TO TSTREC3.
           MOVE LENGTH OF COMP-FLD3 TO VLEN.
           MOVE "1234678"  TO TSTREC3 (6:VLEN).
           DISPLAY "      " VLEN " : " TSTREC3.
           MOVE ALL "x"    TO TSTRECL.
           MOVE LENGTH OF COMP-FLDL TO VLEN.
           MOVE "12345678" TO TSTRECL (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECL.
           MOVE ALL "x"    TO TSTRECR.
           MOVE LENGTH OF COMP-FLDR TO VLEN.
           MOVE "12345678" TO TSTRECR (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECR.
           MOVE ALL "x"    TO TSTGRP.
           MOVE "12345678" TO COM1-FLD1 (1:).
           MOVE "12345678" TO COM1-FLD2 (1:).
           MOVE "12345678" TO COM1-FLD3 (1:).
           MOVE LENGTH OF COM1-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP.
           MOVE ALL "x"    TO TSTGRP2.
           MOVE "12345678" TO COM2-FLD1 (1:).
           MOVE "12345678" TO COM2-FLD2 (1:).
           MOVE "12345678" TO COM2-FLD3 (1:).
           MOVE LENGTH OF COM2-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP2.
           MOVE ALL "x"    TO TSTGRP3.
           MOVE "12345678" TO COM3-FLD1 (1:).
           MOVE "12345678" TO COM3-FLD2 (1:).
           MOVE "12345678" TO COM3-FLD3 (1:).
           MOVE LENGTH OF COM3-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP3.
           MOVE ALL "x"    TO TSTGRP4.
           MOVE "12345678" TO COM4-FLD1 (1:).
           MOVE "12345678" TO COM4-FLD2 (1:).
           MOVE "12345678" TO COM4-FLD3 (1:).
           MOVE "12345678" TO COM4-FLD4 (1:).
           MOVE LENGTH OF COM4-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP4.
           MOVE ALL "x"    TO TSTGRP5.
           MOVE "12345678" TO COM5-FLD1 (1:).
           MOVE "12345678" TO COM5-FLD2 (1:).
           DISPLAY "NOSYNC   : " TSTGRP5.
           MOVE ALL "x"    TO TSTGRP5S.
           MOVE "12345678" TO COM5S-FLD1 (1:).
           MOVE "12345678" TO COM5S-FLD2 (1:).
           DISPLAY "SYNC     : " TSTGRP5S.
           MOVE ALL "x"    TO TSTGRP6.
           MOVE "12345678" TO COM6-FLD1 (1:).
           MOVE "12345678" TO COM6-FLD2 (1:).
           DISPLAY "COMP-3   : " TSTGRP6.
           MOVE ALL "x"    TO TSTGRP7.
           MOVE "12345678" TO COM7-FLD1 (1:).
           MOVE "12345678" TO COM7-FLD2 (1:).
           DISPLAY "COMP-1   : " TSTGRP7.
           MOVE ALL "x"    TO TSTGRP8.
           MOVE "12345678" TO COM8-FLD1 (1:).
           MOVE "12345678" TO COM8-FLD2 (1:).
           DISPLAY "COMP-2   : " TSTGRP8.
           MOVE ALL "x"    TO TSTGRP9.
           MOVE -1 TO COM9-FLD1 .
           MOVE -2 TO COM9-FLD2 .
           MOVE -3 TO COM9-FLD3 .
           MOVE -4 TO COM9-FLD4 .
           DISPLAY "SIGN L/T : " TSTGRP9.
           MOVE ALL "x"    TO TSTGRPX.
           MOVE "12345678" TO COMX-FLD1 (1:).
           MOVE "12345678" TO COMX-FLD2 (1:).
           MOVE "12345678" TO COMX-FLT (1:).
           MOVE "12345678" TO COMX-DBL (1:).
           DISPLAY "COMP-X   : " TSTGRPX.
           MOVE ALL "x"    TO TST-BLONG.
           MOVE "12345678" TO COML-FLD1 (1:).
           MOVE "12345678" TO COML-FLD2 (1:).
           IF COML-FLD2 = 875770417
             DISPLAY "BIN-LONG : " TST-BLONG " : Little-Endian"
           ELSE
             DISPLAY "BIN-LONG : " TST-BLONG " : Big-Endian"
           END-IF.
           MOVE ALL "x"    TO TST-BSHORT.
           MOVE "12345678" TO COMS-FLD1 (1:).
           MOVE "12345678" TO COMS-FLD2 (1:).
           DISPLAY "BIN-SHORT: " TST-BSHORT.
           MOVE ALL "x"    TO TST-BDBL.
           MOVE "12345678" TO COMD-FLD1 (1:).
           MOVE "12345678" TO COMD-FLD2 (1:).
           DISPLAY "BIN-DBL  : " TST-BDBL.
           MOVE ALL "x"    TO TST-CMP5.
           MOVE "12345678" TO CMP5-FLD1 (1:).
           MOVE "12345678" TO CMP5-FLD2 (1:).
           DISPLAY "COMP-5   : " TST-CMP5.
           MOVE ALL "x"    TO TST-CMP1.
           MOVE "12345678" TO CMP1-FLD1 (1:).
           MOVE "12345678" TO CMP1-FLD2 (1:).
           DISPLAY "COMP-1   : " TST-CMP1.
           MOVE ALL "x"    TO TST-CMP2.
           MOVE "12345678" TO CMP2-FLD1 (1:).
           MOVE "12345678" TO CMP2-FLD2 (1:).
           DISPLAY "COMP-2   : " TST-CMP2.
           STOP RUN RETURNING 0.
])

AT_CHECK([cobc -x -std=mf -w prog.cob ], [0], [], [])

AT_CHECK([./prog], [0], [NOIBMCOMP: xxxxx1xxxxx
      02 : xxxxx22xxxxx
      02 : ----:xx11xxx22xxx33xx
      02 : ----:xx11xxx22xxx33xx
      03 : xxxxx123xxxxx
      01 : xxxxx1xxxxx
      01 : xxxxx1xxxxx
      03 : xxxxx12xxx123xxx12345678
      07 : xxxxx12345xxx1234567xxx12345678
      04 : xxxxx123xxx1234xxx1234567
      04 : x123456x1234x123456x123x
NOSYNC   : x123456x123x
SYNC     : x123456x1234x
COMP-3   : x1234567x1234x
COMP-1   : 12341234
COMP-2   : 1234567812345678
SIGN L/T : x-01x02-x-03x04-x
COMP-X   : x123x1234567x1234x12345678x
BIN-LONG : x1234x1234x : Little-Endian
BIN-SHORT: x12xx12x
BIN-DBL  : x12345678x12345678x
COMP-5   : x12345678x12345678x
COMP-1   : x1234x1234x
COMP-2   : x12345678x12345678x
], [])

AT_CLEANUP


AT_SETUP([MF IBMCOMP])
AT_KEYWORDS([Numeric])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA  DIVISION.
       FILE SECTION.
      
       WORKING-STORAGE SECTION.
      
       77  VLEN                   PIC 99 VALUE 1.
       01  TSTREC1.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD1          PICTURE S9(2) COMP-4. 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC2.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD2          PICTURE S9(4) COMP-4 SYNC . 
           10  FILLER             PICTURE X(5).
      
       01  TSTREC3.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLD3          PICTURE S9(6) COMP-4 SYNC. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECL.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDL          PICTURE S9(2) COMP-4 SYNC LEFT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECR.
           10  FILLER             PICTURE X(5). 
           10  COMP-FLDR          PICTURE S9(2) COMP-4 SYNC RIGHT. 
           10  FILLER             PICTURE X(5).
      
       01  TSTRECS.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDS      PICTURE S9(4) COMP-4 SYNC . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTRECO.
           10  FILLER             PICTURE X(5). 
           10  FILLER OCCURS 3 TIMES.
               15  FILLER         PICTURE X(2).
               15  COMP-FLDO      PICTURE S9(4) COMP-4 . 
               15  FILLER         PICTURE X(1).
           10  FILLER             PICTURE X(1). 

       01  TSTGRP SYNC COMP-4.
         05  GRP1.
           10  FILLER             PICTURE X(5). 
           10  COM1-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
           10  COM1-FLD3          PICTURE S9(18). 

       01  TSTGRP2 SIGN LEADING SEPARATE.
         05  GRP2-1.
           10  FILLER             PICTURE X(5). 
           10  COM2-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD2          PICTURE S9(6) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(3). 
           10  COM2-FLD3          PICTURE S9(7). 

       01  TSTGRP3 COMP-3.
         05  GRP3-1.
           10  FILLER             PICTURE X(5). 
      * Following is not allowed by Micro Focus
      *    10  COM3-FLD1          PICTURE S9(4) COMP-4. 
           10  COM3-FLD1          PICTURE S9(4). 
           10  FILLER             PICTURE X(3). 
           10  COM3-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(3). 
         05  GRP3-2.
           10  COM3-FLD3          PICTURE S9(13). 

       01  TSTGRP4 COMP-4.
         05  GRP4-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD2          PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 
         05  GRP4-2.
           10  COM4-FLD3          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM4-FLD4          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5 COMP-4.
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP5S COMP-4 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD1         PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM5S-FLD2         PICTURE S9(7). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP6 COMP-3.
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD1          PICTURE S9(13). 
           10  FILLER             PICTURE X(1). 
           10  COM6-FLD2          PICTURE S9(6). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRP7 COMP-1.
           10  COM7-FLD1          .
           10  COM7-FLD2          .

       01  TSTGRP8 COMP-2.
           10  COM8-FLD1          .
           10  COM8-FLD2          .

       01  TSTGRP9.
         05  GRP9-1 SIGN LEADING SEPARATE.
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD1          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD2          PICTURE S9(2) SIGN TRAILING SEPARATE. 
           10  FILLER             PICTURE X(1). 
         05  GRP9-2 SIGN TRAILING SEPARATE.
           10  COM9-FLD3          PICTURE S9(2) SIGN LEADING SEPARATE. 
           10  FILLER             PICTURE X(1). 
           10  COM9-FLD4          PICTURE S9(2). 
           10  FILLER             PICTURE X(1). 

       01  TSTGRPX.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD1          PICTURE X(3) COMP-X SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLD2          PICTURE X(7) COMP-X.
           10  FILLER             PICTURE X(1). 
           10  COMX-FLT           COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 
           10  COMX-DBL           COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BSHORT.
           10  FILLER             PICTURE X(1). 
           10  COMS-FLD1          BINARY-SHORT.
           10  FILLER             PICTURE X(2). 
           10  COMS-FLD2          BINARY-SHORT SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BLONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD1          BINARY-LONG.
           10  FILLER             PICTURE X(1). 
           10  COML-FLD2          BINARY-LONG SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-BDBL.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD1          BINARY-DOUBLE.
           10  FILLER             PICTURE X(1). 
           10  COMD-FLD2          BINARY-DOUBLE UNSIGNED SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD1          PIC 9(18) COMP-5.
           10  FILLER             PICTURE X(1). 
           10  CMP5-FLD2          PIC 9(18) COMP-5 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD1          COMP-1.
           10  FILLER             PICTURE X(1). 
           10  CMP1-FLD2          COMP-1 SYNC.
           10  FILLER             PICTURE X(1). 

       01  TST-CMP2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD1          COMP-2.
           10  FILLER             PICTURE X(1). 
           10  CMP2-FLD2          COMP-2 SYNC.
           10  FILLER             PICTURE X(1). 

       PROCEDURE DIVISION.

           MOVE ALL "x"    TO TSTREC1.
           MOVE LENGTH OF COMP-FLD1 TO VLEN.
           MOVE "11"       TO COMP-FLD1 (1:VLEN).
           IF VLEN = 1
               DISPLAY "NOIBMCOMP: " TSTREC1
           ELSE
               DISPLAY "IBMCOMP  : " TSTREC1.
           MOVE ALL "x"    TO TSTREC2.
           MOVE LENGTH OF COMP-FLD2 TO VLEN.
           MOVE "22"       TO COMP-FLD2 (1:VLEN).
           DISPLAY "      " VLEN " : " TSTREC2.
           MOVE ALL "x"    TO TSTRECO.
           MOVE '----:'    TO TSTRECO (1:5).
           MOVE "11"       TO COMP-FLDO (1) (1:2)
           MOVE "22"       TO COMP-FLDO (2) (1:2)
           MOVE "33"       TO COMP-FLDO (3) (1:2)
           MOVE LENGTH OF COMP-FLDO (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECO.
           MOVE ALL "x"    TO TSTRECS.
           MOVE '----:'    TO TSTRECS (1:5).
           MOVE "11"       TO COMP-FLDS (1) (1:2)
           MOVE "22"       TO COMP-FLDS (2) (1:2)
           MOVE "33"       TO COMP-FLDS (3) (1:2)
           MOVE LENGTH OF COMP-FLDS (1) TO VLEN.
           DISPLAY "      " VLEN " : " TSTRECS.
           MOVE ALL "x"    TO TSTREC3.
           MOVE LENGTH OF COMP-FLD3 TO VLEN.
           MOVE "1234678"  TO TSTREC3 (6:VLEN).
           DISPLAY "      " VLEN " : " TSTREC3.
           MOVE ALL "x"    TO TSTRECL.
           MOVE LENGTH OF COMP-FLDL TO VLEN.
           MOVE "12345678" TO TSTRECL (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECL.
           MOVE ALL "x"    TO TSTRECR.
           MOVE LENGTH OF COMP-FLDR TO VLEN.
           MOVE "12345678" TO TSTRECR (6:VLEN).
           DISPLAY "      " VLEN " : " TSTRECR.
           MOVE ALL "x"    TO TSTGRP.
           MOVE "12345678" TO COM1-FLD1 (1:).
           MOVE "12345678" TO COM1-FLD2 (1:).
           MOVE "12345678" TO COM1-FLD3 (1:).
           MOVE LENGTH OF COM1-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP.
           MOVE ALL "x"    TO TSTGRP2.
           MOVE "12345678" TO COM2-FLD1 (1:).
           MOVE "12345678" TO COM2-FLD2 (1:).
           MOVE "12345678" TO COM2-FLD3 (1:).
           MOVE LENGTH OF COM2-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP2.
           MOVE ALL "x"    TO TSTGRP3.
           MOVE "12345678" TO COM3-FLD1 (1:).
           MOVE "12345678" TO COM3-FLD2 (1:).
           MOVE "12345678" TO COM3-FLD3 (1:).
           MOVE LENGTH OF COM3-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP3.
           MOVE ALL "x"    TO TSTGRP4.
           MOVE "12345678" TO COM4-FLD1 (1:).
           MOVE "12345678" TO COM4-FLD2 (1:).
           MOVE "12345678" TO COM4-FLD3 (1:).
           MOVE "12345678" TO COM4-FLD4 (1:).
           MOVE LENGTH OF COM4-FLD2 TO VLEN.
           DISPLAY "      " VLEN " : " TSTGRP4.
           MOVE ALL "x"    TO TSTGRP5.
           MOVE "12345678" TO COM5-FLD1 (1:).
           MOVE "12345678" TO COM5-FLD2 (1:).
           DISPLAY "NOSYNC   : " TSTGRP5.
           MOVE ALL "x"    TO TSTGRP5S.
           MOVE "12345678" TO COM5S-FLD1 (1:).
           MOVE "12345678" TO COM5S-FLD2 (1:).
           DISPLAY "SYNC     : " TSTGRP5S.
           MOVE ALL "x"    TO TSTGRP6.
           MOVE "12345678" TO COM6-FLD1 (1:).
           MOVE "12345678" TO COM6-FLD2 (1:).
           DISPLAY "COMP-3   : " TSTGRP6.
           MOVE ALL "x"    TO TSTGRP7.
           MOVE "12345678" TO COM7-FLD1 (1:).
           MOVE "12345678" TO COM7-FLD2 (1:).
           DISPLAY "COMP-1   : " TSTGRP7.
           MOVE ALL "x"    TO TSTGRP8.
           MOVE "12345678" TO COM8-FLD1 (1:).
           MOVE "12345678" TO COM8-FLD2 (1:).
           DISPLAY "COMP-2   : " TSTGRP8.
           MOVE ALL "x"    TO TSTGRP9.
           MOVE -1 TO COM9-FLD1 .
           MOVE -2 TO COM9-FLD2 .
           MOVE -3 TO COM9-FLD3 .
           MOVE -4 TO COM9-FLD4 .
           DISPLAY "SIGN L/T : " TSTGRP9.
           MOVE ALL "x"    TO TSTGRPX.
           MOVE "12345678" TO COMX-FLD1 (1:).
           MOVE "12345678" TO COMX-FLD2 (1:).
           MOVE "12345678" TO COMX-FLT (1:).
           MOVE "12345678" TO COMX-DBL (1:).
           DISPLAY "COMP-X   : " TSTGRPX.
           MOVE ALL "x"    TO TST-BLONG.
           MOVE "12345678" TO COML-FLD1 (1:).
           MOVE "12345678" TO COML-FLD2 (1:).
           IF COML-FLD2 = 875770417
             DISPLAY "BIN-LONG : " TST-BLONG " : Little-Endian"
           ELSE
             DISPLAY "BIN-LONG : " TST-BLONG " : Big-Endian"
           END-IF.
           MOVE ALL "x"    TO TST-BSHORT.
           MOVE "12345678" TO COMS-FLD1 (1:).
           MOVE "12345678" TO COMS-FLD2 (1:).
           DISPLAY "BIN-SHORT: " TST-BSHORT.
           MOVE ALL "x"    TO TST-BDBL.
           MOVE "12345678" TO COMD-FLD1 (1:).
           MOVE "12345678" TO COMD-FLD2 (1:).
           DISPLAY "BIN-DBL  : " TST-BDBL.
           MOVE ALL "x"    TO TST-CMP5.
           MOVE "12345678" TO CMP5-FLD1 (1:).
           MOVE "12345678" TO CMP5-FLD2 (1:).
           DISPLAY "COMP-5   : " TST-CMP5.
           MOVE ALL "x"    TO TST-CMP1.
           MOVE "12345678" TO CMP1-FLD1 (1:).
           MOVE "12345678" TO CMP1-FLD2 (1:).
           DISPLAY "COMP-1   : " TST-CMP1.
           MOVE ALL "x"    TO TST-CMP2.
           MOVE "12345678" TO CMP2-FLD1 (1:).
           MOVE "12345678" TO CMP2-FLD2 (1:).
           DISPLAY "COMP-2   : " TST-CMP2.
           STOP RUN RETURNING 0.
])

AT_CHECK([cobc -x -std=mf -w -fibmcomp prog.cob ], [0], [], [])

AT_CHECK([./prog], [0], [IBMCOMP  : xxxxx11xxxxx
      02 : xxxxxx22xxxxx
      02 : ----:xx11xxx22xxx33xx
      02 : ----:xxx11xxxx22xxxx33xx
      04 : xxxxx1234xxxxxxxx
      02 : xxxxx12xxxxxx
      02 : xxxxx12xxxxxx
      04 : xxxxxx12xxxx1234xxxx12345678
      07 : xxxxx12345xxx1234567xxx12345678
      04 : xxxxx123xxx1234xxx1234567
      04 : xxxx12345678xxxx1234x12345678x1234x
NOSYNC   : x12345678x1234x
SYNC     : xxxx12345678xxxx1234x
COMP-3   : x1234567x1234x
COMP-1   : 12341234
COMP-2   : 1234567812345678
SIGN L/T : x-01x02-x-03x04-x
COMP-X   : x123x1234567xxxx1234xxxx12345678x
BIN-LONG : x1234x1234x : Little-Endian
BIN-SHORT: x12xx12x
BIN-DBL  : x12345678x12345678x
COMP-5   : x12345678xxx12345678x
COMP-1   : x1234xxx1234x
COMP-2   : x12345678xxxxxxx12345678x
], [])

AT_CLEANUP

#### end r1727
