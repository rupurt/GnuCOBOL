## Copyright (C) 2003-2012, 2014-2017 Free Software Foundation, Inc.
## Written by Keisuke Nishida, Roger While, Simon Sobisch
##
## This file is part of GnuCOBOL.
##
## The GnuCOBOL compiler is free software: you can redistribute it
## and/or modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## GnuCOBOL is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with GnuCOBOL.  If not, see <http://www.gnu.org/licenses/>.

### GnuCOBOL Test Suite

### Non-standard extensions


AT_SETUP([CALL BY CONTENT binary and literal])
AT_KEYWORDS([extensions])

AT_DATA([dump.c], [
#include <stdio.h>
#define COB_LIB_EXPIMP
#include <libcob.h>
COB_EXPIMP int dump (unsigned char *, char *);
int dump (unsigned char *data, char *p)
{
  int i;
  if ( *p == 0 ) p++;
  if ( *p == 0 ) p++;	/* Skip for BIG Endian system */
  if ( *p == 0 ) p++;
  if ( *p == 1 ) {
     for (i = 0; i < 4; i++)
       printf ("%02x", data[[i]]);
  } else {
       printf ("%8.8d", *((int *)data));
  }
  puts ("");
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(9) VALUE 4660 COMP.
       01 X-2           PIC 9(9) VALUE 4660 COMP-5.
       PROCEDURE        DIVISION.
           CALL "dump" USING X-1 BY CONTENT 1
           END-CALL.
           CALL "dump" USING X-2 BY CONTENT 2
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE dump.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[00001234
00004660
], [])

AT_CLEANUP


AT_SETUP([CALL USING numeric literal])
AT_KEYWORDS([CALL])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MYRTN  PIC X(9) VALUE "SUB  ".
       01  BINFLD PIC S9(9) BINARY VALUE 1280.
       
       PROCEDURE DIVISION.
           CALL "SUB"  USING LENGTH OF MYRTN BY VALUE 10.
           CALL "SUB"  USING BINFLD BY VALUE 11.
           CALL "SUB"  USING BY CONTENT BINFLD BY VALUE 12.
           CALL "SUB"  USING BINFLD BY VALUE 13.
           CALL "SUB"  USING 1280 BY VALUE 14.
           CALL "SUB"  USING -1280 BY VALUE 15.
           CALL "SUB"  USING BY CONTENT 1280 BY VALUE 16.
           CALL "SUB"  USING BY CONTENT -1280 BY VALUE 17.
           CALL "SUB"  USING BY REFERENCE 1280 BY VALUE 18.
           CALL "SUB"  USING BY REFERENCE -1280 BY VALUE 19.
           CALL "SUB"  USING BY CONTENT BINFLD BY VALUE 20.
           CALL "SUB"  USING BY REFERENCE BINFLD BY VALUE 21.
           CALL "SUB"  USING 1665431892 BY VALUE 22.
           CALL "SUB"  USING 1665.892 BY VALUE 23.
           CALL "SUB"  USING 1665.89200 BY VALUE 24. 
           CALL "SUB"  USING 16654318925468 BY VALUE 25.

           STOP RUN.
           END PROGRAM prog.
       
       IDENTIFICATION DIVISION.
       PROGRAM-ID. "SUB".
       
       DATA DIVISION.
       LINKAGE SECTION.
       01  x  PIC S9(9) BINARY.
       01  y  PIC 9(9)  COMP-5.

       PROCEDURE DIVISION USING x VALUE y.
           DISPLAY "COBOL: X is " x " and Y is " y.
           ADD 1 TO x.
           END PROGRAM "SUB".
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])

AT_CHECK([./prog], [0], [COBOL: X is +000000009 and Y is 0000000010
COBOL: X is +000001280 and Y is 0000000011
COBOL: X is +000001281 and Y is 0000000012
COBOL: X is +000001281 and Y is 0000000013
COBOL: X is +000001280 and Y is 0000000014
COBOL: X is -000001280 and Y is 0000000015
COBOL: X is +000001280 and Y is 0000000016
COBOL: X is -000001280 and Y is 0000000017
COBOL: X is +000001280 and Y is 0000000018
COBOL: X is -000001280 and Y is 0000000019
COBOL: X is +000001282 and Y is 0000000020
COBOL: X is +000001282 and Y is 0000000021
COBOL: X is +665431892 and Y is 0000000022
COBOL: X is +001665892 and Y is 0000000023
COBOL: X is +166589200 and Y is 0000000024
COBOL: X is -564248420 and Y is 0000000025
], [])

AT_CLEANUP


## H literal

AT_SETUP([Hexadecimal numeric literal]) # Shouldn't this be in run_fundamentals?
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC 9(8) VALUE H"012345".
       01 X-2           PIC 9(8) VALUE H"FFFFFF".
       PROCEDURE        DIVISION.
           DISPLAY X-1
           END-DISPLAY.
           DISPLAY X-2
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[00074565
16777215
])

AT_CLEANUP

## Expression

AT_SETUP([Semi-parenthesized condition])
AT_KEYWORDS([extensions]) # Shouldn't this be in run_fundamentals?

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 1 = (1 OR 2)
             DISPLAY "OK" NO ADVANCING
             END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob -Wno-constant-expression], [0], [], [])
AT_CHECK([./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([ADDRESS OF]) # Shouldn't this be in run_fundamentals?
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-1           PIC X(3) VALUE "X-1".
       01 X-2           PIC X(3) VALUE "X-2".
       01 G.
         02 PTR-1       USAGE POINTER VALUE NULL.
         02 PTR-2       USAGE POINTER VALUE NULL.
       LINKAGE          SECTION.
       01 Y             PIC X(3).
       PROCEDURE        DIVISION.
         SET ADDRESS OF Y TO ADDRESS OF X-1.
         IF Y NOT = "X-1"
            DISPLAY "Test 1 " Y
            END-DISPLAY
         END-IF.
         SET PTR-1 TO ADDRESS OF X-2.
         SET PTR-2 TO PTR-1
         SET ADDRESS OF Y TO PTR-2.
         IF Y NOT = "X-2"
            DISPLAY "Test 2 " Y
            END-DISPLAY
         END-IF
         INITIALIZE PTR-1.
         IF PTR-1 NOT = NULL
           DISPLAY "NG 1"
           END-DISPLAY
         END-IF.
         SET ADDRESS OF Y TO NULL.
         IF PTR-1 NOT = ADDRESS OF Y
           DISPLAY "NG 2"
           END-DISPLAY
         END-IF.
         IF ADDRESS OF Y NOT = PTR-1
           DISPLAY "NG 3"
           END-DISPLAY
         END-IF.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([LENGTH OF])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(2).
       01 G.
         02 Y           PIC X(2) OCCURS 10.
       01 L             PIC 9(4).
       01 I             PIC 9(2) VALUE 10.
       PROCEDURE        DIVISION.
           MOVE LENGTH OF X TO L.
           IF L NOT = 2
              DISPLAY "Length 1 " L
              END-DISPLAY
           END-IF.
           MOVE LENGTH OF Y TO L.
           IF L NOT = 2
              DISPLAY "Length 2 " L
              END-DISPLAY
           END-IF.
           MOVE LENGTH OF Y(1) TO L.
           IF L NOT = 2
              DISPLAY "Length 3 " L
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([WHEN-COMPILED])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(20).
       PROCEDURE        DIVISION.
           MOVE WHEN-COMPILED TO X.
           INSPECT X CONVERTING "0123456789" TO "9999999999".
           IF X NOT = "99/99/9999.99.99    "
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

## OCCURS

AT_SETUP([Complex OCCURS DEPENDING ON (1)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 I PIC 9.
       01 G-1 VALUE "123456789".
         02 G-2.
           03 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
         02 G-3.
           03 G-4.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
           03 G-5.
             04 X PIC X OCCURS 1 TO 3 DEPENDING ON I.
       PROCEDURE        DIVISION.
           MOVE 2 TO I.
           DISPLAY G-1 ":" G-4 ":" G-5 NO ADVANCING
           END-DISPLAY.
])

AT_CHECK([$COMPILE -std=mvs prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [123456:34:56])

AT_CLEANUP


AT_SETUP([Complex OCCURS DEPENDING ON (2)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 1 TO 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 1 TO 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 1 TO 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[18181    22        333
1818  3    22      111
])

AT_CLEANUP


AT_SETUP([Complex OCCURS DEPENDING ON (3)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 1 TO 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 1 TO 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 1 TO 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -std=mf -fodoslide prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[0606122333
1010  3  22111
])

AT_CLEANUP


AT_SETUP([Complex OCCURS DEPENDING ON (4)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 1 TO 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 1 TO 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 1 TO 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
             05  VFIX   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    '444'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    '000'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=complex-odo:yes prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[33331    22        333            444
3333  3    22      111            000
])

AT_CLEANUP


AT_SETUP([Complex OCCURS DEPENDING ON (5)])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  I            PIC 99.
       01  J            PIC 99.
       01  K            PIC 99.
       01  VLEN         PIC 99.
       01  VTOP.
           03 VGROUP.
             05  VX     OCCURS 1 TO 5 DEPENDING ON I.
               10 VXX   PIC X(1).
             05  VY     OCCURS 1 TO 5 DEPENDING ON J.
               10 VYY   PIC X(2).
             05 ZZ      OCCURS 1 TO 5 DEPENDING ON K.
               10 VZZ   PIC X(3).
             05  VFIX   PIC X(3).
       PROCEDURE        DIVISION.
           MOVE    1      TO I.
           MOVE    1      TO J.
           MOVE    1      TO K.
           MOVE    '1'    TO VXX (1).
           MOVE    '22'   TO VYY (1).
           MOVE    '333'  TO VZZ (1).
           MOVE    '444'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           INITIALIZE     VTOP.
           MOVE    3      TO I.
           MOVE    2      TO J.
           MOVE    1      TO K.
           MOVE    '3'    TO VXX (3).
           MOVE    '22'   TO VYY (2).
           MOVE    '111'  TO VZZ (1).
           MOVE    '000'  TO VFIX.
           MOVE    LENGTH OF VGROUP         TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           MOVE    FUNCTION LENGTH (VGROUP) TO VLEN.
           DISPLAY VLEN   NO ADVANCING
           END-DISPLAY.
           DISPLAY VGROUP
           END-DISPLAY.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=complex-odo:yes -fodoslide prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[0909122333444
1313  3  22111000
])

AT_CLEANUP


# Nested ODO subscripts
AT_SETUP([Complex OCCURS DEPENDING ON (6)])
AT_KEYWORDS([extensions runsubscripts nested subscripts])

AT_SKIP_IF(true) # This test is incorrect. Should be removed. RJN

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  n            PIC 9 VALUE 2.
       01  m            PIC 9 VALUE 3.

       01  a-table      VALUE "ABCDEFGHIJ".
           03  rows     OCCURS 0 TO 2 TIMES
                        DEPENDING ON n.
                05  chars OCCURS 0 TO 5 TIMES
                          DEPENDING ON m
                          PIC X.

       01  vals         PIC X(3).

       PROCEDURE DIVISION.
           MOVE chars (1, 2) TO vals (1:1)
           MOVE chars (2, 1) TO vals (2:1)
           MOVE chars (2, 3) TO vals (3:1)
           IF vals NOT = "BFH"
              DISPLAY "Vals (aligned) wrong: " vals
              END-DISPLAY
           END-IF
        *> currently not working (size is wrong and it needs a temporary field)
        *> IF a-table NOT = "ABCFGH"
        *>    DISPLAY "Table (aligned) wrong: " a-table
        *>    END-DISPLAY
        *> END-IF
           .
])

AT_CHECK([$COMPILE -cb_conf=complex-odo:yes prog.cob], [0], [], [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([Complex OCCURS DEPENDING ON (7)])
AT_KEYWORDS([extensions runsubscripts nested subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  n            PIC 9 VALUE 2.
       01  m            PIC 9 VALUE 3.

       01  a-table      VALUE "ABCDEFGHIJ".
           03  rows     OCCURS 0 TO 2 TIMES
                        DEPENDING ON n.
                05  chars OCCURS 0 TO 5 TIMES
                          DEPENDING ON m
                          PIC X.

       01  vals         PIC X(3).

       PROCEDURE DIVISION.
           MOVE chars (1, 2) TO vals (1:1)
           MOVE chars (2, 1) TO vals (2:1)
           MOVE chars (2, 3) TO vals (3:1)
           IF vals NOT = "BDF"
              DISPLAY "Vals (slided) wrong: " vals
              END-DISPLAY
           END-IF
           IF a-table NOT = "ABCDEF"
              DISPLAY "Table (slided) wrong: " a-table
              END-DISPLAY
           END-IF
           .
])

AT_CHECK([$COMPILE -cb_conf=complex-odo:yes -fodoslide prog.cob], [0], [], [])
AT_CHECK([./prog], [0])

AT_CLEANUP


AT_SETUP([DEPENDING ON with ODOSLIDE])
AT_KEYWORDS([nested DEPENDING ON])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. prog.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FLATFILE 
           ASSIGN "SEQODO"
           ORGANIZATION LINE SEQUENTIAL
           FILE STATUS IS CUST-STAT .

       DATA  DIVISION.
       FILE SECTION.
       FD  FLATFILE
           BLOCK CONTAINS 5 RECORDS.
      
       01  TSTREC.
         05  SEQ           PIC 99.
         05  DEP-X         PIC 99.
         05  DEP-Y         PIC 99.
         05  HELLO         PIC X(5) VALUE 'World'.
         05  TSTGRP.
           10  TSTGRP1.
             15  TSTX OCCURS 1 TO 3 TIMES 
                      DEPENDING ON DEP-X.
               20  TSTG-1  PIC Z9.
             15  TSTTAIL1  PIC XXXX.
           10  TSTY-ALL.
             15  TSTY OCCURS 1 TO 3 TIMES 
                      DEPENDING ON DEP-X.
               20  TSTY-1  PIC 99.
               20  TSTY-2  PIC XXX.
               20  TSTY-3  PIC X 
                             OCCURS 1 TO 12 TIMES
                             DEPENDING ON DEP-Y.
               20  TSTY-4  PIC XX.
               20  TSTY-5    OCCURS 1 TO 3 TIMES
                             DEPENDING ON DEP-X.
                  25  TSTY-6 OCCURS 1 TO 3 TIMES 
                             DEPENDING ON DEP-X.
                     30  TSTY-7  PIC X.
           10  TSTTAIL2    PIC XX.

       WORKING-STORAGE SECTION.
       77  CUST-STAT PIC  X(2).
       01  LN        PIC  9(3).
       01  IX        PIC  9(9) BINARY.
       01  IY        PIC  9(9) BINARY.
       01  IZ        PIC  9(9) BINARY.
       01  TSTXXX    PIC  X(26) VALUE "Abcdefghijklmnopqrstuvwxyz".
       01  TSTALPHA REDEFINES TSTXXX.
           05 ALPH-CHR PIC  X OCCURS 26 TIMES.
       01  TSTHEX    PIC  X(15) VALUE "123456789ABCDEF".
       01  FILLER REDEFINES TSTHEX.
           05 HEX-CHR PIC  X OCCURS 15 TIMES.

       01  TSTREC2.
         05  DEP-X2        PIC 99.
         05  TSTGRP2.
             10  TSTX2 OCCURS 1 TO 3 TIMES DEPENDING ON DEP-X2.
               15  TSTG2-1  PIC Z9.
             10  TST2TAIL1  PIC XXX.

       01  TSTREC3.
         05  DEP-X3        PIC 99.
         05  TSTGRP3.
             10  TSTX3 OCCURS 1 TO 6 TIMES DEPENDING ON DEP-X3.
               15  TSTG3-1  PIC 9.
       01  TSTWRK   PIC X(24).

       PROCEDURE DIVISION.
       MAIN-10.
           MOVE 6 TO DEP-X3.
           MOVE 1 TO TSTG3-1 (1).
           MOVE 2 TO TSTG3-1 (2).
           MOVE 3 TO TSTG3-1 (3).
           MOVE 4 TO TSTG3-1 (4).
           MOVE 5 TO TSTG3-1 (5).
           MOVE 6 TO TSTG3-1 (6).
           MOVE 3 TO DEP-X3.
           STRING TSTGRP3 "-TRAILER" DELIMITED BY SIZE
           INTO TSTWRK.
           DISPLAY "'" TSTWRK "'".
           OPEN OUTPUT FLATFILE.
           MOVE "Howdy" TO HELLO.
           MOVE 0 TO SEQ.
           MOVE 2 TO DEP-X.
           MOVE 5 TO DEP-Y.
           PERFORM WRITE-REC.
           MOVE 1 TO DEP-X.
           MOVE 2 TO DEP-Y.
           PERFORM WRITE-REC.
           MOVE 3 TO DEP-X.
           MOVE 3 TO DEP-Y.
           PERFORM WRITE-REC.
           MOVE 3 TO DEP-X.
           MOVE 10 TO DEP-Y.
           PERFORM WRITE-REC.
           CLOSE FLATFILE.
           OPEN INPUT FLATFILE.
           PERFORM READ-REC.
           CLOSE FLATFILE.
           STOP RUN.

       WRITE-REC SECTION.
           ADD 1 TO SEQ.
           MOVE LENGTH OF TSTREC TO LN.
           DISPLAY "Write SEQ " SEQ ", DEP-X = " DEP-X
                   " & DEP-Y = " DEP-Y
                   ", TSTREC len:" LN.
           MOVE ALL "*" TO TSTGRP.
           MOVE "<>"    TO TSTTAIL1, TSTTAIL2.
           PERFORM VARYING IX FROM 1 BY 1
                     UNTIL IX > DEP-X
               MOVE IX TO TSTG-1 (IX)
           END-PERFORM.
           MOVE LENGTH OF TSTGRP1 TO LN.
           DISPLAY "Group1: '" TSTGRP1 "' len:" LN.
           PERFORM VARYING IX FROM 1 BY 1
                     UNTIL IX > DEP-X
               MOVE IX TO TSTY-1 (IX)
               MOVE "." TO TSTY-4 (IX)
               PERFORM VARYING IY FROM 1 BY 1
                         UNTIL IY > DEP-Y
                   MOVE ALPH-CHR (IY) TO TSTY-3 (IX, IY)
               END-PERFORM
           END-PERFORM.
           PERFORM VARYING IX FROM 1 BY 1
                     UNTIL IX > DEP-X
               PERFORM VARYING IY FROM 1 BY 1
                         UNTIL IY > DEP-X
                 PERFORM VARYING IZ FROM 1 BY 1
                           UNTIL IZ > DEP-X
                   MOVE HEX-CHR (IX+IY+IZ) TO TSTY-7 (IX, IY, IZ)
                 END-PERFORM
               END-PERFORM
           END-PERFORM.
           DISPLAY "  Data: '" TSTGRP "'".

           MOVE ALL "*" TO TSTGRP2.
           MOVE DEP-X TO DEP-X2.
           PERFORM VARYING IX FROM 1 BY 1
                     UNTIL IX > DEP-X2
               MOVE IX TO TSTG2-1 (IX)
           END-PERFORM.
           MOVE "<>"    TO TST2TAIL1.
           MOVE LENGTH OF TSTGRP2 TO LN.
           DISPLAY "Group2: '" TSTGRP2 "' len:" LN.
           WRITE TSTREC.

       READ-REC SECTION.
       READ-10.
           READ FLATFILE AT END GO TO READ-99.
           MOVE LENGTH OF TSTREC TO LN.
           DISPLAY "Read SEQ " SEQ ", DEP-X = " DEP-X
                   " & DEP-Y = " DEP-Y
                   ", TSTREC len:" LN.
           DISPLAY "  Data: '" TSTGRP "'".
           GO TO READ-10.
       READ-99.
           EXIT .
])

AT_CHECK([cobc -x -std=mf -w -fodoslide prog.cob ], [0], [], [])

AT_CHECK([./prog], [0], ['123-TRAILER             '
Write SEQ 01, DEP-X = 02 & DEP-Y = 05, TSTREC len:053
Group1: ' 1 2<>  ' len:008
  Data: ' 1 2<>  01***Abcde. 344502***Abcde. 4556<>'
Group2: ' 1 2<> ' len:007
Write SEQ 02, DEP-X = 01 & DEP-Y = 02, TSTREC len:029
Group1: ' 1<>  ' len:006
  Data: ' 1<>  01***Ab. 3<>'
Group2: ' 1<> ' len:005
Write SEQ 03, DEP-X = 03 & DEP-Y = 03, TSTREC len:080
Group1: ' 1 2 3<>  ' len:010
  Data: ' 1 2 3<>  01***Abc. 34545656702***Abc. 45656767803***Abc. 567678789<>'
Group2: ' 1 2 3<> ' len:009
Write SEQ 04, DEP-X = 03 & DEP-Y = 10, TSTREC len:101
Group1: ' 1 2 3<>  ' len:010
  Data: ' 1 2 3<>  01***Abcdefghij. 34545656702***Abcdefghij. 45656767803***Abcdefghij. 567678789<>'
Group2: ' 1 2 3<> ' len:009
Read SEQ 01, DEP-X = 02 & DEP-Y = 05, TSTREC len:053
  Data: ' 1 2<>  01***Abcde. 344502***Abcde. 4556<>'
Read SEQ 02, DEP-X = 01 & DEP-Y = 02, TSTREC len:029
  Data: ' 1<>  01***Ab. 3<>'
Read SEQ 03, DEP-X = 03 & DEP-Y = 03, TSTREC len:080
  Data: ' 1 2 3<>  01***Abc. 34545656702***Abc. 45656767803***Abc. 567678789<>'
Read SEQ 04, DEP-X = 03 & DEP-Y = 10, TSTREC len:101
  Data: ' 1 2 3<>  01***Abcdefghij. 34545656702***Abcdefghij. 45656767803***Abcdefghij. 567678789<>'
], [])


AT_CAPTURE_FILE(./SEQODO)

AT_DATA([reference], [010205Howdy 1 2<>  01***Abcde. 344502***Abcde. 4556<>
020102Howdy 1<>  01***Ab. 3<>
030303Howdy 1 2 3<>  01***Abc. 34545656702***Abc. 45656767803***Abc. 567678789<>
040310Howdy 1 2 3<>  01***Abcdefghij. 34545656702***Abcdefghij. 45656767803***Abcdefghij. 567678789<>
])

AT_CHECK([gcdiff reference SEQODO], [0], [], [])

AT_CLEANUP


AT_SETUP([INITIALIZE level 01])
AT_KEYWORDS([initialize])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 L1 OCCURS 1000 TIMES.
           05 L2 PIC S9(9) COMP-5 VALUE 5.
           05 L3 PIC S9(9)        VALUE 5.
       PROCEDURE DIVISION.
           IF L2(3) not = 5
              DISPLAY '0 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1).
           IF L2(1) not = 0
              DISPLAY '1 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '1 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1)  DEFAULT.
           IF L2(1) not = 0
              DISPLAY '2 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '2 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           INITIALIZE L1(1)  ALL VALUE.
           IF L2(1) not = 5
              DISPLAY '3 VALUE(1) = ' L2(1)
              END-DISPLAY
           END-IF.
           IF L2(3) not = 5
              DISPLAY '3 VALUE(3) = ' L2(3)
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([MOVE NON-INTEGER TO ALPHA-NUMERIC])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
        01 INTEGER             PIC 9(4)   VALUE 1289 .
        01 SIGNED-INTEGER      PIC S9(4)  VALUE -1289 .

        01 ALPHA-FIELD         PIC X(4).

        01 NON-INTEGER           PIC 9(2)V99   VALUE 12.89 .
        01 NON-INTEGER-2         PIC 9(2)V99
                                     USAGE BINARY VALUE 12.89 .
        01 NON-INTEGER-3         PIC 9(2)V99
                                      USAGE PACKED-DECIMAL VALUE 12.89 .
        01 SIGNED-NON-INTEGER    PIC S9(2)V99   VALUE -12.89 .
        01 SIGNED-NON-INTEGER-2  PIC S9(2)V99
                                     USAGE BINARY VALUE -12.89 .
        01 SIGNED-NON-INTEGER-3  PIC S9(2)V99
                                     USAGE PACKED-DECIMAL VALUE -12.89 .

       PROCEDURE        DIVISION.
*     *    MOVE NON-INTEGER TO ALPHA-NUMERIC --> ignore Decimal Point!
       S-01.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-02.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-03.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-10.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-20.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-30.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-40.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-2 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.
       S-50.
          MOVE SPACES TO ALPHA-FIELD.
          MOVE SIGNED-NON-INTEGER-3 TO ALPHA-FIELD.
          DISPLAY  ALPHA-FIELD NO ADVANCING
          END-DISPLAY.

          STOP RUN.
])

AT_CHECK([$COMPILE -std=mf prog.cob], [0], [],
[prog.cob: In paragraph 'S-03':
prog.cob: 36: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-10':
prog.cob: 41: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-20':
prog.cob: 46: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-30':
prog.cob: 51: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-40':
prog.cob: 56: Warning: Move non-integer to alphanumeric
prog.cob: In paragraph 'S-50':
prog.cob: 61: Warning: Move non-integer to alphanumeric
])
AT_CHECK([./prog], [0], [12891289128912891289128912891289])

AT_CLEANUP

## CALL

AT_SETUP([CALL USING file-name])
AT_KEYWORDS([extensions])

AT_DATA([setfilename.c], [
#include <stdio.h>
#include <string.h>
#define COB_LIB_EXPIMP
#include <libcob.h>
COB_EXPIMP int setfilename (cob_file *f, unsigned char *name)
{
  memcpy (f->assign->data, name, strlen ((char *)name));
  return 0;
}
])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       WORKING-STORAGE  SECTION.
       01 FILENAME      PIC X(8).
       PROCEDURE        DIVISION.
           INITIALIZE FILENAME.
           CALL "setfilename" USING TEST-FILE "TESTFILE"
           END-CALL.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE setfilename.c], [0], [], [])
AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([test -e TESTFILE], [0], [], [])

AT_CLEANUP

AT_SETUP([CALL unusual PROGRAM-ID.])
AT_KEYWORDS([extensions])

AT_DATA([A@B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A@B".
       PROCEDURE        DIVISION.
           DISPLAY "P1" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A@%:@B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A@%:@B".
       PROCEDURE        DIVISION.
           DISPLAY "P2" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A-B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A-B".
       PROCEDURE        DIVISION.
           DISPLAY "P3" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([A_B.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "A_B".
       PROCEDURE        DIVISION.
           DISPLAY "P4" NO ADVANCING
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "A@B"
           END-CALL.
           CALL "A@%:@B"
           END-CALL.
           CALL "A-B"
           END-CALL.
           CALL "A_B"
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE_MODULE A@B.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE A@%:@B.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE A-B.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE A_B.cob], [0], [], [])
AT_CHECK([$COMPILE -o caller caller.cob], [0], [], [])

AT_CHECK([./caller], [0], [P1P2P3P4])

AT_CLEANUP

AT_SETUP([CALL / GOBACK with LOCAL-STORAGE])
AT_KEYWORDS([extensions])

# Testcase introduced when Bug #91 occured.
# Will fail if memory is freed which was
# allocated by mpir/gmp.
AT_DATA([prog_a.cob], [
		IDENTIFICATION DIVISION.
		PROGRAM-ID. prog_a.
		DATA DIVISION.
		WORKING-STORAGE SECTION.
		77  WS-STRINGA   PIC X(10).
		PROCEDURE DIVISION.
		    MOVE  "hi there"   TO WS-STRINGA
		    CALL  "prog_b"  USING WS-STRINGA
		    DISPLAY "back in prog_a"
		    GOBACK.
])

AT_DATA([prog_b.cob], [
		IDENTIFICATION DIVISION.
		PROGRAM-ID. prog_b.
		DATA DIVISION.
		WORKING-STORAGE SECTION.
		77  WS-STRINGB   PIC X(10).
		77  WS-CALLSB    PIC 9(03).
		LOCAL-STORAGE SECTION.
		77  LS-STRING  PIC X(10).
		LINKAGE SECTION.
		77  LK-STRING  PIC X(10).

		PROCEDURE DIVISION  USING  LK-STRING.
		    DISPLAY "entered prog_b"
		    ADD   1  TO  WS-CALLSB
		    MOVE  LK-STRING TO WS-STRINGB
		    MOVE  LK-STRING TO LS-STRING
		    DISPLAY "exiting prog_b"
		    GOBACK.
])

AT_CHECK([$COMPILE prog_a.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE prog_b.cob], [0], [], [])
AT_CHECK([./prog_a], [0], [entered prog_b
exiting prog_b
back in prog_a
], [])

AT_CLEANUP


AT_SETUP([CALL BY VALUE alphanumeric item])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC XX VALUE "OK".
       PROCEDURE        DIVISION.
           CALL "prog2" USING BY VALUE X
           END-CALL.
           IF X NOT = "OK"
              DISPLAY X NO ADVANCING
              END-DISPLAY
           END-IF.
           STOP RUN.
       PROGRAM-ID.      prog2.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01  X            PIC XX.
       PROCEDURE        DIVISION USING BY VALUE X.
           MOVE "KO" TO X.
           EXIT PROGRAM.
       END PROGRAM prog2.
       END PROGRAM prog.
])

AT_CHECK([$COMPILE prog.cob], [0], [],
[prog.cob: 8: Warning: BY CONTENT assumed for alphanumeric item
])
AT_CHECK([./prog], [0], [])

AT_CLEANUP

AT_SETUP([Case independent PROGRAM-ID])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      PROG.
       PROCEDURE        DIVISION.
           CALL "prog"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM prog.
       END PROGRAM PROG.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([PROGRAM-ID AS clause])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller AS "PROG".
       PROCEDURE        DIVISION.
           CALL "prog"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      callee AS "prog".
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM callee.
       END PROGRAM caller.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([Quoted PROGRAM-ID])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      "caller".
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           STOP RUN.
       PROGRAM-ID.      "callee".
       PROCEDURE        DIVISION.
           EXIT PROGRAM.
       END PROGRAM callee.
       END PROGRAM caller.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

## ASSIGN

AT_SETUP([ASSIGN clause])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           MOVE "TEST-FILE" TO FILENAME.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=assign-clause:mf prog.cob], [0], [],
[prog.cob: 12: Warning: 'FILENAME' will be implicitly defined
])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP

AT_SETUP([ASSIGN clause IBM])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN DA-S-FILENAME.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=assign-clause:ibm prog.cob], [0], [],
[prog.cob: 7: Warning: ASSIGN interpreted as FILENAME
])
AT_CHECK([./prog], [0], [], [])
AT_CHECK([test -f FILENAME], [0], [], [])

AT_CLEANUP

AT_SETUP([ASSIGN mapping])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAME2".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=filename-mapping:no prog.cob], [0], [], [])
AT_CHECK([DD_FILENAME="x" ./prog], [0], [], [])
AT_CHECK([test -f "x"], [1])
AT_CHECK([test -f "FILENAME"], [0], [], [])

AT_CHECK([$COMPILE -cb_conf=filename-mapping:yes prog2.cob], [0], [], [])
AT_CHECK([DD_FILENAME2="x" ./prog2], [0], [], [])
AT_CHECK([test -f "FILENAME2"], [1])
AT_CHECK([test -f "x"], [0], [], [])
AT_CHECK([dd_FILENAME2="y" ./prog2], [0], [], [])
AT_CHECK([test -f "y"], [0], [], [])
AT_CHECK([FILENAME2="z" ./prog2], [0], [], [])
AT_CHECK([test -f "z"], [0], [], [])
AT_CHECK([./prog2], [0], [], [])
AT_CHECK([test -f "FILENAME2"], [0], [], [])

AT_CLEANUP

AT_SETUP([ASSIGN expansion])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "$DIR/FILENAME".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=filename-mapping:yes prog.cob], [0], [], [])
AT_CHECK([DIR="." ./prog], [0], [], [])
AT_CHECK([test -f "./FILENAME" && rm -f "./FILENAME"], [0], [], [])

AT_CLEANUP

AT_SETUP([ASSIGN with COB_FILE_PATH])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN "FILENAMEX".
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-REC      PIC X(4).
       PROCEDURE        DIVISION.
           OPEN OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([$COMPILE -cb_conf=filename-mapping:yes prog.cob], [0], [], [])
AT_CHECK([COB_FILE_PATH=".." ./prog], [0], [], [])
AT_CHECK([test -f "../FILENAMEX" && rm -f "../FILENAMEX"], [0], [], [])

AT_CLEANUP

# Number of call parameters

AT_SETUP([NUMBER-OF-CALL-PARAMETERS])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION
           USING W X Y Z.
           DISPLAY NUMBER-OF-CALL-PARAMETERS
           END-DISPLAY.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 W             PIC X.
       01 X             PIC X.
       01 Y             PIC X.
       01 Z             PIC X.
       PROCEDURE        DIVISION.
           CALL "callee"
           END-CALL.
           CALL "callee" USING W
           END-CALL.
           CALL "callee" USING W X
           END-CALL.
           CALL "callee" USING W X Y
           END-CALL.
           CALL "callee" USING W X Y Z
           END-CALL.
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([./caller], [0],
[+000000000
+000000001
+000000002
+000000003
+000000004
])

AT_CLEANUP

# TALLY

AT_SETUP([TALLY])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       PROCEDURE        DIVISION.
           ADD 1 TO TALLY END-ADD
           CALL "nested" END-CALL
           STOP RUN.

       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      nested.
       PROCEDURE        DIVISION.
           DISPLAY tally END-DISPLAY
           STOP RUN.
       END PROGRAM      nested.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0],
[00001
])

AT_CLEANUP

# Program parameters

AT_SETUP([PROCEDURE DIVISION USING BY ...])
AT_KEYWORDS([extensions])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       LINKAGE          SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION
           USING BY VALUE X BY REFERENCE Y Z.
           MOVE "Z" TO X.
           MOVE 56 TO Y.
           MOVE 78 TO Z.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X.
       01 Y             PIC 99.
       01 Z             PIC 99 USAGE COMP.
       PROCEDURE        DIVISION.
           MOVE "X" TO X.
           MOVE 12 TO Y.
           MOVE 34 TO Z.
           CALL "callee" USING BY CONTENT X
                               BY REFERENCE Y
                               BY CONTENT Z
           END-CALL.
           IF X NOT = "X" OR
              Y NOT = 56  OR
              Z NOT = 34
                DISPLAY "X = " X " Y = " Y " Z = " Z
                END-DISPLAY
           END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE caller.cob], [0], [], [])
AT_CHECK([$COMPILE_MODULE callee.cob], [0], [], [])
AT_CHECK([./caller], [0], [], [])

AT_CLEANUP

AT_SETUP([PROCEDURE DIVISION CHAINING ...])
AT_KEYWORDS([extensions])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01  X            PIC X.
       01  ABCD         PIC X(4).
       PROCEDURE        DIVISION
                        CHAINING X ABCD.
           IF X    NOT = "X" OR
              ABCD NOT = "ABCD"
              DISPLAY "X = " X " ABCD = " ABCD
              END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])

AT_CHECK([./prog X ABCD], [0], [], [])

AT_CLEANUP


AT_SETUP([STOP RUN RETURNING/GIVING])
AT_KEYWORDS([extensions])

AT_DATA([prog1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog1.
       PROCEDURE        DIVISION.
           STOP RUN RETURNING 1.
])

AT_DATA([prog2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog2.
       PROCEDURE        DIVISION.
           STOP RUN GIVING 2.
])

AT_CHECK([$COMPILE prog1.cob], [0], [], [])
AT_CHECK([./prog1], [1])

AT_CHECK([$COMPILE prog2.cob], [0], [], [])
AT_CHECK([./prog2], [2])

AT_CLEANUP


AT_SETUP([Conditional/define directives (1)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE NOT DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Conditional/define directives (2)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Conditional/define directives (3)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>ELIF ACTIVATE2 DEFINED
           DISPLAY "OK" NO ADVANCING
           END-DISPLAY
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [OK], [])

AT_CLEANUP


AT_SETUP([Conditional/define directives (4)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>ELIF ACTIVATE2 DEFINED
       >>ELSE
           DISPLAY "NOTOK" NO ADVANCING
           END-DISPLAY
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0], [], [])
AT_CHECK([./prog], [0], [], [])

AT_CLEANUP


AT_SETUP([Conditional/define directives (5)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       PROCEDURE        DIVISION.
       >>IF ACTIVATE DEFINED
       >>DISPLAY NOTOK
       >>ELIF ACTIVATE2 DEFINED
       >>DISPLAY OK
       >>ELSE
       >>DISPLAY NOTOK
       >>END-IF
           STOP RUN.
])

AT_CHECK([$COMPILE -DACTIVATE2 prog.cob], [0],
[OK
])
AT_CLEANUP


AT_SETUP([Conditional/define directives (6)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >>IF X DEFINED
         >>DISPLAY X defined
       >>ELSE
         >>DISPLAY X not defined
         >>DEFINE X 1
       >>END-IF
           CONTINUE
           .
])

AT_CHECK([$COMPILE -D X prog.cob], [0],
[X defined
])
AT_CHECK([$COMPILE prog.cob], [0],
[X not defined
])
AT_CLEANUP


AT_SETUP([Conditional/define directives (7)])
AT_KEYWORDS([extensions directive])

AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    prog.
       PROCEDURE      DIVISION.
       >>IF A IS DEFINED
       >>IF B IS DEFINED
           CONTINUE
           .
       >>ELSE
           CONTINUE
           .
       >>END-IF
       >>END-IF
])

AT_CHECK([$COMPILE prog.cob], [0], [])
AT_CLEANUP
